   1              		.file	"system.c"
   3              		.text
   4              	.Ltext0:
 108              		.align	2
 110              		.global	init
 112              	init:
   1:system.c      **** /*
   2:system.c      **** 
   3:system.c      **** Copyright (c) 2011, Ascending Technologies GmbH
   4:system.c      **** All rights reserved.
   5:system.c      **** 
   6:system.c      **** Redistribution and use in source and binary forms, with or without
   7:system.c      **** modification, are permitted provided that the following conditions are met:
   8:system.c      **** 
   9:system.c      ****  * Redistributions of source code must retain the above copyright notice,
  10:system.c      ****    this list of conditions and the following disclaimer.
  11:system.c      ****  * Redistributions in binary form must reproduce the above copyright
  12:system.c      ****    notice, this list of conditions and the following disclaimer in the
  13:system.c      ****    documentation and/or other materials provided with the distribution.
  14:system.c      **** 
  15:system.c      **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  16:system.c      **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  17:system.c      **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  18:system.c      **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  19:system.c      **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  20:system.c      **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  21:system.c      **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  22:system.c      **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:system.c      **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:system.c      **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  25:system.c      **** DAMAGE.
  26:system.c      **** 
  27:system.c      ****  */
  28:system.c      **** 
  29:system.c      **** #include "LPC214x.h"
  30:system.c      **** #include "system.h"
  31:system.c      **** #include "uart.h"
  32:system.c      **** #include "main.h"
  33:system.c      **** #include "hardware.h"
  34:system.c      **** #include "LPC2k_ee.h"
  35:system.c      **** #include "type.h"
  36:system.c      **** #include "irq.h"
  37:system.c      **** #include "i2c.h"
  38:system.c      **** #include "ssp.h"
  39:system.c      **** #include "adc.h"
  40:system.c      **** 
  41:system.c      **** void init(void)
  42:system.c      **** {
 114              	.LM0:
 115              		@ Function supports interworking.
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 0DC0A0E1 		mov	ip, sp
 119 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 120 0008 04B04CE2 		sub	fp, ip, #4
  43:system.c      ****   MAMCR = 0x02;  //Memory Acceleration enabled
 122              	.LM1:
 123 000c 0E32A0E3 		mov	r3, #-536870912
 124 0010 7F3983E2 		add	r3, r3, #2080768
 125 0014 0220A0E3 		mov	r2, #2
 126 0018 002083E5 		str	r2, [r3, #0]
  44:system.c      ****   MAMTIM = 0x04;
 128              	.LM2:
 129 001c 4E32A0E3 		mov	r3, #-536870908
 130 0020 7F3983E2 		add	r3, r3, #2080768
 131 0024 0420A0E3 		mov	r2, #4
 132 0028 002083E5 		str	r2, [r3, #0]
  45:system.c      ****   VPBDIV = 0x01;  //0x01: peripheral frequency == cpu frequency, 0x00: per. freq. = crystal freq.
 134              	.LM3:
 135 002c 0E32A0E3 		mov	r3, #-536870912
 136 0030 7F3983E2 		add	r3, r3, #2080768
 137 0034 013C83E2 		add	r3, r3, #256
 138 0038 0120A0E3 		mov	r2, #1
 139 003c 002083E5 		str	r2, [r3, #0]
  46:system.c      ****   pll_init();
 141              	.LM4:
 142 0040 FEFFFFEB 		bl	pll_init
  47:system.c      ****   pll_feed();
 144              	.LM5:
 145 0044 FEFFFFEB 		bl	pll_feed
  48:system.c      ****   init_ports();
 147              	.LM6:
 148 0048 FEFFFFEB 		bl	init_ports
  49:system.c      ****   UARTInitialize(57600);	//debug / command
 150              	.LM7:
 151 004c E10CA0E3 		mov	r0, #57600
 152 0050 FEFFFFEB 		bl	UARTInitialize
  50:system.c      ****   UART1Initialize(57600);	//57600 Servo / GPS, 38400 "indoor GPS"
 154              	.LM8:
 155 0054 E10CA0E3 		mov	r0, #57600
 156 0058 FEFFFFEB 		bl	UART1Initialize
  51:system.c      ****   init_spi();
 158              	.LM9:
 159 005c FEFFFFEB 		bl	init_spi
  52:system.c      ****   init_spi1();
 161              	.LM10:
 162 0060 FEFFFFEB 		bl	init_spi1
  53:system.c      ****   init_timer0();
 164              	.LM11:
 165 0064 FEFFFFEB 		bl	init_timer0
  54:system.c      **** //  I2CInit(I2CMASTER);
  55:system.c      ****   PWM_Init();
 167              	.LM12:
 168 0068 FEFFFFEB 		bl	PWM_Init
  56:system.c      ****   ADCInit(ADC_CLK);
 170              	.LM13:
 171 006c 3D09A0E3 		mov	r0, #999424
 172 0070 090D80E2 		add	r0, r0, #576
 173 0074 FEFFFFEB 		bl	ADCInit
  57:system.c      ****   init_interrupts();
 175              	.LM14:
 176 0078 FEFFFFEB 		bl	init_interrupts
  58:system.c      ****  }
 178              	.LM15:
 179 007c 0CD04BE2 		sub	sp, fp, #12
 180 0080 00689DE8 		ldmfd	sp, {fp, sp, lr}
 181 0084 1EFF2FE1 		bx	lr
 183              	.Lscope0:
 184              		.align	2
 186              		.global	init_interrupts
 188              	init_interrupts:
  59:system.c      **** 
  60:system.c      **** void init_interrupts(void)
  61:system.c      **** {
 190              	.LM16:
 191              		@ Function supports interworking.
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0088 0DC0A0E1 		mov	ip, sp
 195 008c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 196 0090 04B04CE2 		sub	fp, ip, #4
  62:system.c      ****   init_VIC();
 198              	.LM17:
 199 0094 FEFFFFEB 		bl	init_VIC
  63:system.c      **** 
  64:system.c      ****   //Timer0 interrupt
  65:system.c      ****   install_irq( TIMER0_INT, (void *) timer0ISR );
 201              	.LM18:
 202 0098 0400A0E3 		mov	r0, #4
 203 009c 80109FE5 		ldr	r1, .L5
 204 00a0 FEFFFFEB 		bl	install_irq
  66:system.c      **** 
  67:system.c      ****   //UART1 interrupt
  68:system.c      ****   install_irq( UART1_INT, (void *) uart1ISR );
 206              	.LM19:
 207 00a4 0700A0E3 		mov	r0, #7
 208 00a8 78109FE5 		ldr	r1, .L5+4
 209 00ac FEFFFFEB 		bl	install_irq
  69:system.c      ****   U1IER = 3; //=3; enable THRE and RX interrupt
 211              	.LM20:
 212 00b0 4E32A0E3 		mov	r3, #-536870908
 213 00b4 013883E2 		add	r3, r3, #65536
 214 00b8 0320A0E3 		mov	r2, #3
 215 00bc 002083E5 		str	r2, [r3, #0]
  70:system.c      **** 
  71:system.c      ****   //UART0 interrupt
  72:system.c      ****   install_irq( UART0_INT, (void *) uart0ISR );
 217              	.LM21:
 218 00c0 0600A0E3 		mov	r0, #6
 219 00c4 60109FE5 		ldr	r1, .L5+8
 220 00c8 FEFFFFEB 		bl	install_irq
  73:system.c      ****   U0IER = 3; //=3; enable THRE and RX interrupt
 222              	.LM22:
 223 00cc 0339A0E3 		mov	r3, #49152
 224 00d0 4E3283E2 		add	r3, r3, #-536870908
 225 00d4 0320A0E3 		mov	r2, #3
 226 00d8 002083E5 		str	r2, [r3, #0]
  74:system.c      **** 
  75:system.c      ****   //I2C0 interrupt
  76:system.c      **** //  install_irq( I2C0_INT, (void *) I2C0MasterHandler );
  77:system.c      **** //  I20CONSET = I2CONSET_I2EN;
  78:system.c      **** 
  79:system.c      ****   //SSP interrupt
  80:system.c      ****   install_irq( SPI1_INT, (void *) SSPHandler );
 228              	.LM23:
 229 00dc 0B00A0E3 		mov	r0, #11
 230 00e0 48109FE5 		ldr	r1, .L5+12
 231 00e4 FEFFFFEB 		bl	install_irq
  81:system.c      ****   /* Set SSPINMS registers to enable interrupts */
  82:system.c      ****   /* enable all interrupts, Rx overrun, Rx timeout, RX FIFO half full int,
  83:system.c      ****   TX FIFO half empty int */
  84:system.c      ****   SSPIMSC = SSPIMSC_TXIM | SSPIMSC_RXIM | SSPIMSC_RORIM;// | SSPIMSC_RTIM;
 233              	.LM24:
 234 00e8 0E32A0E3 		mov	r3, #-536870912
 235 00ec 1A3983E2 		add	r3, r3, #425984
 236 00f0 143083E2 		add	r3, r3, #20
 237 00f4 0D20A0E3 		mov	r2, #13
 238 00f8 002083E5 		str	r2, [r3, #0]
  85:system.c      ****   /* SSP Enabled */
  86:system.c      ****   SSPCR1 |= SSPCR1_SSE;
 240              	.LM25:
 241 00fc 4E22A0E3 		mov	r2, #-536870908
 242 0100 1A2982E2 		add	r2, r2, #425984
 243 0104 4E32A0E3 		mov	r3, #-536870908
 244 0108 1A3983E2 		add	r3, r3, #425984
 245 010c 003093E5 		ldr	r3, [r3, #0]
 246 0110 023083E3 		orr	r3, r3, #2
 247 0114 003082E5 		str	r3, [r2, #0]
  87:system.c      **** }
 249              	.LM26:
 250 0118 0CD04BE2 		sub	sp, fp, #12
 251 011c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 252 0120 1EFF2FE1 		bx	lr
 253              	.L6:
 254              		.align	2
 255              	.L5:
 256 0124 00000000 		.word	timer0ISR
 257 0128 00000000 		.word	uart1ISR
 258 012c 00000000 		.word	uart0ISR
 259 0130 00000000 		.word	SSPHandler
 261              	.Lscope1:
 262              		.align	2
 264              		.global	init_ports
 266              	init_ports:
  88:system.c      **** 
  89:system.c      **** 
  90:system.c      **** void init_ports(void)
  91:system.c      **** {
 268              	.LM27:
 269              		@ Function supports interworking.
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 1, uses_anonymous_args = 0
 272 0134 0DC0A0E1 		mov	ip, sp
 273 0138 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 274 013c 04B04CE2 		sub	fp, ip, #4
  92:system.c      **** /* PINSEL0
  93:system.c      ****  *
  94:system.c      ****  * PORT0:
  95:system.c      ****  * P0.0: TXD0 -> 01
  96:system.c      ****  * P0.1: RXD0 -> 01
  97:system.c      ****  * P0.2: SCO0 -> 01
  98:system.c      ****  * P0.3: SDA0 -> 01
  99:system.c      ****  * Byte0_sel = 0b01010101 = 0x55
 100:system.c      ****  *
 101:system.c      ****  * P0.4: SCK0 -> 01
 102:system.c      ****  * P0.5: MISO0 -> 01
 103:system.c      ****  * P0.6: MOSI0 -> 01
 104:system.c      ****  * P0.7: LL_NCS/IO_out -> 00
 105:system.c      ****  * or: PWM2 -> 10
 106:system.c      ****  * Byte1_sel = 0x00010101 = 0x15
 107:system.c      ****  * Byte0_io_dir = 0x80
 108:system.c      ****  *
 109:system.c      ****  * P0.8: TXD1 -> 01
 110:system.c      ****  * P0.9: RXD1 -> 01
 111:system.c      ****  * P0.10: IO_in -> 00
 112:system.c      ****  * P0.11: SCL1 -> 11
 113:system.c      ****  * or Falcon8: IO_out -> 00
 114:system.c      ****  * Byte2_sel = 0b11000101 = 0xC5
 115:system.c      ****  *
 116:system.c      ****  * P0.12: IO_in -> 00
 117:system.c      ****  * P0.13: IO_in -> 00
 118:system.c      ****  * P0.14: SDA1 -> 11
 119:system.c      ****  * or IO_out (CS SD-Card) => SD_Logging
 120:system.c      ****  * P0.15: IO_in -> 00
 121:system.c      ****  * Byte3_sel = 0b00110000 = 0x30
 122:system.c      ****  * Byte1_io_dir = 0x00
 123:system.c      ****  * or SD_Logging => Byte1_io_dir=0x40
 124:system.c      ****  */
 125:system.c      **** 
 126:system.c      ****  	PINSEL0=0x30C51555;
 276              	.LM28:
 277 0140 0E32A0E3 		mov	r3, #-536870912
 278 0144 0B3983E2 		add	r3, r3, #180224
 279 0148 84209FE5 		ldr	r2, .L9
 280 014c 002083E5 		str	r2, [r3, #0]
 127:system.c      **** 
 128:system.c      ****  /* PINSEL1
 129:system.c      ****   *
 130:system.c      ****   * P0.16: IO_in -> 00
 131:system.c      ****   * P0.17: SCK1 -> 10
 132:system.c      ****   * P0.18: MISO1 -> 10
 133:system.c      ****   * P0.19: MOSI1-> 10
 134:system.c      ****   * Byte0: 0b10101000 = 0xA8
 135:system.c      ****   *
 136:system.c      ****   * P0.20: SSEL1 -> 10
 137:system.c      ****   * P0.21: PWM5 -> 01
 138:system.c      ****   * P0.22: IO_in -> 00
 139:system.c      ****   * P0.23: IO_in -> 00
 140:system.c      ****   * Byte1: 0b00000110 = 0x06
 141:system.c      ****   * Byte2_io_dir: 0x30 //0x11
 142:system.c      ****   *
 143:system.c      ****   * P0.24: 00
 144:system.c      ****   * P0.25: VOLTAGE_2: -> 01
 145:system.c      ****   * or IO_in (FALCON) -> 00
 146:system.c      ****   * P0.26: 00
 147:system.c      ****   * P0.27: 00
 148:system.c      ****   * Byte2: 0b00000100 = 0x04
 149:system.c      ****   *
 150:system.c      ****   * P0.28: CURRENT_2: -> 01
 151:system.c      ****   * P0.29: VOLTAGE_1: -> 01
 152:system.c      ****   * P0.30: CURRENT_1: -> 01
 153:system.c      ****   * P0.31: IO_in -> 00
 154:system.c      ****   * Byte3: 0b00010101 = 0x15
 155:system.c      ****   * Byte3_io_dir=0x00
 156:system.c      ****   */
 157:system.c      ****  PINSEL1 = 0x150406A8;
 282              	.LM29:
 283 0150 4E32A0E3 		mov	r3, #-536870908
 284 0154 0B3983E2 		add	r3, r3, #180224
 285 0158 78209FE5 		ldr	r2, .L9+4
 286 015c 002083E5 		str	r2, [r3, #0]
 158:system.c      **** 
 159:system.c      ****  PINSEL2 = 0x00000004;
 288              	.LM30:
 289 0160 0E32A0E3 		mov	r3, #-536870912
 290 0164 0B3983E2 		add	r3, r3, #180224
 291 0168 143083E2 		add	r3, r3, #20
 292 016c 0420A0E3 		mov	r2, #4
 293 0170 002083E5 		str	r2, [r3, #0]
 160:system.c      **** 
 161:system.c      ****  IODIR0 = 0x0030B480;
 295              	.LM31:
 296 0174 8E22A0E3 		mov	r2, #-536870904
 297 0178 0A2982E2 		add	r2, r2, #163840
 298 017c C239A0E3 		mov	r3, #3178496
 299 0180 D23D83E2 		add	r3, r3, #13440
 300 0184 003082E5 		str	r3, [r2, #0]
 162:system.c      **** 
 163:system.c      ****  IOSET0 = (1<<EXT_NCS)|(1<<11); //all nCS high
 302              	.LM32:
 303 0188 4E32A0E3 		mov	r3, #-536870908
 304 018c 0A3983E2 		add	r3, r3, #163840
 305 0190 222DA0E3 		mov	r2, #2176
 306 0194 002083E5 		str	r2, [r3, #0]
 164:system.c      ****  //IOSET0 = (1<<LL_nCS);	//CS LL_Controller
 165:system.c      **** 
 166:system.c      **** /* P1.16: IO_1/IO_out	=> FET for camera power supply
 167:system.c      ****  * P1.17: Beeper/IO_out
 168:system.c      ****  * .
 169:system.c      ****  * .
 170:system.c      ****  * P1.24: LED1/IO_out
 171:system.c      ****  * P1.25: LED2/IO_out
 172:system.c      ****  *
 173:system.c      ****  */
 174:system.c      **** 
 175:system.c      ****  IODIR1 = 0x03030000;
 308              	.LM33:
 309 0198 0E22A0E3 		mov	r2, #-536870912
 310 019c 0A2982E2 		add	r2, r2, #163840
 311 01a0 182082E2 		add	r2, r2, #24
 312 01a4 0334A0E3 		mov	r3, #50331648
 313 01a8 033883E2 		add	r3, r3, #196608
 314 01ac 003082E5 		str	r3, [r2, #0]
 176:system.c      ****  IOSET1 = ((1<<24)|(1<<16)); //turn off LED1, turn beeper off
 316              	.LM34:
 317 01b0 0E22A0E3 		mov	r2, #-536870912
 318 01b4 0A2982E2 		add	r2, r2, #163840
 319 01b8 142082E2 		add	r2, r2, #20
 320 01bc 0134A0E3 		mov	r3, #16777216
 321 01c0 013883E2 		add	r3, r3, #65536
 322 01c4 003082E5 		str	r3, [r2, #0]
 177:system.c      **** 
 178:system.c      **** }
 324              	.LM35:
 325 01c8 0CD04BE2 		sub	sp, fp, #12
 326 01cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 327 01d0 1EFF2FE1 		bx	lr
 328              	.L10:
 329              		.align	2
 330              	.L9:
 331 01d4 5515C530 		.word	818222421
 332 01d8 A8060415 		.word	352585384
 334              	.Lscope2:
 335              		.align	2
 337              		.global	init_timer0
 339              	init_timer0:
 179:system.c      **** 
 180:system.c      **** void init_timer0(void)
 181:system.c      **** {
 341              	.LM36:
 342              		@ Function supports interworking.
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345 01dc 0DC0A0E1 		mov	ip, sp
 346 01e0 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 347 01e4 04B04CE2 		sub	fp, ip, #4
 182:system.c      ****   T0TC=0;
 349              	.LM37:
 350 01e8 0139A0E3 		mov	r3, #16384
 351 01ec 8E3283E2 		add	r3, r3, #-536870904
 352 01f0 0020A0E3 		mov	r2, #0
 353 01f4 002083E5 		str	r2, [r3, #0]
 183:system.c      ****   T0TCR=0x0;    //Reset timer0
 355              	.LM38:
 356 01f8 0139A0E3 		mov	r3, #16384
 357 01fc 4E3283E2 		add	r3, r3, #-536870908
 358 0200 0020A0E3 		mov	r2, #0
 359 0204 002083E5 		str	r2, [r3, #0]
 184:system.c      ****   T0MCR=0x3;    //Interrupt on match MR0 and reset counter
 361              	.LM39:
 362 0208 0E32A0E3 		mov	r3, #-536870912
 363 020c 013983E2 		add	r3, r3, #16384
 364 0210 143083E2 		add	r3, r3, #20
 365 0214 0320A0E3 		mov	r2, #3
 366 0218 002083E5 		str	r2, [r3, #0]
 185:system.c      ****   T0PR=0;
 368              	.LM40:
 369 021c 0139A0E3 		mov	r3, #16384
 370 0220 CE3283E2 		add	r3, r3, #-536870900
 371 0224 0020A0E3 		mov	r2, #0
 372 0228 002083E5 		str	r2, [r3, #0]
 186:system.c      ****   T0PC=0;     //Prescale Counter = 0
 374              	.LM41:
 375 022c 0E32A0E3 		mov	r3, #-536870912
 376 0230 013983E2 		add	r3, r3, #16384
 377 0234 103083E2 		add	r3, r3, #16
 378 0238 0020A0E3 		mov	r2, #0
 379 023c 002083E5 		str	r2, [r3, #0]
 187:system.c      ****   T0MR0=peripheralClockFrequency()/ControllerCyclesPerSecond; // /200 => 200 Hz Period
 381              	.LM42:
 382 0240 0E42A0E3 		mov	r4, #-536870912
 383 0244 014984E2 		add	r4, r4, #16384
 384 0248 184084E2 		add	r4, r4, #24
 385 024c FEFFFFEB 		bl	peripheralClockFrequency
 386 0250 0020A0E1 		mov	r2, r0
 387 0254 24309FE5 		ldr	r3, .L13
 388 0258 921383E0 		umull	r1, r3, r2, r3
 389 025c 2333A0E1 		mov	r3, r3, lsr #6
 390 0260 003084E5 		str	r3, [r4, #0]
 188:system.c      ****   T0TCR=0x1;   //Set timer0
 392              	.LM43:
 393 0264 0139A0E3 		mov	r3, #16384
 394 0268 4E3283E2 		add	r3, r3, #-536870908
 395 026c 0120A0E3 		mov	r2, #1
 396 0270 002083E5 		str	r2, [r3, #0]
 189:system.c      **** }
 398              	.LM44:
 399 0274 10D04BE2 		sub	sp, fp, #16
 400 0278 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 401 027c 1EFF2FE1 		bx	lr
 402              	.L14:
 403              		.align	2
 404              	.L13:
 405 0280 D34D6210 		.word	274877907
 407              	.Lscope3:
 408              		.align	2
 410              		.global	PWM_Init
 412              	PWM_Init:
 190:system.c      **** 
 191:system.c      **** void PWM_Init( void )
 192:system.c      **** {
 414              	.LM45:
 415              		@ Function supports interworking.
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418 0284 0DC0A0E1 		mov	ip, sp
 419 0288 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 420 028c 04B04CE2 		sub	fp, ip, #4
 193:system.c      ****   //  match_counter = 0;
 194:system.c      ****   //  PINSEL0 = 0x000A800A;	/* set GPIOs for all PWMs */
 195:system.c      ****   //  PINSEL1 = 0x00000400;
 196:system.c      ****     PWMTCR = TCR_RESET;		/* Counter Reset */
 422              	.LM46:
 423 0290 4E32A0E3 		mov	r3, #-536870908
 424 0294 053983E2 		add	r3, r3, #81920
 425 0298 0220A0E3 		mov	r2, #2
 426 029c 002083E5 		str	r2, [r3, #0]
 197:system.c      **** 
 198:system.c      ****     PWMPR = 0x00;		/* count frequency:Fpclk */
 428              	.LM47:
 429 02a0 CE32A0E3 		mov	r3, #-536870900
 430 02a4 053983E2 		add	r3, r3, #81920
 431 02a8 0020A0E3 		mov	r2, #0
 432 02ac 002083E5 		str	r2, [r3, #0]
 199:system.c      ****     PWMMCR = PWMMR0R;	/* interrupt on PWMMR0, reset on PWMMR0, reset
 434              	.LM48:
 435 02b0 0E32A0E3 		mov	r3, #-536870912
 436 02b4 053983E2 		add	r3, r3, #81920
 437 02b8 143083E2 		add	r3, r3, #20
 438 02bc 0220A0E3 		mov	r2, #2
 439 02c0 002083E5 		str	r2, [r3, #0]
 200:system.c      **** 				TC if PWM0 matches */
 201:system.c      ****     PWMMR0 = 1179648 ;
 441              	.LM49:
 442 02c4 0E32A0E3 		mov	r3, #-536870912
 443 02c8 053983E2 		add	r3, r3, #81920
 444 02cc 183083E2 		add	r3, r3, #24
 445 02d0 1228A0E3 		mov	r2, #1179648
 446 02d4 002083E5 		str	r2, [r3, #0]
 202:system.c      ****     PWMMR5 = 88470;
 448              	.LM50:
 449 02d8 0E22A0E3 		mov	r2, #-536870912
 450 02dc 052982E2 		add	r2, r2, #81920
 451 02e0 442082E2 		add	r2, r2, #68
 452 02e4 563BA0E3 		mov	r3, #88064
 453 02e8 653F83E2 		add	r3, r3, #404
 454 02ec 023083E2 		add	r3, r3, #2
 455 02f0 003082E5 		str	r3, [r2, #0]
 203:system.c      **** 
 204:system.c      ****     /* all PWM latch enabled */
 205:system.c      ****     PWMLER = LER5_EN;
 457              	.LM51:
 458 02f4 0E32A0E3 		mov	r3, #-536870912
 459 02f8 053983E2 		add	r3, r3, #81920
 460 02fc 503083E2 		add	r3, r3, #80
 461 0300 2020A0E3 		mov	r2, #32
 462 0304 002083E5 		str	r2, [r3, #0]
 206:system.c      **** 
 207:system.c      ****         /* All single edge, all enable */
 208:system.c      ****     PWMPCR = PWMENA1 | PWMENA2 | PWMENA3 | PWMENA4 | PWMENA5 | PWMENA6;
 464              	.LM52:
 465 0308 0E32A0E3 		mov	r3, #-536870912
 466 030c 053983E2 		add	r3, r3, #81920
 467 0310 4C3083E2 		add	r3, r3, #76
 468 0314 7E2CA0E3 		mov	r2, #32256
 469 0318 002083E5 		str	r2, [r3, #0]
 209:system.c      ****     PWMTCR = TCR_CNT_EN | TCR_PWM_EN;	/* counter enable, PWM enable */
 471              	.LM53:
 472 031c 4E32A0E3 		mov	r3, #-536870908
 473 0320 053983E2 		add	r3, r3, #81920
 474 0324 0920A0E3 		mov	r2, #9
 475 0328 002083E5 		str	r2, [r3, #0]
 210:system.c      **** }
 477              	.LM54:
 478 032c 0CD04BE2 		sub	sp, fp, #12
 479 0330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 480 0334 1EFF2FE1 		bx	lr
 482              	.Lscope4:
 483              		.align	2
 485              		.global	init_spi
 487              	init_spi:
 211:system.c      **** 
 212:system.c      **** 
 213:system.c      **** void init_spi(void)
 214:system.c      **** {
 489              	.LM55:
 490              		@ Function supports interworking.
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493 0338 0DC0A0E1 		mov	ip, sp
 494 033c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 495 0340 04B04CE2 		sub	fp, ip, #4
 215:system.c      ****   S0SPCCR=0x04; //30 clock-cycles (~60MHz) = 1 SPI cycle => SPI @ 2MHz
 497              	.LM56:
 498 0344 CE32A0E3 		mov	r3, #-536870900
 499 0348 023883E2 		add	r3, r3, #131072
 500 034c 0420A0E3 		mov	r2, #4
 501 0350 002083E5 		str	r2, [r3, #0]
 216:system.c      ****   S0SPCR=0x20;  //LPC is Master
 503              	.LM57:
 504 0354 0E32A0E3 		mov	r3, #-536870912
 505 0358 023883E2 		add	r3, r3, #131072
 506 035c 2020A0E3 		mov	r2, #32
 507 0360 002083E5 		str	r2, [r3, #0]
 217:system.c      **** }
 509              	.LM58:
 510 0364 0CD04BE2 		sub	sp, fp, #12
 511 0368 00689DE8 		ldmfd	sp, {fp, sp, lr}
 512 036c 1EFF2FE1 		bx	lr
 514              	.Lscope5:
 515              		.align	2
 517              		.global	init_spi1
 519              	init_spi1:
 218:system.c      **** 
 219:system.c      **** void init_spi1(void)
 220:system.c      **** {
 521              	.LM59:
 522              		@ Function supports interworking.
 523              		@ args = 0, pretend = 0, frame = 4
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525 0370 0DC0A0E1 		mov	ip, sp
 526 0374 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 527 0378 04B04CE2 		sub	fp, ip, #4
 528 037c 04D04DE2 		sub	sp, sp, #4
 221:system.c      **** 	unsigned char i, Dummy;
 222:system.c      **** 
 223:system.c      ****     /* Set DSS data to 8-bit, Frame format SPI, CPOL = 0, CPHA = 0, and SCR is 3 */
 224:system.c      ****     SSPCR0 = 0x040F;
 530              	.LM60:
 531 0380 0E22A0E3 		mov	r2, #-536870912
 532 0384 1A2982E2 		add	r2, r2, #425984
 533 0388 013BA0E3 		mov	r3, #1024
 534 038c 0F3083E2 		add	r3, r3, #15
 535 0390 003082E5 		str	r3, [r2, #0]
 225:system.c      **** 
 226:system.c      ****     /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
 227:system.c      ****     SSPCPSR = 0x1B;
 537              	.LM61:
 538 0394 0E32A0E3 		mov	r3, #-536870912
 539 0398 1A3983E2 		add	r3, r3, #425984
 540 039c 103083E2 		add	r3, r3, #16
 541 03a0 1B20A0E3 		mov	r2, #27
 542 03a4 002083E5 		str	r2, [r3, #0]
 228:system.c      **** 
 229:system.c      ****     for ( i = 0; i < FIFOSIZE; i++ )
 544              	.LM62:
 545 03a8 0030A0E3 		mov	r3, #0
 546 03ac 0E304BE5 		strb	r3, [fp, #-14]
 547 03b0 060000EA 		b	.L20
 548              	.L21:
 230:system.c      ****     {
 231:system.c      **** 	Dummy = SSPDR;		/* clear the RxFIFO */
 550              	.LM63:
 551 03b4 8E32A0E3 		mov	r3, #-536870904
 552 03b8 1A3983E2 		add	r3, r3, #425984
 553 03bc 003093E5 		ldr	r3, [r3, #0]
 554 03c0 0D304BE5 		strb	r3, [fp, #-13]
 229:system.c      ****     for ( i = 0; i < FIFOSIZE; i++ )
 556              	.LM64:
 557 03c4 0E305BE5 		ldrb	r3, [fp, #-14]
 558 03c8 013083E2 		add	r3, r3, #1
 559 03cc 0E304BE5 		strb	r3, [fp, #-14]
 560              	.L20:
 561 03d0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 562 03d4 070053E3 		cmp	r3, #7
 563 03d8 F5FFFF9A 		bls	.L21
 232:system.c      ****     }
 233:system.c      **** 
 234:system.c      ****     /*all ints deactivated*/
 235:system.c      **** 	SSPIMSC = 0;
 565              	.LM65:
 566 03dc 0E32A0E3 		mov	r3, #-536870912
 567 03e0 1A3983E2 		add	r3, r3, #425984
 568 03e4 143083E2 		add	r3, r3, #20
 569 03e8 0020A0E3 		mov	r2, #0
 570 03ec 002083E5 		str	r2, [r3, #0]
 236:system.c      **** 
 237:system.c      ****     /* Device select as master, SSP Enabled */
 238:system.c      ****     SSPCR1 = 0x00;// | SSPCR1_SSE;
 572              	.LM66:
 573 03f0 4E32A0E3 		mov	r3, #-536870908
 574 03f4 1A3983E2 		add	r3, r3, #425984
 575 03f8 0020A0E3 		mov	r2, #0
 576 03fc 002083E5 		str	r2, [r3, #0]
 239:system.c      **** 
 240:system.c      ****     return;
 241:system.c      **** 
 242:system.c      **** 
 243:system.c      **** }
 578              	.LM67:
 579 0400 0CD04BE2 		sub	sp, fp, #12
 580 0404 00689DE8 		ldmfd	sp, {fp, sp, lr}
 581 0408 1EFF2FE1 		bx	lr
 587              	.Lscope6:
 588              		.align	2
 590              		.global	pll_init
 592              	pll_init:
 244:system.c      **** 
 245:system.c      **** void pll_init(void)
 246:system.c      **** {
 594              	.LM68:
 595              		@ Function supports interworking.
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598 040c 0DC0A0E1 		mov	ip, sp
 599 0410 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 600 0414 04B04CE2 		sub	fp, ip, #4
 247:system.c      ****   PLLCFG=0x23;    //0b00100011; => M=4,0690; P=2;
 602              	.LM69:
 603 0418 0E32A0E3 		mov	r3, #-536870912
 604 041c 7F3983E2 		add	r3, r3, #2080768
 605 0420 843083E2 		add	r3, r3, #132
 606 0424 2320A0E3 		mov	r2, #35
 607 0428 002083E5 		str	r2, [r3, #0]
 248:system.c      ****   PLLCON=0x03;    //PLLE=1, PLLC=1 => PLL enabled as system clock
 609              	.LM70:
 610 042c 0E32A0E3 		mov	r3, #-536870912
 611 0430 7F3983E2 		add	r3, r3, #2080768
 612 0434 803083E2 		add	r3, r3, #128
 613 0438 0320A0E3 		mov	r2, #3
 614 043c 002083E5 		str	r2, [r3, #0]
 249:system.c      **** }
 616              	.LM71:
 617 0440 0CD04BE2 		sub	sp, fp, #12
 618 0444 00689DE8 		ldmfd	sp, {fp, sp, lr}
 619 0448 1EFF2FE1 		bx	lr
 621              	.Lscope7:
 622              		.align	2
 624              		.global	pll_feed
 626              	pll_feed:
 250:system.c      **** 
 251:system.c      **** void pll_feed(void)
 252:system.c      **** {
 628              	.LM72:
 629              		@ Function supports interworking.
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 1, uses_anonymous_args = 0
 632 044c 0DC0A0E1 		mov	ip, sp
 633 0450 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 634 0454 04B04CE2 		sub	fp, ip, #4
 253:system.c      ****   PLLFEED=0xAA;
 636              	.LM73:
 637 0458 0E32A0E3 		mov	r3, #-536870912
 638 045c 7F3983E2 		add	r3, r3, #2080768
 639 0460 8C3083E2 		add	r3, r3, #140
 640 0464 AA20A0E3 		mov	r2, #170
 641 0468 002083E5 		str	r2, [r3, #0]
 254:system.c      ****   PLLFEED=0x55;
 643              	.LM74:
 644 046c 0E32A0E3 		mov	r3, #-536870912
 645 0470 7F3983E2 		add	r3, r3, #2080768
 646 0474 8C3083E2 		add	r3, r3, #140
 647 0478 5520A0E3 		mov	r2, #85
 648 047c 002083E5 		str	r2, [r3, #0]
 255:system.c      **** }
 650              	.LM75:
 651 0480 0CD04BE2 		sub	sp, fp, #12
 652 0484 00689DE8 		ldmfd	sp, {fp, sp, lr}
 653 0488 1EFF2FE1 		bx	lr
 655              	.Lscope8:
 656              		.align	2
 658              		.global	processorClockFrequency
 660              	processorClockFrequency:
 256:system.c      **** 
 257:system.c      **** unsigned int processorClockFrequency(void)
 258:system.c      **** {
 662              	.LM76:
 663              		@ Function supports interworking.
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666 048c 0DC0A0E1 		mov	ip, sp
 667 0490 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 668 0494 04B04CE2 		sub	fp, ip, #4
 259:system.c      ****   return 58982400;
 670              	.LM77:
 671 0498 E137A0E3 		mov	r3, #58982400
 260:system.c      **** }
 673              	.LM78:
 674 049c 0300A0E1 		mov	r0, r3
 675 04a0 0CD04BE2 		sub	sp, fp, #12
 676 04a4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 677 04a8 1EFF2FE1 		bx	lr
 679              	.Lscope9:
 680              		.global	__udivsi3
 681              		.align	2
 683              		.global	peripheralClockFrequency
 685              	peripheralClockFrequency:
 261:system.c      **** 
 262:system.c      **** unsigned int peripheralClockFrequency(void)
 263:system.c      **** {
 687              	.LM79:
 688              		@ Function supports interworking.
 689              		@ args = 0, pretend = 0, frame = 8
 690              		@ frame_needed = 1, uses_anonymous_args = 0
 691 04ac 0DC0A0E1 		mov	ip, sp
 692 04b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 693 04b4 04B04CE2 		sub	fp, ip, #4
 694 04b8 08D04DE2 		sub	sp, sp, #8
 264:system.c      ****   unsigned int divider;
 265:system.c      ****   switch (VPBDIV & 3)
 696              	.LM80:
 697 04bc 0E32A0E3 		mov	r3, #-536870912
 698 04c0 7F3983E2 		add	r3, r3, #2080768
 699 04c4 013C83E2 		add	r3, r3, #256
 700 04c8 003093E5 		ldr	r3, [r3, #0]
 701 04cc 033003E2 		and	r3, r3, #3
 702 04d0 14300BE5 		str	r3, [fp, #-20]
 703 04d4 14301BE5 		ldr	r3, [fp, #-20]
 704 04d8 010053E3 		cmp	r3, #1
 705 04dc 0900000A 		beq	.L33
 706 04e0 14301BE5 		ldr	r3, [fp, #-20]
 707 04e4 010053E3 		cmp	r3, #1
 708 04e8 0300003A 		bcc	.L32
 709 04ec 14301BE5 		ldr	r3, [fp, #-20]
 710 04f0 020053E3 		cmp	r3, #2
 711 04f4 0600000A 		beq	.L34
 712 04f8 070000EA 		b	.L31
 713              	.L32:
 266:system.c      ****     {
 267:system.c      ****       case 0:
 268:system.c      ****         divider = 4;
 715              	.LM81:
 716 04fc 0430A0E3 		mov	r3, #4
 717 0500 10300BE5 		str	r3, [fp, #-16]
 269:system.c      ****         break;
 719              	.LM82:
 720 0504 040000EA 		b	.L31
 721              	.L33:
 270:system.c      ****       case 1:
 271:system.c      ****         divider = 1;
 723              	.LM83:
 724 0508 0130A0E3 		mov	r3, #1
 725 050c 10300BE5 		str	r3, [fp, #-16]
 272:system.c      ****         break;
 727              	.LM84:
 728 0510 010000EA 		b	.L31
 729              	.L34:
 273:system.c      ****       case 2:
 274:system.c      ****         divider = 2;
 731              	.LM85:
 732 0514 0230A0E3 		mov	r3, #2
 733 0518 10300BE5 		str	r3, [fp, #-16]
 734              	.L31:
 275:system.c      ****         break;
 276:system.c      ****     }
 277:system.c      ****   return processorClockFrequency() / divider;
 736              	.LM86:
 737 051c FEFFFFEB 		bl	processorClockFrequency
 738 0520 0030A0E1 		mov	r3, r0
 739 0524 0300A0E1 		mov	r0, r3
 740 0528 10101BE5 		ldr	r1, [fp, #-16]
 741 052c FEFFFFEB 		bl	__udivsi3
 742 0530 0030A0E1 		mov	r3, r0
 278:system.c      **** }
 744              	.LM87:
 745 0534 0300A0E1 		mov	r0, r3
 746 0538 0CD04BE2 		sub	sp, fp, #12
 747 053c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 748 0540 1EFF2FE1 		bx	lr
 753              	.Lscope10:
 754              		.align	2
 757              		.global	delay
 759              	delay:
 279:system.c      **** 
 280:system.c      **** void delay(int n)
 281:system.c      **** {
 761              	.LM88:
 762              		@ Function supports interworking.
 763              		@ args = 0, pretend = 0, frame = 8
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 0544 0DC0A0E1 		mov	ip, sp
 766 0548 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 767 054c 04B04CE2 		sub	fp, ip, #4
 768 0550 08D04DE2 		sub	sp, sp, #8
 769 0554 14000BE5 		str	r0, [fp, #-20]
 282:system.c      ****   volatile int i;
 283:system.c      ****   for (i = 0; i < n; ++i);
 771              	.LM89:
 772 0558 0030A0E3 		mov	r3, #0
 773 055c 10300BE5 		str	r3, [fp, #-16]
 774 0560 020000EA 		b	.L37
 775              	.L38:
 776 0564 10301BE5 		ldr	r3, [fp, #-16]
 777 0568 013083E2 		add	r3, r3, #1
 778 056c 10300BE5 		str	r3, [fp, #-16]
 779              	.L37:
 780 0570 10201BE5 		ldr	r2, [fp, #-16]
 781 0574 14301BE5 		ldr	r3, [fp, #-20]
 782 0578 030052E1 		cmp	r2, r3
 783 057c F8FFFFBA 		blt	.L38
 284:system.c      **** }
 785              	.LM90:
 786 0580 0CD04BE2 		sub	sp, fp, #12
 787 0584 00689DE8 		ldmfd	sp, {fp, sp, lr}
 788 0588 1EFF2FE1 		bx	lr
 793              	.Lscope11:
 794              		.comm	GPS_timeout,4,4
 795              		.comm	SYSTEM_initialized,1,1
 796              		.comm	SSP_trans_cnt,4,4
 801              	.Letext0:
 802              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 system.c
     /tmp/cczwJkG3.s:108    .text:00000000 $a
     /tmp/cczwJkG3.s:112    .text:00000000 init
     /tmp/cczwJkG3.s:592    .text:0000040c pll_init
     /tmp/cczwJkG3.s:626    .text:0000044c pll_feed
     /tmp/cczwJkG3.s:266    .text:00000134 init_ports
     /tmp/cczwJkG3.s:487    .text:00000338 init_spi
     /tmp/cczwJkG3.s:519    .text:00000370 init_spi1
     /tmp/cczwJkG3.s:339    .text:000001dc init_timer0
     /tmp/cczwJkG3.s:412    .text:00000284 PWM_Init
     /tmp/cczwJkG3.s:188    .text:00000088 init_interrupts
     /tmp/cczwJkG3.s:256    .text:00000124 $d
     /tmp/cczwJkG3.s:262    .text:00000134 $a
     /tmp/cczwJkG3.s:331    .text:000001d4 $d
     /tmp/cczwJkG3.s:335    .text:000001dc $a
     /tmp/cczwJkG3.s:685    .text:000004ac peripheralClockFrequency
     /tmp/cczwJkG3.s:405    .text:00000280 $d
     /tmp/cczwJkG3.s:408    .text:00000284 $a
     /tmp/cczwJkG3.s:660    .text:0000048c processorClockFrequency
     /tmp/cczwJkG3.s:759    .text:00000544 delay
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized
                            *COM*:00000004 SSP_trans_cnt

UNDEFINED SYMBOLS
UARTInitialize
UART1Initialize
ADCInit
init_VIC
install_irq
timer0ISR
uart1ISR
uart0ISR
SSPHandler
__udivsi3
