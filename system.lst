   1              		.file	"system.c"
   3              		.text
   4              	.Ltext0:
 101              		.align	2
 103              		.global	init
 105              	init:
   1:system.c      **** /*
   2:system.c      **** 
   3:system.c      **** Copyright (c) 2011, Ascending Technologies GmbH
   4:system.c      **** All rights reserved.
   5:system.c      **** 
   6:system.c      **** Redistribution and use in source and binary forms, with or without
   7:system.c      **** modification, are permitted provided that the following conditions are met:
   8:system.c      **** 
   9:system.c      ****  * Redistributions of source code must retain the above copyright notice,
  10:system.c      ****    this list of conditions and the following disclaimer.
  11:system.c      ****  * Redistributions in binary form must reproduce the above copyright
  12:system.c      ****    notice, this list of conditions and the following disclaimer in the
  13:system.c      ****    documentation and/or other materials provided with the distribution.
  14:system.c      **** 
  15:system.c      **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  16:system.c      **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  17:system.c      **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  18:system.c      **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  19:system.c      **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  20:system.c      **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  21:system.c      **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  22:system.c      **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:system.c      **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:system.c      **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  25:system.c      **** DAMAGE.
  26:system.c      **** 
  27:system.c      ****  */
  28:system.c      **** 
  29:system.c      **** #include "LPC214x.h"
  30:system.c      **** #include "system.h"
  31:system.c      **** #include "uart.h"
  32:system.c      **** #include "main.h"
  33:system.c      **** #include "hardware.h"
  34:system.c      **** #include "LPC2k_ee.h"
  35:system.c      **** #include "type.h"
  36:system.c      **** #include "irq.h"
  37:system.c      **** #include "i2c.h"
  38:system.c      **** #include "ssp.h"
  39:system.c      **** #include "adc.h"
  40:system.c      **** 
  41:system.c      **** void init(void)
  42:system.c      **** {
 107              	.LM0:
 108              		@ Function supports interworking.
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 0DC0A0E1 		mov	ip, sp
 112 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 113 0008 04B04CE2 		sub	fp, ip, #4
  43:system.c      ****   MAMCR = 0x02;  //Memory Acceleration enabled
 115              	.LM1:
 116 000c 0E32A0E3 		mov	r3, #-536870912
 117 0010 7F3983E2 		add	r3, r3, #2080768
 118 0014 0220A0E3 		mov	r2, #2
 119 0018 002083E5 		str	r2, [r3, #0]
  44:system.c      ****   MAMTIM = 0x04;
 121              	.LM2:
 122 001c 4E32A0E3 		mov	r3, #-536870908
 123 0020 7F3983E2 		add	r3, r3, #2080768
 124 0024 0420A0E3 		mov	r2, #4
 125 0028 002083E5 		str	r2, [r3, #0]
  45:system.c      ****   VPBDIV = 0x01;  //0x01: peripheral frequency == cpu frequency, 0x00: per. freq. = crystal freq.
 127              	.LM3:
 128 002c 0E32A0E3 		mov	r3, #-536870912
 129 0030 7F3983E2 		add	r3, r3, #2080768
 130 0034 013C83E2 		add	r3, r3, #256
 131 0038 0120A0E3 		mov	r2, #1
 132 003c 002083E5 		str	r2, [r3, #0]
  46:system.c      ****   pll_init();
 134              	.LM4:
 135 0040 FEFFFFEB 		bl	pll_init
  47:system.c      ****   pll_feed();
 137              	.LM5:
 138 0044 FEFFFFEB 		bl	pll_feed
  48:system.c      ****   init_ports();
 140              	.LM6:
 141 0048 FEFFFFEB 		bl	init_ports
  49:system.c      ****   UARTInitialize(57600);	//debug / command
 143              	.LM7:
 144 004c E10CA0E3 		mov	r0, #57600
 145 0050 FEFFFFEB 		bl	UARTInitialize
  50:system.c      ****   UART1Initialize(57600);	//57600 Servo / GPS, 38400 "indoor GPS"
 147              	.LM8:
 148 0054 E10CA0E3 		mov	r0, #57600
 149 0058 FEFFFFEB 		bl	UART1Initialize
  51:system.c      ****   init_spi();
 151              	.LM9:
 152 005c FEFFFFEB 		bl	init_spi
  52:system.c      ****   init_spi1();
 154              	.LM10:
 155 0060 FEFFFFEB 		bl	init_spi1
  53:system.c      ****   init_timer0();
 157              	.LM11:
 158 0064 FEFFFFEB 		bl	init_timer0
  54:system.c      **** //  I2CInit(I2CMASTER);
  55:system.c      ****   PWM_Init();
 160              	.LM12:
 161 0068 FEFFFFEB 		bl	PWM_Init
  56:system.c      ****   ADCInit(ADC_CLK);
 163              	.LM13:
 164 006c 3D09A0E3 		mov	r0, #999424
 165 0070 090D80E2 		add	r0, r0, #576
 166 0074 FEFFFFEB 		bl	ADCInit
  57:system.c      ****   init_interrupts();
 168              	.LM14:
 169 0078 FEFFFFEB 		bl	init_interrupts
  58:system.c      ****  }
 171              	.LM15:
 172 007c 0CD04BE2 		sub	sp, fp, #12
 173 0080 00689DE8 		ldmfd	sp, {fp, sp, lr}
 174 0084 1EFF2FE1 		bx	lr
 176              	.Lscope0:
 177              		.align	2
 179              		.global	init_interrupts
 181              	init_interrupts:
  59:system.c      **** 
  60:system.c      **** void init_interrupts(void)
  61:system.c      **** {
 183              	.LM16:
 184              		@ Function supports interworking.
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0088 0DC0A0E1 		mov	ip, sp
 188 008c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 189 0090 04B04CE2 		sub	fp, ip, #4
  62:system.c      ****   init_VIC();
 191              	.LM17:
 192 0094 FEFFFFEB 		bl	init_VIC
  63:system.c      **** 
  64:system.c      ****   //Timer0 interrupt
  65:system.c      ****   install_irq( TIMER0_INT, (void *) timer0ISR );
 194              	.LM18:
 195 0098 0400A0E3 		mov	r0, #4
 196 009c 80109FE5 		ldr	r1, .L5
 197 00a0 FEFFFFEB 		bl	install_irq
  66:system.c      **** 
  67:system.c      ****   //UART1 interrupt
  68:system.c      ****   install_irq( UART1_INT, (void *) uart1ISR );
 199              	.LM19:
 200 00a4 0700A0E3 		mov	r0, #7
 201 00a8 78109FE5 		ldr	r1, .L5+4
 202 00ac FEFFFFEB 		bl	install_irq
  69:system.c      ****   U1IER = 3; //=3; enable THRE and RX interrupt
 204              	.LM20:
 205 00b0 4E32A0E3 		mov	r3, #-536870908
 206 00b4 013883E2 		add	r3, r3, #65536
 207 00b8 0320A0E3 		mov	r2, #3
 208 00bc 002083E5 		str	r2, [r3, #0]
  70:system.c      **** 
  71:system.c      ****   //UART0 interrupt
  72:system.c      ****   install_irq( UART0_INT, (void *) uart0ISR );
 210              	.LM21:
 211 00c0 0600A0E3 		mov	r0, #6
 212 00c4 60109FE5 		ldr	r1, .L5+8
 213 00c8 FEFFFFEB 		bl	install_irq
  73:system.c      ****   U0IER = 3; //=3; enable THRE and RX interrupt
 215              	.LM22:
 216 00cc 0339A0E3 		mov	r3, #49152
 217 00d0 4E3283E2 		add	r3, r3, #-536870908
 218 00d4 0320A0E3 		mov	r2, #3
 219 00d8 002083E5 		str	r2, [r3, #0]
  74:system.c      **** 
  75:system.c      ****   //I2C0 interrupt
  76:system.c      **** //  install_irq( I2C0_INT, (void *) I2C0MasterHandler );
  77:system.c      **** //  I20CONSET = I2CONSET_I2EN;
  78:system.c      **** 
  79:system.c      ****   //SSP interrupt
  80:system.c      ****   install_irq( SPI1_INT, (void *) SSPHandler );
 221              	.LM23:
 222 00dc 0B00A0E3 		mov	r0, #11
 223 00e0 48109FE5 		ldr	r1, .L5+12
 224 00e4 FEFFFFEB 		bl	install_irq
  81:system.c      ****   /* Set SSPINMS registers to enable interrupts */
  82:system.c      ****   /* enable all interrupts, Rx overrun, Rx timeout, RX FIFO half full int,
  83:system.c      ****   TX FIFO half empty int */
  84:system.c      ****   SSPIMSC = SSPIMSC_TXIM | SSPIMSC_RXIM | SSPIMSC_RORIM;// | SSPIMSC_RTIM;
 226              	.LM24:
 227 00e8 0E32A0E3 		mov	r3, #-536870912
 228 00ec 1A3983E2 		add	r3, r3, #425984
 229 00f0 143083E2 		add	r3, r3, #20
 230 00f4 0D20A0E3 		mov	r2, #13
 231 00f8 002083E5 		str	r2, [r3, #0]
  85:system.c      ****   /* SSP Enabled */
  86:system.c      ****   SSPCR1 |= SSPCR1_SSE;
 233              	.LM25:
 234 00fc 4E22A0E3 		mov	r2, #-536870908
 235 0100 1A2982E2 		add	r2, r2, #425984
 236 0104 4E32A0E3 		mov	r3, #-536870908
 237 0108 1A3983E2 		add	r3, r3, #425984
 238 010c 003093E5 		ldr	r3, [r3, #0]
 239 0110 023083E3 		orr	r3, r3, #2
 240 0114 003082E5 		str	r3, [r2, #0]
  87:system.c      **** }
 242              	.LM26:
 243 0118 0CD04BE2 		sub	sp, fp, #12
 244 011c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 245 0120 1EFF2FE1 		bx	lr
 246              	.L6:
 247              		.align	2
 248              	.L5:
 249 0124 00000000 		.word	timer0ISR
 250 0128 00000000 		.word	uart1ISR
 251 012c 00000000 		.word	uart0ISR
 252 0130 00000000 		.word	SSPHandler
 254              	.Lscope1:
 255              		.align	2
 257              		.global	init_ports
 259              	init_ports:
  88:system.c      **** 
  89:system.c      **** 
  90:system.c      **** void init_ports(void)
  91:system.c      **** {
 261              	.LM27:
 262              		@ Function supports interworking.
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0134 0DC0A0E1 		mov	ip, sp
 266 0138 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 267 013c 04B04CE2 		sub	fp, ip, #4
  92:system.c      **** /* PINSEL0
  93:system.c      ****  *
  94:system.c      ****  * PORT0:
  95:system.c      ****  * P0.0: TXD0 -> 01
  96:system.c      ****  * P0.1: RXD0 -> 01
  97:system.c      ****  * P0.2: SCO0 -> 01
  98:system.c      ****  * P0.3: SDA0 -> 01
  99:system.c      ****  * Byte0_sel = 0b01010101 = 0x55
 100:system.c      ****  *
 101:system.c      ****  * P0.4: SCK0 -> 01
 102:system.c      ****  * P0.5: MISO0 -> 01
 103:system.c      ****  * P0.6: MOSI0 -> 01
 104:system.c      ****  * P0.7: LL_NCS/IO_out -> 00
 105:system.c      ****  * or: PWM2 -> 10
 106:system.c      ****  * Byte1_sel = 0x00010101 = 0x15
 107:system.c      ****  * Byte0_io_dir = 0x80
 108:system.c      ****  *
 109:system.c      ****  * P0.8: TXD1 -> 01
 110:system.c      ****  * P0.9: RXD1 -> 01
 111:system.c      ****  * P0.10: IO_in -> 00
 112:system.c      ****  * P0.11: SCL1 -> 11
 113:system.c      ****  * or Falcon8: IO_out -> 00
 114:system.c      ****  * Byte2_sel = 0b11000101 = 0xC5
 115:system.c      ****  *
 116:system.c      ****  * P0.12: IO_in -> 00
 117:system.c      ****  * P0.13: IO_in -> 00
 118:system.c      ****  * P0.14: SDA1 -> 11
 119:system.c      ****  * or IO_out (CS SD-Card) => SD_Logging
 120:system.c      ****  * P0.15: IO_in -> 00
 121:system.c      ****  * Byte3_sel = 0b00110000 = 0x30
 122:system.c      ****  * Byte1_io_dir = 0x00
 123:system.c      ****  * or SD_Logging => Byte1_io_dir=0x40
 124:system.c      ****  */
 125:system.c      **** 
 126:system.c      ****  	PINSEL0=0x30C51555;
 269              	.LM28:
 270 0140 0E32A0E3 		mov	r3, #-536870912
 271 0144 0B3983E2 		add	r3, r3, #180224
 272 0148 84209FE5 		ldr	r2, .L9
 273 014c 002083E5 		str	r2, [r3, #0]
 127:system.c      **** 
 128:system.c      ****  /* PINSEL1
 129:system.c      ****   *
 130:system.c      ****   * P0.16: IO_in -> 00
 131:system.c      ****   * P0.17: SCK1 -> 10
 132:system.c      ****   * P0.18: MISO1 -> 10
 133:system.c      ****   * P0.19: MOSI1-> 10
 134:system.c      ****   * Byte0: 0b10101000 = 0xA8
 135:system.c      ****   *
 136:system.c      ****   * P0.20: SSEL1 -> 10
 137:system.c      ****   * P0.21: PWM5 -> 01
 138:system.c      ****   * P0.22: IO_in -> 00
 139:system.c      ****   * P0.23: IO_in -> 00
 140:system.c      ****   * Byte1: 0b00000110 = 0x06
 141:system.c      ****   * Byte2_io_dir: 0x30 //0x11
 142:system.c      ****   *
 143:system.c      ****   * P0.24: 00
 144:system.c      ****   * P0.25: VOLTAGE_2: -> 01
 145:system.c      ****   * or IO_in (FALCON) -> 00
 146:system.c      ****   * P0.26: 00
 147:system.c      ****   * P0.27: 00
 148:system.c      ****   * Byte2: 0b00000100 = 0x04
 149:system.c      ****   *
 150:system.c      ****   * P0.28: CURRENT_2: -> 01
 151:system.c      ****   * P0.29: VOLTAGE_1: -> 01
 152:system.c      ****   * P0.30: CURRENT_1: -> 01
 153:system.c      ****   * P0.31: IO_in -> 00
 154:system.c      ****   * Byte3: 0b00010101 = 0x15
 155:system.c      ****   * Byte3_io_dir=0x00
 156:system.c      ****   */
 157:system.c      ****  PINSEL1 = 0x150406A8;
 275              	.LM29:
 276 0150 4E32A0E3 		mov	r3, #-536870908
 277 0154 0B3983E2 		add	r3, r3, #180224
 278 0158 78209FE5 		ldr	r2, .L9+4
 279 015c 002083E5 		str	r2, [r3, #0]
 158:system.c      **** 
 159:system.c      ****  PINSEL2 = 0x00000004;
 281              	.LM30:
 282 0160 0E32A0E3 		mov	r3, #-536870912
 283 0164 0B3983E2 		add	r3, r3, #180224
 284 0168 143083E2 		add	r3, r3, #20
 285 016c 0420A0E3 		mov	r2, #4
 286 0170 002083E5 		str	r2, [r3, #0]
 160:system.c      **** 
 161:system.c      ****  IODIR0 = 0x0030B480;
 288              	.LM31:
 289 0174 8E22A0E3 		mov	r2, #-536870904
 290 0178 0A2982E2 		add	r2, r2, #163840
 291 017c C239A0E3 		mov	r3, #3178496
 292 0180 D23D83E2 		add	r3, r3, #13440
 293 0184 003082E5 		str	r3, [r2, #0]
 162:system.c      **** 
 163:system.c      ****  IOSET0 = (1<<EXT_NCS)|(1<<11); //all nCS high
 295              	.LM32:
 296 0188 4E32A0E3 		mov	r3, #-536870908
 297 018c 0A3983E2 		add	r3, r3, #163840
 298 0190 222DA0E3 		mov	r2, #2176
 299 0194 002083E5 		str	r2, [r3, #0]
 164:system.c      ****  //IOSET0 = (1<<LL_nCS);	//CS LL_Controller
 165:system.c      **** 
 166:system.c      **** /* P1.16: IO_1/IO_out	=> FET for camera power supply
 167:system.c      ****  * P1.17: Beeper/IO_out
 168:system.c      ****  * .
 169:system.c      ****  * .
 170:system.c      ****  * P1.24: LED1/IO_out
 171:system.c      ****  * P1.25: LED2/IO_out
 172:system.c      ****  *
 173:system.c      ****  */
 174:system.c      **** 
 175:system.c      ****  IODIR1 = 0x03030000;
 301              	.LM33:
 302 0198 0E22A0E3 		mov	r2, #-536870912
 303 019c 0A2982E2 		add	r2, r2, #163840
 304 01a0 182082E2 		add	r2, r2, #24
 305 01a4 0334A0E3 		mov	r3, #50331648
 306 01a8 033883E2 		add	r3, r3, #196608
 307 01ac 003082E5 		str	r3, [r2, #0]
 176:system.c      ****  IOSET1 = ((1<<24)|(1<<16)); //turn off LED1, turn beeper off
 309              	.LM34:
 310 01b0 0E22A0E3 		mov	r2, #-536870912
 311 01b4 0A2982E2 		add	r2, r2, #163840
 312 01b8 142082E2 		add	r2, r2, #20
 313 01bc 0134A0E3 		mov	r3, #16777216
 314 01c0 013883E2 		add	r3, r3, #65536
 315 01c4 003082E5 		str	r3, [r2, #0]
 177:system.c      **** 
 178:system.c      **** }
 317              	.LM35:
 318 01c8 0CD04BE2 		sub	sp, fp, #12
 319 01cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 320 01d0 1EFF2FE1 		bx	lr
 321              	.L10:
 322              		.align	2
 323              	.L9:
 324 01d4 5515C530 		.word	818222421
 325 01d8 A8060415 		.word	352585384
 327              	.Lscope2:
 328              		.align	2
 330              		.global	init_timer0
 332              	init_timer0:
 179:system.c      **** 
 180:system.c      **** void init_timer0(void)
 181:system.c      **** {
 334              	.LM36:
 335              		@ Function supports interworking.
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338 01dc 0DC0A0E1 		mov	ip, sp
 339 01e0 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 340 01e4 04B04CE2 		sub	fp, ip, #4
 182:system.c      ****   T0TC=0;
 342              	.LM37:
 343 01e8 0139A0E3 		mov	r3, #16384
 344 01ec 8E3283E2 		add	r3, r3, #-536870904
 345 01f0 0020A0E3 		mov	r2, #0
 346 01f4 002083E5 		str	r2, [r3, #0]
 183:system.c      ****   T0TCR=0x0;    //Reset timer0
 348              	.LM38:
 349 01f8 0139A0E3 		mov	r3, #16384
 350 01fc 4E3283E2 		add	r3, r3, #-536870908
 351 0200 0020A0E3 		mov	r2, #0
 352 0204 002083E5 		str	r2, [r3, #0]
 184:system.c      ****   T0MCR=0x3;    //Interrupt on match MR0 and reset counter
 354              	.LM39:
 355 0208 0E32A0E3 		mov	r3, #-536870912
 356 020c 013983E2 		add	r3, r3, #16384
 357 0210 143083E2 		add	r3, r3, #20
 358 0214 0320A0E3 		mov	r2, #3
 359 0218 002083E5 		str	r2, [r3, #0]
 185:system.c      ****   T0PR=0;
 361              	.LM40:
 362 021c 0139A0E3 		mov	r3, #16384
 363 0220 CE3283E2 		add	r3, r3, #-536870900
 364 0224 0020A0E3 		mov	r2, #0
 365 0228 002083E5 		str	r2, [r3, #0]
 186:system.c      ****   T0PC=0;     //Prescale Counter = 0
 367              	.LM41:
 368 022c 0E32A0E3 		mov	r3, #-536870912
 369 0230 013983E2 		add	r3, r3, #16384
 370 0234 103083E2 		add	r3, r3, #16
 371 0238 0020A0E3 		mov	r2, #0
 372 023c 002083E5 		str	r2, [r3, #0]
 187:system.c      ****   T0MR0=peripheralClockFrequency()/ControllerCyclesPerSecond; // /200 => 200 Hz Period
 374              	.LM42:
 375 0240 0E42A0E3 		mov	r4, #-536870912
 376 0244 014984E2 		add	r4, r4, #16384
 377 0248 184084E2 		add	r4, r4, #24
 378 024c FEFFFFEB 		bl	peripheralClockFrequency
 379 0250 0020A0E1 		mov	r2, r0
 380 0254 24309FE5 		ldr	r3, .L13
 381 0258 921383E0 		umull	r1, r3, r2, r3
 382 025c 2333A0E1 		mov	r3, r3, lsr #6
 383 0260 003084E5 		str	r3, [r4, #0]
 188:system.c      ****   T0TCR=0x1;   //Set timer0
 385              	.LM43:
 386 0264 0139A0E3 		mov	r3, #16384
 387 0268 4E3283E2 		add	r3, r3, #-536870908
 388 026c 0120A0E3 		mov	r2, #1
 389 0270 002083E5 		str	r2, [r3, #0]
 189:system.c      **** }
 391              	.LM44:
 392 0274 10D04BE2 		sub	sp, fp, #16
 393 0278 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 394 027c 1EFF2FE1 		bx	lr
 395              	.L14:
 396              		.align	2
 397              	.L13:
 398 0280 D34D6210 		.word	274877907
 400              	.Lscope3:
 401              		.align	2
 403              		.global	PWM_Init
 405              	PWM_Init:
 190:system.c      **** 
 191:system.c      **** void PWM_Init( void )
 192:system.c      **** {
 407              	.LM45:
 408              		@ Function supports interworking.
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411 0284 0DC0A0E1 		mov	ip, sp
 412 0288 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 413 028c 04B04CE2 		sub	fp, ip, #4
 193:system.c      ****   //  match_counter = 0;
 194:system.c      ****   //  PINSEL0 = 0x000A800A;	/* set GPIOs for all PWMs */
 195:system.c      ****   //  PINSEL1 = 0x00000400;
 196:system.c      ****     PWMTCR = TCR_RESET;		/* Counter Reset */
 415              	.LM46:
 416 0290 4E32A0E3 		mov	r3, #-536870908
 417 0294 053983E2 		add	r3, r3, #81920
 418 0298 0220A0E3 		mov	r2, #2
 419 029c 002083E5 		str	r2, [r3, #0]
 197:system.c      **** 
 198:system.c      ****     PWMPR = 0x00;		/* count frequency:Fpclk */
 421              	.LM47:
 422 02a0 CE32A0E3 		mov	r3, #-536870900
 423 02a4 053983E2 		add	r3, r3, #81920
 424 02a8 0020A0E3 		mov	r2, #0
 425 02ac 002083E5 		str	r2, [r3, #0]
 199:system.c      ****     PWMMCR = PWMMR0R;	/* interrupt on PWMMR0, reset on PWMMR0, reset
 427              	.LM48:
 428 02b0 0E32A0E3 		mov	r3, #-536870912
 429 02b4 053983E2 		add	r3, r3, #81920
 430 02b8 143083E2 		add	r3, r3, #20
 431 02bc 0220A0E3 		mov	r2, #2
 432 02c0 002083E5 		str	r2, [r3, #0]
 200:system.c      **** 				TC if PWM0 matches */
 201:system.c      ****     PWMMR0 = 1179648 ;
 434              	.LM49:
 435 02c4 0E32A0E3 		mov	r3, #-536870912
 436 02c8 053983E2 		add	r3, r3, #81920
 437 02cc 183083E2 		add	r3, r3, #24
 438 02d0 1228A0E3 		mov	r2, #1179648
 439 02d4 002083E5 		str	r2, [r3, #0]
 202:system.c      ****     PWMMR5 = 88470;
 441              	.LM50:
 442 02d8 0E22A0E3 		mov	r2, #-536870912
 443 02dc 052982E2 		add	r2, r2, #81920
 444 02e0 442082E2 		add	r2, r2, #68
 445 02e4 563BA0E3 		mov	r3, #88064
 446 02e8 653F83E2 		add	r3, r3, #404
 447 02ec 023083E2 		add	r3, r3, #2
 448 02f0 003082E5 		str	r3, [r2, #0]
 203:system.c      **** 
 204:system.c      ****     /* all PWM latch enabled */
 205:system.c      ****     PWMLER = LER5_EN;
 450              	.LM51:
 451 02f4 0E32A0E3 		mov	r3, #-536870912
 452 02f8 053983E2 		add	r3, r3, #81920
 453 02fc 503083E2 		add	r3, r3, #80
 454 0300 2020A0E3 		mov	r2, #32
 455 0304 002083E5 		str	r2, [r3, #0]
 206:system.c      **** 
 207:system.c      ****         /* All single edge, all enable */
 208:system.c      ****     PWMPCR = PWMENA1 | PWMENA2 | PWMENA3 | PWMENA4 | PWMENA5 | PWMENA6;
 457              	.LM52:
 458 0308 0E32A0E3 		mov	r3, #-536870912
 459 030c 053983E2 		add	r3, r3, #81920
 460 0310 4C3083E2 		add	r3, r3, #76
 461 0314 7E2CA0E3 		mov	r2, #32256
 462 0318 002083E5 		str	r2, [r3, #0]
 209:system.c      ****     PWMTCR = TCR_CNT_EN | TCR_PWM_EN;	/* counter enable, PWM enable */
 464              	.LM53:
 465 031c 4E32A0E3 		mov	r3, #-536870908
 466 0320 053983E2 		add	r3, r3, #81920
 467 0324 0920A0E3 		mov	r2, #9
 468 0328 002083E5 		str	r2, [r3, #0]
 210:system.c      **** }
 470              	.LM54:
 471 032c 0CD04BE2 		sub	sp, fp, #12
 472 0330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 473 0334 1EFF2FE1 		bx	lr
 475              	.Lscope4:
 476              		.align	2
 478              		.global	init_spi
 480              	init_spi:
 211:system.c      **** 
 212:system.c      **** 
 213:system.c      **** void init_spi(void)
 214:system.c      **** {
 482              	.LM55:
 483              		@ Function supports interworking.
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486 0338 0DC0A0E1 		mov	ip, sp
 487 033c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 488 0340 04B04CE2 		sub	fp, ip, #4
 215:system.c      ****   S0SPCCR=0x04; //30 clock-cycles (~60MHz) = 1 SPI cycle => SPI @ 2MHz
 490              	.LM56:
 491 0344 CE32A0E3 		mov	r3, #-536870900
 492 0348 023883E2 		add	r3, r3, #131072
 493 034c 0420A0E3 		mov	r2, #4
 494 0350 002083E5 		str	r2, [r3, #0]
 216:system.c      ****   S0SPCR=0x20;  //LPC is Master
 496              	.LM57:
 497 0354 0E32A0E3 		mov	r3, #-536870912
 498 0358 023883E2 		add	r3, r3, #131072
 499 035c 2020A0E3 		mov	r2, #32
 500 0360 002083E5 		str	r2, [r3, #0]
 217:system.c      **** }
 502              	.LM58:
 503 0364 0CD04BE2 		sub	sp, fp, #12
 504 0368 00689DE8 		ldmfd	sp, {fp, sp, lr}
 505 036c 1EFF2FE1 		bx	lr
 507              	.Lscope5:
 508              		.align	2
 510              		.global	init_spi1
 512              	init_spi1:
 218:system.c      **** 
 219:system.c      **** void init_spi1(void)
 220:system.c      **** {
 514              	.LM59:
 515              		@ Function supports interworking.
 516              		@ args = 0, pretend = 0, frame = 4
 517              		@ frame_needed = 1, uses_anonymous_args = 0
 518 0370 0DC0A0E1 		mov	ip, sp
 519 0374 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 520 0378 04B04CE2 		sub	fp, ip, #4
 521 037c 04D04DE2 		sub	sp, sp, #4
 221:system.c      **** 	unsigned char i, Dummy;
 222:system.c      **** 
 223:system.c      ****     /* Set DSS data to 8-bit, Frame format SPI, CPOL = 0, CPHA = 0, and SCR is 3 */
 224:system.c      ****     SSPCR0 = 0x040F;
 523              	.LM60:
 524 0380 0E22A0E3 		mov	r2, #-536870912
 525 0384 1A2982E2 		add	r2, r2, #425984
 526 0388 013BA0E3 		mov	r3, #1024
 527 038c 0F3083E2 		add	r3, r3, #15
 528 0390 003082E5 		str	r3, [r2, #0]
 225:system.c      **** 
 226:system.c      ****     /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
 227:system.c      ****     SSPCPSR = 0x1B;
 530              	.LM61:
 531 0394 0E32A0E3 		mov	r3, #-536870912
 532 0398 1A3983E2 		add	r3, r3, #425984
 533 039c 103083E2 		add	r3, r3, #16
 534 03a0 1B20A0E3 		mov	r2, #27
 535 03a4 002083E5 		str	r2, [r3, #0]
 228:system.c      **** 
 229:system.c      ****     for ( i = 0; i < FIFOSIZE; i++ )
 537              	.LM62:
 538 03a8 0030A0E3 		mov	r3, #0
 539 03ac 0E304BE5 		strb	r3, [fp, #-14]
 540 03b0 060000EA 		b	.L20
 541              	.L21:
 230:system.c      ****     {
 231:system.c      **** 	Dummy = SSPDR;		/* clear the RxFIFO */
 543              	.LM63:
 544 03b4 8E32A0E3 		mov	r3, #-536870904
 545 03b8 1A3983E2 		add	r3, r3, #425984
 546 03bc 003093E5 		ldr	r3, [r3, #0]
 547 03c0 0D304BE5 		strb	r3, [fp, #-13]
 229:system.c      ****     for ( i = 0; i < FIFOSIZE; i++ )
 549              	.LM64:
 550 03c4 0E305BE5 		ldrb	r3, [fp, #-14]
 551 03c8 013083E2 		add	r3, r3, #1
 552 03cc 0E304BE5 		strb	r3, [fp, #-14]
 553              	.L20:
 554 03d0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 555 03d4 070053E3 		cmp	r3, #7
 556 03d8 F5FFFF9A 		bls	.L21
 232:system.c      ****     }
 233:system.c      **** 
 234:system.c      ****     /*all ints deactivated*/
 235:system.c      **** 	SSPIMSC = 0;
 558              	.LM65:
 559 03dc 0E32A0E3 		mov	r3, #-536870912
 560 03e0 1A3983E2 		add	r3, r3, #425984
 561 03e4 143083E2 		add	r3, r3, #20
 562 03e8 0020A0E3 		mov	r2, #0
 563 03ec 002083E5 		str	r2, [r3, #0]
 236:system.c      **** 
 237:system.c      ****     /* Device select as master, SSP Enabled */
 238:system.c      ****     SSPCR1 = 0x00;// | SSPCR1_SSE;
 565              	.LM66:
 566 03f0 4E32A0E3 		mov	r3, #-536870908
 567 03f4 1A3983E2 		add	r3, r3, #425984
 568 03f8 0020A0E3 		mov	r2, #0
 569 03fc 002083E5 		str	r2, [r3, #0]
 239:system.c      **** 
 240:system.c      ****     return;
 241:system.c      **** 
 242:system.c      **** 
 243:system.c      **** }
 571              	.LM67:
 572 0400 0CD04BE2 		sub	sp, fp, #12
 573 0404 00689DE8 		ldmfd	sp, {fp, sp, lr}
 574 0408 1EFF2FE1 		bx	lr
 580              	.Lscope6:
 581              		.align	2
 583              		.global	pll_init
 585              	pll_init:
 244:system.c      **** 
 245:system.c      **** void pll_init(void)
 246:system.c      **** {
 587              	.LM68:
 588              		@ Function supports interworking.
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 1, uses_anonymous_args = 0
 591 040c 0DC0A0E1 		mov	ip, sp
 592 0410 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 593 0414 04B04CE2 		sub	fp, ip, #4
 247:system.c      ****   PLLCFG=0x23;    //0b00100011; => M=4,0690; P=2;
 595              	.LM69:
 596 0418 0E32A0E3 		mov	r3, #-536870912
 597 041c 7F3983E2 		add	r3, r3, #2080768
 598 0420 843083E2 		add	r3, r3, #132
 599 0424 2320A0E3 		mov	r2, #35
 600 0428 002083E5 		str	r2, [r3, #0]
 248:system.c      ****   PLLCON=0x03;    //PLLE=1, PLLC=1 => PLL enabled as system clock
 602              	.LM70:
 603 042c 0E32A0E3 		mov	r3, #-536870912
 604 0430 7F3983E2 		add	r3, r3, #2080768
 605 0434 803083E2 		add	r3, r3, #128
 606 0438 0320A0E3 		mov	r2, #3
 607 043c 002083E5 		str	r2, [r3, #0]
 249:system.c      **** }
 609              	.LM71:
 610 0440 0CD04BE2 		sub	sp, fp, #12
 611 0444 00689DE8 		ldmfd	sp, {fp, sp, lr}
 612 0448 1EFF2FE1 		bx	lr
 614              	.Lscope7:
 615              		.align	2
 617              		.global	pll_feed
 619              	pll_feed:
 250:system.c      **** 
 251:system.c      **** void pll_feed(void)
 252:system.c      **** {
 621              	.LM72:
 622              		@ Function supports interworking.
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625 044c 0DC0A0E1 		mov	ip, sp
 626 0450 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 627 0454 04B04CE2 		sub	fp, ip, #4
 253:system.c      ****   PLLFEED=0xAA;
 629              	.LM73:
 630 0458 0E32A0E3 		mov	r3, #-536870912
 631 045c 7F3983E2 		add	r3, r3, #2080768
 632 0460 8C3083E2 		add	r3, r3, #140
 633 0464 AA20A0E3 		mov	r2, #170
 634 0468 002083E5 		str	r2, [r3, #0]
 254:system.c      ****   PLLFEED=0x55;
 636              	.LM74:
 637 046c 0E32A0E3 		mov	r3, #-536870912
 638 0470 7F3983E2 		add	r3, r3, #2080768
 639 0474 8C3083E2 		add	r3, r3, #140
 640 0478 5520A0E3 		mov	r2, #85
 641 047c 002083E5 		str	r2, [r3, #0]
 255:system.c      **** }
 643              	.LM75:
 644 0480 0CD04BE2 		sub	sp, fp, #12
 645 0484 00689DE8 		ldmfd	sp, {fp, sp, lr}
 646 0488 1EFF2FE1 		bx	lr
 648              	.Lscope8:
 649              		.align	2
 651              		.global	processorClockFrequency
 653              	processorClockFrequency:
 256:system.c      **** 
 257:system.c      **** unsigned int processorClockFrequency(void)
 258:system.c      **** {
 655              	.LM76:
 656              		@ Function supports interworking.
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 048c 0DC0A0E1 		mov	ip, sp
 660 0490 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 661 0494 04B04CE2 		sub	fp, ip, #4
 259:system.c      ****   return 58982400;
 663              	.LM77:
 664 0498 E137A0E3 		mov	r3, #58982400
 260:system.c      **** }
 666              	.LM78:
 667 049c 0300A0E1 		mov	r0, r3
 668 04a0 0CD04BE2 		sub	sp, fp, #12
 669 04a4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 670 04a8 1EFF2FE1 		bx	lr
 672              	.Lscope9:
 673              		.global	__udivsi3
 674              		.align	2
 676              		.global	peripheralClockFrequency
 678              	peripheralClockFrequency:
 261:system.c      **** 
 262:system.c      **** unsigned int peripheralClockFrequency(void)
 263:system.c      **** {
 680              	.LM79:
 681              		@ Function supports interworking.
 682              		@ args = 0, pretend = 0, frame = 8
 683              		@ frame_needed = 1, uses_anonymous_args = 0
 684 04ac 0DC0A0E1 		mov	ip, sp
 685 04b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 686 04b4 04B04CE2 		sub	fp, ip, #4
 687 04b8 08D04DE2 		sub	sp, sp, #8
 264:system.c      ****   unsigned int divider;
 265:system.c      ****   switch (VPBDIV & 3)
 689              	.LM80:
 690 04bc 0E32A0E3 		mov	r3, #-536870912
 691 04c0 7F3983E2 		add	r3, r3, #2080768
 692 04c4 013C83E2 		add	r3, r3, #256
 693 04c8 003093E5 		ldr	r3, [r3, #0]
 694 04cc 033003E2 		and	r3, r3, #3
 695 04d0 14300BE5 		str	r3, [fp, #-20]
 696 04d4 14301BE5 		ldr	r3, [fp, #-20]
 697 04d8 010053E3 		cmp	r3, #1
 698 04dc 0900000A 		beq	.L33
 699 04e0 14301BE5 		ldr	r3, [fp, #-20]
 700 04e4 010053E3 		cmp	r3, #1
 701 04e8 0300003A 		bcc	.L32
 702 04ec 14301BE5 		ldr	r3, [fp, #-20]
 703 04f0 020053E3 		cmp	r3, #2
 704 04f4 0600000A 		beq	.L34
 705 04f8 070000EA 		b	.L31
 706              	.L32:
 266:system.c      ****     {
 267:system.c      ****       case 0:
 268:system.c      ****         divider = 4;
 708              	.LM81:
 709 04fc 0430A0E3 		mov	r3, #4
 710 0500 10300BE5 		str	r3, [fp, #-16]
 269:system.c      ****         break;
 712              	.LM82:
 713 0504 040000EA 		b	.L31
 714              	.L33:
 270:system.c      ****       case 1:
 271:system.c      ****         divider = 1;
 716              	.LM83:
 717 0508 0130A0E3 		mov	r3, #1
 718 050c 10300BE5 		str	r3, [fp, #-16]
 272:system.c      ****         break;
 720              	.LM84:
 721 0510 010000EA 		b	.L31
 722              	.L34:
 273:system.c      ****       case 2:
 274:system.c      ****         divider = 2;
 724              	.LM85:
 725 0514 0230A0E3 		mov	r3, #2
 726 0518 10300BE5 		str	r3, [fp, #-16]
 727              	.L31:
 275:system.c      ****         break;
 276:system.c      ****     }
 277:system.c      ****   return processorClockFrequency() / divider;
 729              	.LM86:
 730 051c FEFFFFEB 		bl	processorClockFrequency
 731 0520 0030A0E1 		mov	r3, r0
 732 0524 0300A0E1 		mov	r0, r3
 733 0528 10101BE5 		ldr	r1, [fp, #-16]
 734 052c FEFFFFEB 		bl	__udivsi3
 735 0530 0030A0E1 		mov	r3, r0
 278:system.c      **** }
 737              	.LM87:
 738 0534 0300A0E1 		mov	r0, r3
 739 0538 0CD04BE2 		sub	sp, fp, #12
 740 053c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 741 0540 1EFF2FE1 		bx	lr
 746              	.Lscope10:
 747              		.align	2
 750              		.global	delay
 752              	delay:
 279:system.c      **** 
 280:system.c      **** void delay(int n)
 281:system.c      **** {
 754              	.LM88:
 755              		@ Function supports interworking.
 756              		@ args = 0, pretend = 0, frame = 8
 757              		@ frame_needed = 1, uses_anonymous_args = 0
 758 0544 0DC0A0E1 		mov	ip, sp
 759 0548 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 760 054c 04B04CE2 		sub	fp, ip, #4
 761 0550 08D04DE2 		sub	sp, sp, #8
 762 0554 14000BE5 		str	r0, [fp, #-20]
 282:system.c      ****   volatile int i;
 283:system.c      ****   for (i = 0; i < n; ++i);
 764              	.LM89:
 765 0558 0030A0E3 		mov	r3, #0
 766 055c 10300BE5 		str	r3, [fp, #-16]
 767 0560 020000EA 		b	.L37
 768              	.L38:
 769 0564 10301BE5 		ldr	r3, [fp, #-16]
 770 0568 013083E2 		add	r3, r3, #1
 771 056c 10300BE5 		str	r3, [fp, #-16]
 772              	.L37:
 773 0570 10201BE5 		ldr	r2, [fp, #-16]
 774 0574 14301BE5 		ldr	r3, [fp, #-20]
 775 0578 030052E1 		cmp	r2, r3
 776 057c F8FFFFBA 		blt	.L38
 284:system.c      **** }
 778              	.LM90:
 779 0580 0CD04BE2 		sub	sp, fp, #12
 780 0584 00689DE8 		ldmfd	sp, {fp, sp, lr}
 781 0588 1EFF2FE1 		bx	lr
 786              	.Lscope11:
 787              		.comm	GPS_timeout,4,4
 788              		.comm	SYSTEM_initialized,1,1
 789              		.comm	SSP_trans_cnt,4,4
 794              	.Letext0:
 795              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 system.c
     /tmp/ccbwk7gM.s:101    .text:00000000 $a
     /tmp/ccbwk7gM.s:105    .text:00000000 init
     /tmp/ccbwk7gM.s:585    .text:0000040c pll_init
     /tmp/ccbwk7gM.s:619    .text:0000044c pll_feed
     /tmp/ccbwk7gM.s:259    .text:00000134 init_ports
     /tmp/ccbwk7gM.s:480    .text:00000338 init_spi
     /tmp/ccbwk7gM.s:512    .text:00000370 init_spi1
     /tmp/ccbwk7gM.s:332    .text:000001dc init_timer0
     /tmp/ccbwk7gM.s:405    .text:00000284 PWM_Init
     /tmp/ccbwk7gM.s:181    .text:00000088 init_interrupts
     /tmp/ccbwk7gM.s:249    .text:00000124 $d
     /tmp/ccbwk7gM.s:255    .text:00000134 $a
     /tmp/ccbwk7gM.s:324    .text:000001d4 $d
     /tmp/ccbwk7gM.s:328    .text:000001dc $a
     /tmp/ccbwk7gM.s:678    .text:000004ac peripheralClockFrequency
     /tmp/ccbwk7gM.s:398    .text:00000280 $d
     /tmp/ccbwk7gM.s:401    .text:00000284 $a
     /tmp/ccbwk7gM.s:653    .text:0000048c processorClockFrequency
     /tmp/ccbwk7gM.s:752    .text:00000544 delay
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized
                            *COM*:00000004 SSP_trans_cnt

UNDEFINED SYMBOLS
UARTInitialize
UART1Initialize
ADCInit
init_VIC
install_irq
timer0ISR
uart1ISR
uart0ISR
SSPHandler
__udivsi3
