   1              		.file	"system.c"
   3              		.text
   4              	.Ltext0:
 106              		.align	2
 108              		.global	init
 110              	init:
   1:system.c      **** /*
   2:system.c      **** 
   3:system.c      **** Copyright (c) 2011, Ascending Technologies GmbH
   4:system.c      **** All rights reserved.
   5:system.c      **** 
   6:system.c      **** Redistribution and use in source and binary forms, with or without
   7:system.c      **** modification, are permitted provided that the following conditions are met:
   8:system.c      **** 
   9:system.c      ****  * Redistributions of source code must retain the above copyright notice,
  10:system.c      ****    this list of conditions and the following disclaimer.
  11:system.c      ****  * Redistributions in binary form must reproduce the above copyright
  12:system.c      ****    notice, this list of conditions and the following disclaimer in the
  13:system.c      ****    documentation and/or other materials provided with the distribution.
  14:system.c      **** 
  15:system.c      **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  16:system.c      **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  17:system.c      **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  18:system.c      **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  19:system.c      **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  20:system.c      **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  21:system.c      **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  22:system.c      **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:system.c      **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:system.c      **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  25:system.c      **** DAMAGE.
  26:system.c      **** 
  27:system.c      ****  */
  28:system.c      **** 
  29:system.c      **** #include "LPC214x.h"
  30:system.c      **** #include "system.h"
  31:system.c      **** #include "uart.h"
  32:system.c      **** #include "main.h"
  33:system.c      **** #include "hardware.h"
  34:system.c      **** #include "LPC2k_ee.h"
  35:system.c      **** #include "type.h"
  36:system.c      **** #include "irq.h"
  37:system.c      **** #include "i2c.h"
  38:system.c      **** #include "ssp.h"
  39:system.c      **** #include "adc.h"
  40:system.c      **** 
  41:system.c      **** void init(void)
  42:system.c      **** {
 112              	.LM0:
 113              		@ Function supports interworking.
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116 0000 0DC0A0E1 		mov	ip, sp
 117 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 118 0008 04B04CE2 		sub	fp, ip, #4
  43:system.c      ****   MAMCR = 0x02;  //Memory Acceleration enabled
 120              	.LM1:
 121 000c 0E32A0E3 		mov	r3, #-536870912
 122 0010 7F3983E2 		add	r3, r3, #2080768
 123 0014 0220A0E3 		mov	r2, #2
 124 0018 002083E5 		str	r2, [r3, #0]
  44:system.c      ****   MAMTIM = 0x04;
 126              	.LM2:
 127 001c 4E32A0E3 		mov	r3, #-536870908
 128 0020 7F3983E2 		add	r3, r3, #2080768
 129 0024 0420A0E3 		mov	r2, #4
 130 0028 002083E5 		str	r2, [r3, #0]
  45:system.c      ****   VPBDIV = 0x01;  //0x01: peripheral frequency == cpu frequency, 0x00: per. freq. = crystal freq.
 132              	.LM3:
 133 002c 0E32A0E3 		mov	r3, #-536870912
 134 0030 7F3983E2 		add	r3, r3, #2080768
 135 0034 013C83E2 		add	r3, r3, #256
 136 0038 0120A0E3 		mov	r2, #1
 137 003c 002083E5 		str	r2, [r3, #0]
  46:system.c      ****   pll_init();
 139              	.LM4:
 140 0040 FEFFFFEB 		bl	pll_init
  47:system.c      ****   pll_feed();
 142              	.LM5:
 143 0044 FEFFFFEB 		bl	pll_feed
  48:system.c      ****   init_ports();
 145              	.LM6:
 146 0048 FEFFFFEB 		bl	init_ports
  49:system.c      ****   UARTInitialize(57600);	//debug / command
 148              	.LM7:
 149 004c E10CA0E3 		mov	r0, #57600
 150 0050 FEFFFFEB 		bl	UARTInitialize
  50:system.c      ****   UART1Initialize(57600);	//57600 Servo / GPS, 38400 "indoor GPS"
 152              	.LM8:
 153 0054 E10CA0E3 		mov	r0, #57600
 154 0058 FEFFFFEB 		bl	UART1Initialize
  51:system.c      ****   init_spi();
 156              	.LM9:
 157 005c FEFFFFEB 		bl	init_spi
  52:system.c      ****   init_spi1();
 159              	.LM10:
 160 0060 FEFFFFEB 		bl	init_spi1
  53:system.c      ****   init_timer0();
 162              	.LM11:
 163 0064 FEFFFFEB 		bl	init_timer0
  54:system.c      **** //  I2CInit(I2CMASTER);
  55:system.c      ****   PWM_Init();
 165              	.LM12:
 166 0068 FEFFFFEB 		bl	PWM_Init
  56:system.c      ****   ADCInit(ADC_CLK);
 168              	.LM13:
 169 006c 3D09A0E3 		mov	r0, #999424
 170 0070 090D80E2 		add	r0, r0, #576
 171 0074 FEFFFFEB 		bl	ADCInit
  57:system.c      ****   init_interrupts();
 173              	.LM14:
 174 0078 FEFFFFEB 		bl	init_interrupts
  58:system.c      ****  }
 176              	.LM15:
 177 007c 0CD04BE2 		sub	sp, fp, #12
 178 0080 00689DE8 		ldmfd	sp, {fp, sp, lr}
 179 0084 1EFF2FE1 		bx	lr
 181              	.Lscope0:
 182              		.align	2
 184              		.global	init_interrupts
 186              	init_interrupts:
  59:system.c      **** 
  60:system.c      **** void init_interrupts(void)
  61:system.c      **** {
 188              	.LM16:
 189              		@ Function supports interworking.
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0088 0DC0A0E1 		mov	ip, sp
 193 008c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 194 0090 04B04CE2 		sub	fp, ip, #4
  62:system.c      ****   init_VIC();
 196              	.LM17:
 197 0094 FEFFFFEB 		bl	init_VIC
  63:system.c      **** 
  64:system.c      ****   //Timer0 interrupt
  65:system.c      ****   install_irq( TIMER0_INT, (void *) timer0ISR );
 199              	.LM18:
 200 0098 0400A0E3 		mov	r0, #4
 201 009c 80109FE5 		ldr	r1, .L5
 202 00a0 FEFFFFEB 		bl	install_irq
  66:system.c      **** 
  67:system.c      ****   //UART1 interrupt
  68:system.c      ****   install_irq( UART1_INT, (void *) uart1ISR );
 204              	.LM19:
 205 00a4 0700A0E3 		mov	r0, #7
 206 00a8 78109FE5 		ldr	r1, .L5+4
 207 00ac FEFFFFEB 		bl	install_irq
  69:system.c      ****   U1IER = 3; //=3; enable THRE and RX interrupt
 209              	.LM20:
 210 00b0 4E32A0E3 		mov	r3, #-536870908
 211 00b4 013883E2 		add	r3, r3, #65536
 212 00b8 0320A0E3 		mov	r2, #3
 213 00bc 002083E5 		str	r2, [r3, #0]
  70:system.c      **** 
  71:system.c      ****   //UART0 interrupt
  72:system.c      ****   install_irq( UART0_INT, (void *) uart0ISR );
 215              	.LM21:
 216 00c0 0600A0E3 		mov	r0, #6
 217 00c4 60109FE5 		ldr	r1, .L5+8
 218 00c8 FEFFFFEB 		bl	install_irq
  73:system.c      ****   U0IER = 3; //=3; enable THRE and RX interrupt
 220              	.LM22:
 221 00cc 0339A0E3 		mov	r3, #49152
 222 00d0 4E3283E2 		add	r3, r3, #-536870908
 223 00d4 0320A0E3 		mov	r2, #3
 224 00d8 002083E5 		str	r2, [r3, #0]
  74:system.c      **** 
  75:system.c      ****   //I2C0 interrupt
  76:system.c      **** //  install_irq( I2C0_INT, (void *) I2C0MasterHandler );
  77:system.c      **** //  I20CONSET = I2CONSET_I2EN;
  78:system.c      **** 
  79:system.c      ****   //SSP interrupt
  80:system.c      ****   install_irq( SPI1_INT, (void *) SSPHandler );
 226              	.LM23:
 227 00dc 0B00A0E3 		mov	r0, #11
 228 00e0 48109FE5 		ldr	r1, .L5+12
 229 00e4 FEFFFFEB 		bl	install_irq
  81:system.c      ****   /* Set SSPINMS registers to enable interrupts */
  82:system.c      ****   /* enable all interrupts, Rx overrun, Rx timeout, RX FIFO half full int,
  83:system.c      ****   TX FIFO half empty int */
  84:system.c      ****   SSPIMSC = SSPIMSC_TXIM | SSPIMSC_RXIM | SSPIMSC_RORIM;// | SSPIMSC_RTIM;
 231              	.LM24:
 232 00e8 0E32A0E3 		mov	r3, #-536870912
 233 00ec 1A3983E2 		add	r3, r3, #425984
 234 00f0 143083E2 		add	r3, r3, #20
 235 00f4 0D20A0E3 		mov	r2, #13
 236 00f8 002083E5 		str	r2, [r3, #0]
  85:system.c      ****   /* SSP Enabled */
  86:system.c      ****   SSPCR1 |= SSPCR1_SSE;
 238              	.LM25:
 239 00fc 4E22A0E3 		mov	r2, #-536870908
 240 0100 1A2982E2 		add	r2, r2, #425984
 241 0104 4E32A0E3 		mov	r3, #-536870908
 242 0108 1A3983E2 		add	r3, r3, #425984
 243 010c 003093E5 		ldr	r3, [r3, #0]
 244 0110 023083E3 		orr	r3, r3, #2
 245 0114 003082E5 		str	r3, [r2, #0]
  87:system.c      **** }
 247              	.LM26:
 248 0118 0CD04BE2 		sub	sp, fp, #12
 249 011c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 250 0120 1EFF2FE1 		bx	lr
 251              	.L6:
 252              		.align	2
 253              	.L5:
 254 0124 00000000 		.word	timer0ISR
 255 0128 00000000 		.word	uart1ISR
 256 012c 00000000 		.word	uart0ISR
 257 0130 00000000 		.word	SSPHandler
 259              	.Lscope1:
 260              		.align	2
 262              		.global	init_ports
 264              	init_ports:
  88:system.c      **** 
  89:system.c      **** 
  90:system.c      **** void init_ports(void)
  91:system.c      **** {
 266              	.LM27:
 267              		@ Function supports interworking.
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0134 0DC0A0E1 		mov	ip, sp
 271 0138 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 272 013c 04B04CE2 		sub	fp, ip, #4
  92:system.c      **** /* PINSEL0
  93:system.c      ****  *
  94:system.c      ****  * PORT0:
  95:system.c      ****  * P0.0: TXD0 -> 01
  96:system.c      ****  * P0.1: RXD0 -> 01
  97:system.c      ****  * P0.2: SCO0 -> 01
  98:system.c      ****  * P0.3: SDA0 -> 01
  99:system.c      ****  * Byte0_sel = 0b01010101 = 0x55
 100:system.c      ****  *
 101:system.c      ****  * P0.4: SCK0 -> 01
 102:system.c      ****  * P0.5: MISO0 -> 01
 103:system.c      ****  * P0.6: MOSI0 -> 01
 104:system.c      ****  * P0.7: LL_NCS/IO_out -> 00
 105:system.c      ****  * or: PWM2 -> 10
 106:system.c      ****  * Byte1_sel = 0x00010101 = 0x15
 107:system.c      ****  * Byte0_io_dir = 0x80
 108:system.c      ****  *
 109:system.c      ****  * P0.8: TXD1 -> 01
 110:system.c      ****  * P0.9: RXD1 -> 01
 111:system.c      ****  * P0.10: IO_in -> 00
 112:system.c      ****  * P0.11: SCL1 -> 11
 113:system.c      ****  * or Falcon8: IO_out -> 00
 114:system.c      ****  * Byte2_sel = 0b11000101 = 0xC5
 115:system.c      ****  *
 116:system.c      ****  * P0.12: IO_in -> 00
 117:system.c      ****  * P0.13: IO_in -> 00
 118:system.c      ****  * P0.14: SDA1 -> 11
 119:system.c      ****  * or IO_out (CS SD-Card) => SD_Logging
 120:system.c      ****  * P0.15: IO_in -> 00
 121:system.c      ****  * Byte3_sel = 0b00110000 = 0x30
 122:system.c      ****  * Byte1_io_dir = 0x00
 123:system.c      ****  * or SD_Logging => Byte1_io_dir=0x40
 124:system.c      ****  */
 125:system.c      **** 
 126:system.c      ****  	PINSEL0=0x30C51555;
 274              	.LM28:
 275 0140 0E32A0E3 		mov	r3, #-536870912
 276 0144 0B3983E2 		add	r3, r3, #180224
 277 0148 84209FE5 		ldr	r2, .L9
 278 014c 002083E5 		str	r2, [r3, #0]
 127:system.c      **** 
 128:system.c      ****  /* PINSEL1
 129:system.c      ****   *
 130:system.c      ****   * P0.16: IO_in -> 00
 131:system.c      ****   * P0.17: SCK1 -> 10
 132:system.c      ****   * P0.18: MISO1 -> 10
 133:system.c      ****   * P0.19: MOSI1-> 10
 134:system.c      ****   * Byte0: 0b10101000 = 0xA8
 135:system.c      ****   *
 136:system.c      ****   * P0.20: SSEL1 -> 10
 137:system.c      ****   * P0.21: PWM5 -> 01
 138:system.c      ****   * P0.22: IO_in -> 00
 139:system.c      ****   * P0.23: IO_in -> 00
 140:system.c      ****   * Byte1: 0b00000110 = 0x06
 141:system.c      ****   * Byte2_io_dir: 0x30 //0x11
 142:system.c      ****   *
 143:system.c      ****   * P0.24: 00
 144:system.c      ****   * P0.25: VOLTAGE_2: -> 01
 145:system.c      ****   * or IO_in (FALCON) -> 00
 146:system.c      ****   * P0.26: 00
 147:system.c      ****   * P0.27: 00
 148:system.c      ****   * Byte2: 0b00000100 = 0x04
 149:system.c      ****   *
 150:system.c      ****   * P0.28: CURRENT_2: -> 01
 151:system.c      ****   * P0.29: VOLTAGE_1: -> 01
 152:system.c      ****   * P0.30: CURRENT_1: -> 01
 153:system.c      ****   * P0.31: IO_in -> 00
 154:system.c      ****   * Byte3: 0b00010101 = 0x15
 155:system.c      ****   * Byte3_io_dir=0x00
 156:system.c      ****   */
 157:system.c      ****  PINSEL1 = 0x150406A8;
 280              	.LM29:
 281 0150 4E32A0E3 		mov	r3, #-536870908
 282 0154 0B3983E2 		add	r3, r3, #180224
 283 0158 78209FE5 		ldr	r2, .L9+4
 284 015c 002083E5 		str	r2, [r3, #0]
 158:system.c      **** 
 159:system.c      ****  PINSEL2 = 0x00000004;
 286              	.LM30:
 287 0160 0E32A0E3 		mov	r3, #-536870912
 288 0164 0B3983E2 		add	r3, r3, #180224
 289 0168 143083E2 		add	r3, r3, #20
 290 016c 0420A0E3 		mov	r2, #4
 291 0170 002083E5 		str	r2, [r3, #0]
 160:system.c      **** 
 161:system.c      ****  IODIR0 = 0x0030B480;
 293              	.LM31:
 294 0174 8E22A0E3 		mov	r2, #-536870904
 295 0178 0A2982E2 		add	r2, r2, #163840
 296 017c C239A0E3 		mov	r3, #3178496
 297 0180 D23D83E2 		add	r3, r3, #13440
 298 0184 003082E5 		str	r3, [r2, #0]
 162:system.c      **** 
 163:system.c      ****  IOSET0 = (1<<EXT_NCS)|(1<<11); //all nCS high
 300              	.LM32:
 301 0188 4E32A0E3 		mov	r3, #-536870908
 302 018c 0A3983E2 		add	r3, r3, #163840
 303 0190 222DA0E3 		mov	r2, #2176
 304 0194 002083E5 		str	r2, [r3, #0]
 164:system.c      ****  //IOSET0 = (1<<LL_nCS);	//CS LL_Controller
 165:system.c      **** 
 166:system.c      **** /* P1.16: IO_1/IO_out	=> FET for camera power supply
 167:system.c      ****  * P1.17: Beeper/IO_out
 168:system.c      ****  * .
 169:system.c      ****  * .
 170:system.c      ****  * P1.24: LED1/IO_out
 171:system.c      ****  * P1.25: LED2/IO_out
 172:system.c      ****  *
 173:system.c      ****  */
 174:system.c      **** 
 175:system.c      ****  IODIR1 = 0x03030000;
 306              	.LM33:
 307 0198 0E22A0E3 		mov	r2, #-536870912
 308 019c 0A2982E2 		add	r2, r2, #163840
 309 01a0 182082E2 		add	r2, r2, #24
 310 01a4 0334A0E3 		mov	r3, #50331648
 311 01a8 033883E2 		add	r3, r3, #196608
 312 01ac 003082E5 		str	r3, [r2, #0]
 176:system.c      ****  IOSET1 = ((1<<24)|(1<<16)); //turn off LED1, turn beeper off
 314              	.LM34:
 315 01b0 0E22A0E3 		mov	r2, #-536870912
 316 01b4 0A2982E2 		add	r2, r2, #163840
 317 01b8 142082E2 		add	r2, r2, #20
 318 01bc 0134A0E3 		mov	r3, #16777216
 319 01c0 013883E2 		add	r3, r3, #65536
 320 01c4 003082E5 		str	r3, [r2, #0]
 177:system.c      **** 
 178:system.c      **** }
 322              	.LM35:
 323 01c8 0CD04BE2 		sub	sp, fp, #12
 324 01cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 325 01d0 1EFF2FE1 		bx	lr
 326              	.L10:
 327              		.align	2
 328              	.L9:
 329 01d4 5515C530 		.word	818222421
 330 01d8 A8060415 		.word	352585384
 332              	.Lscope2:
 333              		.align	2
 335              		.global	init_timer0
 337              	init_timer0:
 179:system.c      **** 
 180:system.c      **** void init_timer0(void)
 181:system.c      **** {
 339              	.LM36:
 340              		@ Function supports interworking.
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343 01dc 0DC0A0E1 		mov	ip, sp
 344 01e0 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 345 01e4 04B04CE2 		sub	fp, ip, #4
 182:system.c      ****   T0TC=0;
 347              	.LM37:
 348 01e8 0139A0E3 		mov	r3, #16384
 349 01ec 8E3283E2 		add	r3, r3, #-536870904
 350 01f0 0020A0E3 		mov	r2, #0
 351 01f4 002083E5 		str	r2, [r3, #0]
 183:system.c      ****   T0TCR=0x0;    //Reset timer0
 353              	.LM38:
 354 01f8 0139A0E3 		mov	r3, #16384
 355 01fc 4E3283E2 		add	r3, r3, #-536870908
 356 0200 0020A0E3 		mov	r2, #0
 357 0204 002083E5 		str	r2, [r3, #0]
 184:system.c      ****   T0MCR=0x3;    //Interrupt on match MR0 and reset counter
 359              	.LM39:
 360 0208 0E32A0E3 		mov	r3, #-536870912
 361 020c 013983E2 		add	r3, r3, #16384
 362 0210 143083E2 		add	r3, r3, #20
 363 0214 0320A0E3 		mov	r2, #3
 364 0218 002083E5 		str	r2, [r3, #0]
 185:system.c      ****   T0PR=0;
 366              	.LM40:
 367 021c 0139A0E3 		mov	r3, #16384
 368 0220 CE3283E2 		add	r3, r3, #-536870900
 369 0224 0020A0E3 		mov	r2, #0
 370 0228 002083E5 		str	r2, [r3, #0]
 186:system.c      ****   T0PC=0;     //Prescale Counter = 0
 372              	.LM41:
 373 022c 0E32A0E3 		mov	r3, #-536870912
 374 0230 013983E2 		add	r3, r3, #16384
 375 0234 103083E2 		add	r3, r3, #16
 376 0238 0020A0E3 		mov	r2, #0
 377 023c 002083E5 		str	r2, [r3, #0]
 187:system.c      ****   T0MR0=peripheralClockFrequency()/ControllerCyclesPerSecond; // /200 => 200 Hz Period
 379              	.LM42:
 380 0240 0E42A0E3 		mov	r4, #-536870912
 381 0244 014984E2 		add	r4, r4, #16384
 382 0248 184084E2 		add	r4, r4, #24
 383 024c FEFFFFEB 		bl	peripheralClockFrequency
 384 0250 0020A0E1 		mov	r2, r0
 385 0254 24309FE5 		ldr	r3, .L13
 386 0258 921383E0 		umull	r1, r3, r2, r3
 387 025c 2333A0E1 		mov	r3, r3, lsr #6
 388 0260 003084E5 		str	r3, [r4, #0]
 188:system.c      ****   T0TCR=0x1;   //Set timer0
 390              	.LM43:
 391 0264 0139A0E3 		mov	r3, #16384
 392 0268 4E3283E2 		add	r3, r3, #-536870908
 393 026c 0120A0E3 		mov	r2, #1
 394 0270 002083E5 		str	r2, [r3, #0]
 189:system.c      **** }
 396              	.LM44:
 397 0274 10D04BE2 		sub	sp, fp, #16
 398 0278 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 399 027c 1EFF2FE1 		bx	lr
 400              	.L14:
 401              		.align	2
 402              	.L13:
 403 0280 D34D6210 		.word	274877907
 405              	.Lscope3:
 406              		.align	2
 408              		.global	PWM_Init
 410              	PWM_Init:
 190:system.c      **** 
 191:system.c      **** void PWM_Init( void )
 192:system.c      **** {
 412              	.LM45:
 413              		@ Function supports interworking.
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0284 0DC0A0E1 		mov	ip, sp
 417 0288 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 418 028c 04B04CE2 		sub	fp, ip, #4
 193:system.c      ****   //  match_counter = 0;
 194:system.c      ****   //  PINSEL0 = 0x000A800A;	/* set GPIOs for all PWMs */
 195:system.c      ****   //  PINSEL1 = 0x00000400;
 196:system.c      ****     PWMTCR = TCR_RESET;		/* Counter Reset */
 420              	.LM46:
 421 0290 4E32A0E3 		mov	r3, #-536870908
 422 0294 053983E2 		add	r3, r3, #81920
 423 0298 0220A0E3 		mov	r2, #2
 424 029c 002083E5 		str	r2, [r3, #0]
 197:system.c      **** 
 198:system.c      ****     PWMPR = 0x00;		/* count frequency:Fpclk */
 426              	.LM47:
 427 02a0 CE32A0E3 		mov	r3, #-536870900
 428 02a4 053983E2 		add	r3, r3, #81920
 429 02a8 0020A0E3 		mov	r2, #0
 430 02ac 002083E5 		str	r2, [r3, #0]
 199:system.c      ****     PWMMCR = PWMMR0R;	/* interrupt on PWMMR0, reset on PWMMR0, reset
 432              	.LM48:
 433 02b0 0E32A0E3 		mov	r3, #-536870912
 434 02b4 053983E2 		add	r3, r3, #81920
 435 02b8 143083E2 		add	r3, r3, #20
 436 02bc 0220A0E3 		mov	r2, #2
 437 02c0 002083E5 		str	r2, [r3, #0]
 200:system.c      **** 				TC if PWM0 matches */
 201:system.c      ****     PWMMR0 = 1179648 ;
 439              	.LM49:
 440 02c4 0E32A0E3 		mov	r3, #-536870912
 441 02c8 053983E2 		add	r3, r3, #81920
 442 02cc 183083E2 		add	r3, r3, #24
 443 02d0 1228A0E3 		mov	r2, #1179648
 444 02d4 002083E5 		str	r2, [r3, #0]
 202:system.c      ****     PWMMR5 = 88470;
 446              	.LM50:
 447 02d8 0E22A0E3 		mov	r2, #-536870912
 448 02dc 052982E2 		add	r2, r2, #81920
 449 02e0 442082E2 		add	r2, r2, #68
 450 02e4 563BA0E3 		mov	r3, #88064
 451 02e8 653F83E2 		add	r3, r3, #404
 452 02ec 023083E2 		add	r3, r3, #2
 453 02f0 003082E5 		str	r3, [r2, #0]
 203:system.c      **** 
 204:system.c      ****     /* all PWM latch enabled */
 205:system.c      ****     PWMLER = LER5_EN;
 455              	.LM51:
 456 02f4 0E32A0E3 		mov	r3, #-536870912
 457 02f8 053983E2 		add	r3, r3, #81920
 458 02fc 503083E2 		add	r3, r3, #80
 459 0300 2020A0E3 		mov	r2, #32
 460 0304 002083E5 		str	r2, [r3, #0]
 206:system.c      **** 
 207:system.c      ****         /* All single edge, all enable */
 208:system.c      ****     PWMPCR = PWMENA1 | PWMENA2 | PWMENA3 | PWMENA4 | PWMENA5 | PWMENA6;
 462              	.LM52:
 463 0308 0E32A0E3 		mov	r3, #-536870912
 464 030c 053983E2 		add	r3, r3, #81920
 465 0310 4C3083E2 		add	r3, r3, #76
 466 0314 7E2CA0E3 		mov	r2, #32256
 467 0318 002083E5 		str	r2, [r3, #0]
 209:system.c      ****     PWMTCR = TCR_CNT_EN | TCR_PWM_EN;	/* counter enable, PWM enable */
 469              	.LM53:
 470 031c 4E32A0E3 		mov	r3, #-536870908
 471 0320 053983E2 		add	r3, r3, #81920
 472 0324 0920A0E3 		mov	r2, #9
 473 0328 002083E5 		str	r2, [r3, #0]
 210:system.c      **** }
 475              	.LM54:
 476 032c 0CD04BE2 		sub	sp, fp, #12
 477 0330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 478 0334 1EFF2FE1 		bx	lr
 480              	.Lscope4:
 481              		.align	2
 483              		.global	init_spi
 485              	init_spi:
 211:system.c      **** 
 212:system.c      **** 
 213:system.c      **** void init_spi(void)
 214:system.c      **** {
 487              	.LM55:
 488              		@ Function supports interworking.
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491 0338 0DC0A0E1 		mov	ip, sp
 492 033c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 493 0340 04B04CE2 		sub	fp, ip, #4
 215:system.c      ****   S0SPCCR=0x04; //30 clock-cycles (~60MHz) = 1 SPI cycle => SPI @ 2MHz
 495              	.LM56:
 496 0344 CE32A0E3 		mov	r3, #-536870900
 497 0348 023883E2 		add	r3, r3, #131072
 498 034c 0420A0E3 		mov	r2, #4
 499 0350 002083E5 		str	r2, [r3, #0]
 216:system.c      ****   S0SPCR=0x20;  //LPC is Master
 501              	.LM57:
 502 0354 0E32A0E3 		mov	r3, #-536870912
 503 0358 023883E2 		add	r3, r3, #131072
 504 035c 2020A0E3 		mov	r2, #32
 505 0360 002083E5 		str	r2, [r3, #0]
 217:system.c      **** }
 507              	.LM58:
 508 0364 0CD04BE2 		sub	sp, fp, #12
 509 0368 00689DE8 		ldmfd	sp, {fp, sp, lr}
 510 036c 1EFF2FE1 		bx	lr
 512              	.Lscope5:
 513              		.align	2
 515              		.global	init_spi1
 517              	init_spi1:
 218:system.c      **** 
 219:system.c      **** void init_spi1(void)
 220:system.c      **** {
 519              	.LM59:
 520              		@ Function supports interworking.
 521              		@ args = 0, pretend = 0, frame = 4
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523 0370 0DC0A0E1 		mov	ip, sp
 524 0374 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 525 0378 04B04CE2 		sub	fp, ip, #4
 526 037c 04D04DE2 		sub	sp, sp, #4
 221:system.c      **** 	unsigned char i, Dummy;
 222:system.c      **** 
 223:system.c      ****     /* Set DSS data to 8-bit, Frame format SPI, CPOL = 0, CPHA = 0, and SCR is 3 */
 224:system.c      ****     SSPCR0 = 0x040F;
 528              	.LM60:
 529 0380 0E22A0E3 		mov	r2, #-536870912
 530 0384 1A2982E2 		add	r2, r2, #425984
 531 0388 013BA0E3 		mov	r3, #1024
 532 038c 0F3083E2 		add	r3, r3, #15
 533 0390 003082E5 		str	r3, [r2, #0]
 225:system.c      **** 
 226:system.c      ****     /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
 227:system.c      ****     SSPCPSR = 0x1B;
 535              	.LM61:
 536 0394 0E32A0E3 		mov	r3, #-536870912
 537 0398 1A3983E2 		add	r3, r3, #425984
 538 039c 103083E2 		add	r3, r3, #16
 539 03a0 1B20A0E3 		mov	r2, #27
 540 03a4 002083E5 		str	r2, [r3, #0]
 228:system.c      **** 
 229:system.c      ****     for ( i = 0; i < FIFOSIZE; i++ )
 542              	.LM62:
 543 03a8 0030A0E3 		mov	r3, #0
 544 03ac 0E304BE5 		strb	r3, [fp, #-14]
 545 03b0 060000EA 		b	.L20
 546              	.L21:
 230:system.c      ****     {
 231:system.c      **** 	Dummy = SSPDR;		/* clear the RxFIFO */
 548              	.LM63:
 549 03b4 8E32A0E3 		mov	r3, #-536870904
 550 03b8 1A3983E2 		add	r3, r3, #425984
 551 03bc 003093E5 		ldr	r3, [r3, #0]
 552 03c0 0D304BE5 		strb	r3, [fp, #-13]
 229:system.c      ****     for ( i = 0; i < FIFOSIZE; i++ )
 554              	.LM64:
 555 03c4 0E305BE5 		ldrb	r3, [fp, #-14]
 556 03c8 013083E2 		add	r3, r3, #1
 557 03cc 0E304BE5 		strb	r3, [fp, #-14]
 558              	.L20:
 559 03d0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 560 03d4 070053E3 		cmp	r3, #7
 561 03d8 F5FFFF9A 		bls	.L21
 232:system.c      ****     }
 233:system.c      **** 
 234:system.c      ****     /*all ints deactivated*/
 235:system.c      **** 	SSPIMSC = 0;
 563              	.LM65:
 564 03dc 0E32A0E3 		mov	r3, #-536870912
 565 03e0 1A3983E2 		add	r3, r3, #425984
 566 03e4 143083E2 		add	r3, r3, #20
 567 03e8 0020A0E3 		mov	r2, #0
 568 03ec 002083E5 		str	r2, [r3, #0]
 236:system.c      **** 
 237:system.c      ****     /* Device select as master, SSP Enabled */
 238:system.c      ****     SSPCR1 = 0x00;// | SSPCR1_SSE;
 570              	.LM66:
 571 03f0 4E32A0E3 		mov	r3, #-536870908
 572 03f4 1A3983E2 		add	r3, r3, #425984
 573 03f8 0020A0E3 		mov	r2, #0
 574 03fc 002083E5 		str	r2, [r3, #0]
 239:system.c      **** 
 240:system.c      ****     return;
 241:system.c      **** 
 242:system.c      **** 
 243:system.c      **** }
 576              	.LM67:
 577 0400 0CD04BE2 		sub	sp, fp, #12
 578 0404 00689DE8 		ldmfd	sp, {fp, sp, lr}
 579 0408 1EFF2FE1 		bx	lr
 585              	.Lscope6:
 586              		.align	2
 588              		.global	pll_init
 590              	pll_init:
 244:system.c      **** 
 245:system.c      **** void pll_init(void)
 246:system.c      **** {
 592              	.LM68:
 593              		@ Function supports interworking.
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 1, uses_anonymous_args = 0
 596 040c 0DC0A0E1 		mov	ip, sp
 597 0410 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 598 0414 04B04CE2 		sub	fp, ip, #4
 247:system.c      ****   PLLCFG=0x23;    //0b00100011; => M=4,0690; P=2;
 600              	.LM69:
 601 0418 0E32A0E3 		mov	r3, #-536870912
 602 041c 7F3983E2 		add	r3, r3, #2080768
 603 0420 843083E2 		add	r3, r3, #132
 604 0424 2320A0E3 		mov	r2, #35
 605 0428 002083E5 		str	r2, [r3, #0]
 248:system.c      ****   PLLCON=0x03;    //PLLE=1, PLLC=1 => PLL enabled as system clock
 607              	.LM70:
 608 042c 0E32A0E3 		mov	r3, #-536870912
 609 0430 7F3983E2 		add	r3, r3, #2080768
 610 0434 803083E2 		add	r3, r3, #128
 611 0438 0320A0E3 		mov	r2, #3
 612 043c 002083E5 		str	r2, [r3, #0]
 249:system.c      **** }
 614              	.LM71:
 615 0440 0CD04BE2 		sub	sp, fp, #12
 616 0444 00689DE8 		ldmfd	sp, {fp, sp, lr}
 617 0448 1EFF2FE1 		bx	lr
 619              	.Lscope7:
 620              		.align	2
 622              		.global	pll_feed
 624              	pll_feed:
 250:system.c      **** 
 251:system.c      **** void pll_feed(void)
 252:system.c      **** {
 626              	.LM72:
 627              		@ Function supports interworking.
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630 044c 0DC0A0E1 		mov	ip, sp
 631 0450 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 632 0454 04B04CE2 		sub	fp, ip, #4
 253:system.c      ****   PLLFEED=0xAA;
 634              	.LM73:
 635 0458 0E32A0E3 		mov	r3, #-536870912
 636 045c 7F3983E2 		add	r3, r3, #2080768
 637 0460 8C3083E2 		add	r3, r3, #140
 638 0464 AA20A0E3 		mov	r2, #170
 639 0468 002083E5 		str	r2, [r3, #0]
 254:system.c      ****   PLLFEED=0x55;
 641              	.LM74:
 642 046c 0E32A0E3 		mov	r3, #-536870912
 643 0470 7F3983E2 		add	r3, r3, #2080768
 644 0474 8C3083E2 		add	r3, r3, #140
 645 0478 5520A0E3 		mov	r2, #85
 646 047c 002083E5 		str	r2, [r3, #0]
 255:system.c      **** }
 648              	.LM75:
 649 0480 0CD04BE2 		sub	sp, fp, #12
 650 0484 00689DE8 		ldmfd	sp, {fp, sp, lr}
 651 0488 1EFF2FE1 		bx	lr
 653              	.Lscope8:
 654              		.align	2
 656              		.global	processorClockFrequency
 658              	processorClockFrequency:
 256:system.c      **** 
 257:system.c      **** unsigned int processorClockFrequency(void)
 258:system.c      **** {
 660              	.LM76:
 661              		@ Function supports interworking.
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 048c 0DC0A0E1 		mov	ip, sp
 665 0490 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 666 0494 04B04CE2 		sub	fp, ip, #4
 259:system.c      ****   return 58982400;
 668              	.LM77:
 669 0498 E137A0E3 		mov	r3, #58982400
 260:system.c      **** }
 671              	.LM78:
 672 049c 0300A0E1 		mov	r0, r3
 673 04a0 0CD04BE2 		sub	sp, fp, #12
 674 04a4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 675 04a8 1EFF2FE1 		bx	lr
 677              	.Lscope9:
 678              		.global	__udivsi3
 679              		.align	2
 681              		.global	peripheralClockFrequency
 683              	peripheralClockFrequency:
 261:system.c      **** 
 262:system.c      **** unsigned int peripheralClockFrequency(void)
 263:system.c      **** {
 685              	.LM79:
 686              		@ Function supports interworking.
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689 04ac 0DC0A0E1 		mov	ip, sp
 690 04b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 691 04b4 04B04CE2 		sub	fp, ip, #4
 692 04b8 08D04DE2 		sub	sp, sp, #8
 264:system.c      ****   unsigned int divider;
 265:system.c      ****   switch (VPBDIV & 3)
 694              	.LM80:
 695 04bc 0E32A0E3 		mov	r3, #-536870912
 696 04c0 7F3983E2 		add	r3, r3, #2080768
 697 04c4 013C83E2 		add	r3, r3, #256
 698 04c8 003093E5 		ldr	r3, [r3, #0]
 699 04cc 033003E2 		and	r3, r3, #3
 700 04d0 14300BE5 		str	r3, [fp, #-20]
 701 04d4 14301BE5 		ldr	r3, [fp, #-20]
 702 04d8 010053E3 		cmp	r3, #1
 703 04dc 0900000A 		beq	.L33
 704 04e0 14301BE5 		ldr	r3, [fp, #-20]
 705 04e4 010053E3 		cmp	r3, #1
 706 04e8 0300003A 		bcc	.L32
 707 04ec 14301BE5 		ldr	r3, [fp, #-20]
 708 04f0 020053E3 		cmp	r3, #2
 709 04f4 0600000A 		beq	.L34
 710 04f8 070000EA 		b	.L31
 711              	.L32:
 266:system.c      ****     {
 267:system.c      ****       case 0:
 268:system.c      ****         divider = 4;
 713              	.LM81:
 714 04fc 0430A0E3 		mov	r3, #4
 715 0500 10300BE5 		str	r3, [fp, #-16]
 269:system.c      ****         break;
 717              	.LM82:
 718 0504 040000EA 		b	.L31
 719              	.L33:
 270:system.c      ****       case 1:
 271:system.c      ****         divider = 1;
 721              	.LM83:
 722 0508 0130A0E3 		mov	r3, #1
 723 050c 10300BE5 		str	r3, [fp, #-16]
 272:system.c      ****         break;
 725              	.LM84:
 726 0510 010000EA 		b	.L31
 727              	.L34:
 273:system.c      ****       case 2:
 274:system.c      ****         divider = 2;
 729              	.LM85:
 730 0514 0230A0E3 		mov	r3, #2
 731 0518 10300BE5 		str	r3, [fp, #-16]
 732              	.L31:
 275:system.c      ****         break;
 276:system.c      ****     }
 277:system.c      ****   return processorClockFrequency() / divider;
 734              	.LM86:
 735 051c FEFFFFEB 		bl	processorClockFrequency
 736 0520 0030A0E1 		mov	r3, r0
 737 0524 0300A0E1 		mov	r0, r3
 738 0528 10101BE5 		ldr	r1, [fp, #-16]
 739 052c FEFFFFEB 		bl	__udivsi3
 740 0530 0030A0E1 		mov	r3, r0
 278:system.c      **** }
 742              	.LM87:
 743 0534 0300A0E1 		mov	r0, r3
 744 0538 0CD04BE2 		sub	sp, fp, #12
 745 053c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 746 0540 1EFF2FE1 		bx	lr
 751              	.Lscope10:
 752              		.align	2
 755              		.global	delay
 757              	delay:
 279:system.c      **** 
 280:system.c      **** void delay(int n)
 281:system.c      **** {
 759              	.LM88:
 760              		@ Function supports interworking.
 761              		@ args = 0, pretend = 0, frame = 8
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763 0544 0DC0A0E1 		mov	ip, sp
 764 0548 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 765 054c 04B04CE2 		sub	fp, ip, #4
 766 0550 08D04DE2 		sub	sp, sp, #8
 767 0554 14000BE5 		str	r0, [fp, #-20]
 282:system.c      ****   volatile int i;
 283:system.c      ****   for (i = 0; i < n; ++i);
 769              	.LM89:
 770 0558 0030A0E3 		mov	r3, #0
 771 055c 10300BE5 		str	r3, [fp, #-16]
 772 0560 020000EA 		b	.L37
 773              	.L38:
 774 0564 10301BE5 		ldr	r3, [fp, #-16]
 775 0568 013083E2 		add	r3, r3, #1
 776 056c 10300BE5 		str	r3, [fp, #-16]
 777              	.L37:
 778 0570 10201BE5 		ldr	r2, [fp, #-16]
 779 0574 14301BE5 		ldr	r3, [fp, #-20]
 780 0578 030052E1 		cmp	r2, r3
 781 057c F8FFFFBA 		blt	.L38
 284:system.c      **** }
 783              	.LM90:
 784 0580 0CD04BE2 		sub	sp, fp, #12
 785 0584 00689DE8 		ldmfd	sp, {fp, sp, lr}
 786 0588 1EFF2FE1 		bx	lr
 791              	.Lscope11:
 792              		.comm	GPS_timeout,4,4
 793              		.comm	SYSTEM_initialized,1,1
 794              		.comm	SSP_trans_cnt,4,4
 799              	.Letext0:
 800              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 system.c
     /tmp/cct9IapV.s:106    .text:00000000 $a
     /tmp/cct9IapV.s:110    .text:00000000 init
     /tmp/cct9IapV.s:590    .text:0000040c pll_init
     /tmp/cct9IapV.s:624    .text:0000044c pll_feed
     /tmp/cct9IapV.s:264    .text:00000134 init_ports
     /tmp/cct9IapV.s:485    .text:00000338 init_spi
     /tmp/cct9IapV.s:517    .text:00000370 init_spi1
     /tmp/cct9IapV.s:337    .text:000001dc init_timer0
     /tmp/cct9IapV.s:410    .text:00000284 PWM_Init
     /tmp/cct9IapV.s:186    .text:00000088 init_interrupts
     /tmp/cct9IapV.s:254    .text:00000124 $d
     /tmp/cct9IapV.s:260    .text:00000134 $a
     /tmp/cct9IapV.s:329    .text:000001d4 $d
     /tmp/cct9IapV.s:333    .text:000001dc $a
     /tmp/cct9IapV.s:683    .text:000004ac peripheralClockFrequency
     /tmp/cct9IapV.s:403    .text:00000280 $d
     /tmp/cct9IapV.s:406    .text:00000284 $a
     /tmp/cct9IapV.s:658    .text:0000048c processorClockFrequency
     /tmp/cct9IapV.s:757    .text:00000544 delay
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized
                            *COM*:00000004 SSP_trans_cnt

UNDEFINED SYMBOLS
UARTInitialize
UART1Initialize
ADCInit
init_VIC
install_irq
timer0ISR
uart1ISR
uart0ISR
SSPHandler
__udivsi3
