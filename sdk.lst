   1              		.file	"sdk.c"
   3              		.text
   4              	.Ltext0:
 126              		.global	allDataBuffer
 127              		.bss
 130              	allDataBuffer:
 131 0000 00000000 		.space	256
 131      00000000 
 131      00000000 
 131      00000000 
 131      00000000 
 132              		.global	receivedViconData
 133              		.align	2
 136              	receivedViconData:
 137 0100 00000000 		.space	40
 137      00000000 
 137      00000000 
 137      00000000 
 137      00000000 
 138              		.global	sendDebugData
 139              		.align	2
 142              	sendDebugData:
 143 0128 00000000 		.space	64
 143      00000000 
 143      00000000 
 143      00000000 
 143      00000000 
 144              		.global	receiveDebugData
 145              		.align	2
 148              	receiveDebugData:
 149 0168 00000000 		.space	64
 149      00000000 
 149      00000000 
 149      00000000 
 149      00000000 
 150              		.global	sendParamDebug
 151              		.align	2
 154              	sendParamDebug:
 155 01a8 00000000 		.space	36
 155      00000000 
 155      00000000 
 155      00000000 
 155      00000000 
 156              		.global	receiveParamDebug
 157              		.align	2
 160              	receiveParamDebug:
 161 01cc 00000000 		.space	36
 161      00000000 
 161      00000000 
 161      00000000 
 161      00000000 
 162              		.global	sendPositionWayPointData
 163              		.align	2
 166              	sendPositionWayPointData:
 167 01f0 00000000 		.space	12
 167      00000000 
 167      00000000 
 168              		.global	receivePositionWayPointData
 169              		.align	2
 172              	receivePositionWayPointData:
 173 01fc 00000000 		.space	12
 173      00000000 
 173      00000000 
 174              		.global	sendLandSignal
 175              		.align	2
 178              	sendLandSignal:
 179 0208 00000000 		.space	4
 180              		.global	receiveLandSignal
 181              		.align	2
 184              	receiveLandSignal:
 185 020c 00000000 		.space	4
 186              		.global	receiveCmdData
 187              		.data
 188              		.align	2
 191              	receiveCmdData:
 192 0000 05000000 		.word	5
 193              		.global	sendNormalData
 194              		.bss
 195              		.align	2
 198              	sendNormalData:
 199 0210 00000000 		.space	64
 199      00000000 
 199      00000000 
 199      00000000 
 199      00000000 
 200              		.global	receiveNormalData
 201              		.align	2
 204              	receiveNormalData:
 205 0250 00000000 		.space	64
 205      00000000 
 205      00000000 
 205      00000000 
 205      00000000 
 206              		.global	pack_id
 207              		.align	2
 210              	pack_id:
 211 0290 00000000 		.space	4
 212              		.global	vicon_count
 213              		.align	2
 216              	vicon_count:
 217 0294 00000000 		.space	4
 218              		.global	vicon_tp
 219              		.align	2
 222              	vicon_tp:
 223 0298 00000000 		.space	4
 224              		.global	receive_valid_data_flag
 225              		.align	2
 228              	receive_valid_data_flag:
 229 029c 00000000 		.space	4
 230              		.global	use_way_point_flag
 231              		.align	2
 234              	use_way_point_flag:
 235 02a0 00000000 		.space	4
 236              		.global	output_thrust
 237              		.data
 238              		.align	2
 241              	output_thrust:
 242 0004 3A070000 		.word	1850
 243              		.global	my_state
 244              		.bss
 245              		.align	2
 248              	my_state:
 249 02a4 00000000 		.space	44
 249      00000000 
 249      00000000 
 249      00000000 
 249      00000000 
 250              		.global	my_setpoint
 251              		.data
 252              		.align	2
 255              	my_setpoint:
 256 0008 00000000 		.word	0
 257 000c 00000000 		.word	0
 258 0010 00004844 		.word	1145569280
 259 0014 00000000 		.word	0
 260 0018 00000000 		.word	0
 261 001c 00000000 		.word	0
 262 0020 00000000 		.space	4
 263 0024 00000000 		.word	0
 264 0028 00000000 		.word	0
 265 002c 00000000 		.word	0
 266 0030 00000000 		.space	4
 267              		.bss
 268              		.align	2
 269              	stop_flag.2116:
 270 02d0 00000000 		.space	4
 272              		.align	2
 273              	freq.2115:
 274 02d4 00000000 		.space	4
 276              		.data
 277              		.align	2
 280              	temp.2114:
 281 0034 01000000 		.word	1
 283              		.global	__floatsisf
 284              		.global	__divsf3
 285              		.global	__mulsf3
 286              		.global	__fixsfsi
 287              		.global	__gtsf2
 288              		.text
 289              		.align	2
 291              		.global	fake_gps3
 293              	fake_gps3:
   1:sdk.c         **** /*
   2:sdk.c         **** 
   3:sdk.c         **** AscTec AutoPilot HL SDK v2.0
   4:sdk.c         **** 
   5:sdk.c         **** Copyright (c) 2011, Ascending Technologies GmbH
   6:sdk.c         **** All rights reserved.
   7:sdk.c         **** 
   8:sdk.c         **** Redistribution and use in source and binary forms, with or without
   9:sdk.c         **** modification, are permitted provided that the following conditions are met:
  10:sdk.c         **** 
  11:sdk.c         ****  * Redistributions of source code must retain the above copyright notice,
  12:sdk.c         ****    this list of conditions and the following disclaimer.
  13:sdk.c         ****  * Redistributions in binary form must reproduce the above copyright
  14:sdk.c         ****    notice, this list of conditions and the following disclaimer in the
  15:sdk.c         ****    documentation and/or other materials provided with the distribution.
  16:sdk.c         **** 
  17:sdk.c         **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  18:sdk.c         **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  19:sdk.c         **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  20:sdk.c         **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  21:sdk.c         **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  22:sdk.c         **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  23:sdk.c         **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  24:sdk.c         **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  25:sdk.c         **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  26:sdk.c         **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  27:sdk.c         **** DAMAGE.
  28:sdk.c         **** 
  29:sdk.c         ****  */
  30:sdk.c         **** 
  31:sdk.c         **** #include "main.h"
  32:sdk.c         **** #include "sdk.h"
  33:sdk.c         **** #include "pid.h"
  34:sdk.c         **** #include "LL_HL_comm.h"
  35:sdk.c         **** #include "gpsmath.h"
  36:sdk.c         **** #include "MyProtocol.h"
  37:sdk.c         **** #include  "common_header.h"
  38:sdk.c         **** #include "position_controller.h"
  39:sdk.c         **** 
  40:sdk.c         **** 
  41:sdk.c         **** #define SET_PARAM_MODE
  42:sdk.c         **** #define NORMAL_MODE
  43:sdk.c         **** 
  44:sdk.c         **** struct WO_SDK_STRUCT WO_SDK;
  45:sdk.c         **** struct WO_CTRL_INPUT WO_CTRL_Input;
  46:sdk.c         **** struct RO_RC_DATA RO_RC_Data;
  47:sdk.c         **** struct RO_ALL_DATA RO_ALL_Data;
  48:sdk.c         **** struct WO_DIRECT_MOTOR_CONTROL WO_Direct_Motor_Control;
  49:sdk.c         **** struct WO_DIRECT_INDIVIDUAL_MOTOR_CONTROL WO_Direct_Individual_Motor_Control;
  50:sdk.c         **** 
  51:sdk.c         **** extern struct IMU_CALCDATA IMU_CalcData;
  52:sdk.c         **** void SDK_EXAMPLE_direct_individual_motor_commands(void);
  53:sdk.c         **** void SDK_EXAMPLE_direct_motor_commands_with_standard_output_mapping(void);
  54:sdk.c         **** void SDK_EXAMPLE_attitude_commands(void);
  55:sdk.c         **** void SDK_EXAMPLE_gps_waypoint_control(void);
  56:sdk.c         **** int SDK_EXAMPLE_turn_motors_on(void);
  57:sdk.c         **** int SDK_EXAMPLE_turn_motors_off(void);
  58:sdk.c         **** 
  59:sdk.c         **** void fake_gps3(void );
  60:sdk.c         **** 
  61:sdk.c         **** unsigned char allDataBuffer[256]={0};
  62:sdk.c         **** MyViconData receivedViconData={0};
  63:sdk.c         **** DebugData sendDebugData={0};
  64:sdk.c         **** DebugData receiveDebugData={0};
  65:sdk.c         **** ParamDebug sendParamDebug={0};
  66:sdk.c         **** ParamDebug receiveParamDebug={0};
  67:sdk.c         **** PositionWayPointData sendPositionWayPointData={0};
  68:sdk.c         **** PositionWayPointData receivePositionWayPointData={0};
  69:sdk.c         **** LandSignal sendLandSignal={LAND_MODE_NONE};
  70:sdk.c         **** LandSignal receiveLandSignal={LAND_MODE_NONE};
  71:sdk.c         **** extern struct this_s my_this;
  72:sdk.c         **** CmdData receiveCmdData={PACKAGE_DEFINE_DEBUG};
  73:sdk.c         **** NormalData sendNormalData={0};
  74:sdk.c         **** NormalData receiveNormalData={0};
  75:sdk.c         **** int pack_id=0;
  76:sdk.c         **** 
  77:sdk.c         **** 
  78:sdk.c         **** //ParamDebug paramDebug={0};
  79:sdk.c         **** int vicon_count=0;
  80:sdk.c         **** int vicon_tp=0;
  81:sdk.c         **** float calc_thrust;
  82:sdk.c         **** float calc_pitch;
  83:sdk.c         **** float calc_roll;
  84:sdk.c         **** int receive_valid_data_flag=0;
  85:sdk.c         **** int use_way_point_flag=0;
  86:sdk.c         **** volatile int output_thrust=1850;
  87:sdk.c         **** 
  88:sdk.c         **** state_t my_state={
  89:sdk.c         **** 		.position={
  90:sdk.c         **** 				.x=0,
  91:sdk.c         **** 				.y=0,
  92:sdk.c         **** 				.z=0,
  93:sdk.c         **** 		},
  94:sdk.c         **** 		.velocity={
  95:sdk.c         **** 				.x=0,
  96:sdk.c         **** 				.y=0,
  97:sdk.c         **** 				.z=0
  98:sdk.c         **** 		},
  99:sdk.c         **** 		.attitude={
 100:sdk.c         **** 				.pitch=0,
 101:sdk.c         **** 				.roll=0,
 102:sdk.c         **** 				.yaw=0,
 103:sdk.c         **** 		}
 104:sdk.c         **** };
 105:sdk.c         **** state_t my_setpoint={
 106:sdk.c         **** 		.position={
 107:sdk.c         **** 				.x=0,
 108:sdk.c         **** 				.y=0,
 109:sdk.c         **** 				.z=800,
 110:sdk.c         **** 		},
 111:sdk.c         **** 		.velocity={
 112:sdk.c         **** 				.x=0,
 113:sdk.c         **** 				.y=0,
 114:sdk.c         **** 				.z=0,
 115:sdk.c         **** 		},
 116:sdk.c         **** 		.attitude={
 117:sdk.c         **** 				.pitch=0,
 118:sdk.c         **** 				.roll=0,
 119:sdk.c         **** 				.yaw=0,
 120:sdk.c         **** 		}
 121:sdk.c         **** };
 122:sdk.c         **** void fake_gps3(void ){
 295              	.LM0:
 296              		@ Function supports interworking.
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299 0000 0DC0A0E1 		mov	ip, sp
 300 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 301 0008 04B04CE2 		sub	fp, ip, #4
 123:sdk.c         **** 	static int temp=1;
 124:sdk.c         **** 	static int freq=0;
 125:sdk.c         **** 	static int stop_flag=0;
 126:sdk.c         **** 
 127:sdk.c         **** 	WO_SDK.ctrl_mode=0x02;
 303              	.LM1:
 304 000c 04239FE5 		ldr	r2, .L18
 305 0010 0230A0E3 		mov	r3, #2
 306 0014 0030C2E5 		strb	r3, [r2, #0]
 128:sdk.c         **** 	WO_SDK.ctrl_enabled=1;
 308              	.LM2:
 309 0018 F8229FE5 		ldr	r2, .L18
 310 001c 0130A0E3 		mov	r3, #1
 311 0020 0130C2E5 		strb	r3, [r2, #1]
 129:sdk.c         **** 	WO_SDK.disable_motor_onoff_by_stick=0;
 313              	.LM3:
 314 0024 EC229FE5 		ldr	r2, .L18
 315 0028 0030A0E3 		mov	r3, #0
 316 002c 0230C2E5 		strb	r3, [r2, #2]
 130:sdk.c         **** 	//WO_CTRL_Input.ctrl=0x0F;
 131:sdk.c         **** 	WO_CTRL_Input.ctrl=0x0F;
 318              	.LM4:
 319 0030 E4229FE5 		ldr	r2, .L18+4
 320 0034 0F30A0E3 		mov	r3, #15
 321 0038 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 132:sdk.c         **** 
 133:sdk.c         **** 	if(temp==1){
 323              	.LM5:
 324 003c DC329FE5 		ldr	r3, .L18+8
 325 0040 003093E5 		ldr	r3, [r3, #0]
 326 0044 010053E3 		cmp	r3, #1
 327 0048 1300001A 		bne	.L2
 134:sdk.c         **** 		temp=0;
 329              	.LM6:
 330 004c CC229FE5 		ldr	r2, .L18+8
 331 0050 0030A0E3 		mov	r3, #0
 332 0054 003082E5 		str	r3, [r2, #0]
 135:sdk.c         **** 		positionControllerInit();
 334              	.LM7:
 335 0058 FEFFFFEB 		bl	positionControllerInit
 136:sdk.c         **** 		my_this.pidVZ.setpoint=(float)RO_ALL_Data.angle_yaw/1000.0f*DEG_TO_RAD;
 337              	.LM8:
 338 005c C0329FE5 		ldr	r3, .L18+12
 339 0060 183093E5 		ldr	r3, [r3, #24]
 340 0064 0300A0E1 		mov	r0, r3
 341 0068 FEFFFFEB 		bl	__floatsisf
 342 006c 0030A0E1 		mov	r3, r0
 343 0070 0300A0E1 		mov	r0, r3
 344 0074 AC129FE5 		ldr	r1, .L18+16	@ float
 345 0078 FEFFFFEB 		bl	__divsf3
 346 007c 0030A0E1 		mov	r3, r0
 347 0080 0300A0E1 		mov	r0, r3
 348 0084 A0129FE5 		ldr	r1, .L18+20	@ float
 349 0088 FEFFFFEB 		bl	__mulsf3
 350 008c 0030A0E1 		mov	r3, r0
 351 0090 0320A0E1 		mov	r2, r3
 352 0094 94329FE5 		ldr	r3, .L18+24
 353 0098 442083E5 		str	r2, [r3, #68]	@ float
 354              	.L2:
 137:sdk.c         **** 	}
 138:sdk.c         **** 	if(freq++>=10){
 356              	.LM9:
 357 009c 90329FE5 		ldr	r3, .L18+28
 358 00a0 002093E5 		ldr	r2, [r3, #0]
 359 00a4 090052E3 		cmp	r2, #9
 360 00a8 0030A0D3 		movle	r3, #0
 361 00ac 0130A0C3 		movgt	r3, #1
 362 00b0 FF1003E2 		and	r1, r3, #255
 363 00b4 012082E2 		add	r2, r2, #1
 364 00b8 74329FE5 		ldr	r3, .L18+28
 365 00bc 002083E5 		str	r2, [r3, #0]
 366 00c0 000051E3 		cmp	r1, #0
 367 00c4 2700000A 		beq	.L4
 139:sdk.c         **** 		freq=1;
 369              	.LM10:
 370 00c8 64229FE5 		ldr	r2, .L18+28
 371 00cc 0130A0E3 		mov	r3, #1
 372 00d0 003082E5 		str	r3, [r2, #0]
 140:sdk.c         **** 		my_state.attitude.pitch=(float)RO_ALL_Data.angle_pitch/1000.0f*DEG_TO_RAD;
 374              	.LM11:
 375 00d4 48329FE5 		ldr	r3, .L18+12
 376 00d8 103093E5 		ldr	r3, [r3, #16]
 377 00dc 0300A0E1 		mov	r0, r3
 378 00e0 FEFFFFEB 		bl	__floatsisf
 379 00e4 0030A0E1 		mov	r3, r0
 380 00e8 0300A0E1 		mov	r0, r3
 381 00ec 34129FE5 		ldr	r1, .L18+16	@ float
 382 00f0 FEFFFFEB 		bl	__divsf3
 383 00f4 0030A0E1 		mov	r3, r0
 384 00f8 0300A0E1 		mov	r0, r3
 385 00fc 28129FE5 		ldr	r1, .L18+20	@ float
 386 0100 FEFFFFEB 		bl	__mulsf3
 387 0104 0030A0E1 		mov	r3, r0
 388 0108 0320A0E1 		mov	r2, r3
 389 010c 24329FE5 		ldr	r3, .L18+32
 390 0110 202083E5 		str	r2, [r3, #32]	@ float
 141:sdk.c         **** 		my_state.attitude.roll=(float)RO_ALL_Data.angle_roll/1000.0f*DEG_TO_RAD;
 392              	.LM12:
 393 0114 08329FE5 		ldr	r3, .L18+12
 394 0118 143093E5 		ldr	r3, [r3, #20]
 395 011c 0300A0E1 		mov	r0, r3
 396 0120 FEFFFFEB 		bl	__floatsisf
 397 0124 0030A0E1 		mov	r3, r0
 398 0128 0300A0E1 		mov	r0, r3
 399 012c F4119FE5 		ldr	r1, .L18+16	@ float
 400 0130 FEFFFFEB 		bl	__divsf3
 401 0134 0030A0E1 		mov	r3, r0
 402 0138 0300A0E1 		mov	r0, r3
 403 013c E8119FE5 		ldr	r1, .L18+20	@ float
 404 0140 FEFFFFEB 		bl	__mulsf3
 405 0144 0030A0E1 		mov	r3, r0
 406 0148 0320A0E1 		mov	r2, r3
 407 014c E4319FE5 		ldr	r3, .L18+32
 408 0150 1C2083E5 		str	r2, [r3, #28]	@ float
 142:sdk.c         **** 		//my_state.attitude.yaw=(float)RO_ALL_Data.angle_yaw/1000.0f*DEG_TO_RAD;
 143:sdk.c         **** 		positionController(&calc_thrust,&calc_pitch,&calc_roll,&my_state);
 410              	.LM13:
 411 0154 E0019FE5 		ldr	r0, .L18+36
 412 0158 E0119FE5 		ldr	r1, .L18+40
 413 015c E0219FE5 		ldr	r2, .L18+44
 414 0160 D0319FE5 		ldr	r3, .L18+32
 415 0164 FEFFFFEB 		bl	positionController
 416              	.L4:
 144:sdk.c         **** 	}
 145:sdk.c         **** 	if(receiveLandSignal.mode==LAND_MODE_NONE){
 418              	.LM14:
 419 0168 D8319FE5 		ldr	r3, .L18+48
 420 016c 003093E5 		ldr	r3, [r3, #0]
 421 0170 000053E3 		cmp	r3, #0
 422 0174 2200001A 		bne	.L6
 146:sdk.c         **** 		WO_CTRL_Input.ctrl=0x0F;
 424              	.LM15:
 425 0178 9C219FE5 		ldr	r2, .L18+4
 426 017c 0F30A0E3 		mov	r3, #15
 427 0180 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 147:sdk.c         **** 		output_thrust=calc_thrust;
 429              	.LM16:
 430 0184 B0319FE5 		ldr	r3, .L18+36
 431 0188 003093E5 		ldr	r3, [r3, #0]	@ float
 432 018c 0300A0E1 		mov	r0, r3
 433 0190 FEFFFFEB 		bl	__fixsfsi
 434 0194 0020A0E1 		mov	r2, r0
 435 0198 AC319FE5 		ldr	r3, .L18+52
 436 019c 002083E5 		str	r2, [r3, #0]
 148:sdk.c         **** 		WO_CTRL_Input.thrust=output_thrust;
 438              	.LM17:
 439 01a0 A4319FE5 		ldr	r3, .L18+52
 440 01a4 003093E5 		ldr	r3, [r3, #0]
 441 01a8 0338A0E1 		mov	r3, r3, asl #16
 442 01ac 2328A0E1 		mov	r2, r3, lsr #16
 443 01b0 64319FE5 		ldr	r3, .L18+4
 444 01b4 B620C3E1 		strh	r2, [r3, #6]	@ movhi
 149:sdk.c         **** 		WO_CTRL_Input.pitch=calc_pitch;
 446              	.LM18:
 447 01b8 80319FE5 		ldr	r3, .L18+40
 448 01bc 003093E5 		ldr	r3, [r3, #0]	@ float
 449 01c0 0300A0E1 		mov	r0, r3
 450 01c4 FEFFFFEB 		bl	__fixsfsi
 451 01c8 0030A0E1 		mov	r3, r0
 452 01cc 0338A0E1 		mov	r3, r3, asl #16
 453 01d0 2328A0E1 		mov	r2, r3, lsr #16
 454 01d4 40319FE5 		ldr	r3, .L18+4
 455 01d8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 150:sdk.c         **** 		WO_CTRL_Input.roll=calc_roll;
 457              	.LM19:
 458 01dc 60319FE5 		ldr	r3, .L18+44
 459 01e0 003093E5 		ldr	r3, [r3, #0]	@ float
 460 01e4 0300A0E1 		mov	r0, r3
 461 01e8 FEFFFFEB 		bl	__fixsfsi
 462 01ec 0030A0E1 		mov	r3, r0
 463 01f0 0338A0E1 		mov	r3, r3, asl #16
 464 01f4 2328A0E1 		mov	r2, r3, lsr #16
 465 01f8 1C319FE5 		ldr	r3, .L18+4
 466 01fc B220C3E1 		strh	r2, [r3, #2]	@ movhi
 467 0200 410000EA 		b	.L17
 468              	.L6:
 151:sdk.c         **** 	}else if(receiveLandSignal.mode==LAND_MODE_SLOW){
 470              	.LM20:
 471 0204 3C319FE5 		ldr	r3, .L18+48
 472 0208 003093E5 		ldr	r3, [r3, #0]
 473 020c 010053E3 		cmp	r3, #1
 474 0210 3D00001A 		bne	.L17
 152:sdk.c         **** 		stop_flag++;
 476              	.LM21:
 477 0214 34319FE5 		ldr	r3, .L18+56
 478 0218 003093E5 		ldr	r3, [r3, #0]
 479 021c 012083E2 		add	r2, r3, #1
 480 0220 28319FE5 		ldr	r3, .L18+56
 481 0224 002083E5 		str	r2, [r3, #0]
 153:sdk.c         **** 		if(my_state.position.z>200){
 483              	.LM22:
 484 0228 08319FE5 		ldr	r3, .L18+32
 485 022c 083093E5 		ldr	r3, [r3, #8]	@ float
 486 0230 0300A0E1 		mov	r0, r3
 487 0234 18119FE5 		ldr	r1, .L18+60	@ float
 488 0238 FEFFFFEB 		bl	__gtsf2
 489 023c 0030A0E1 		mov	r3, r0
 490 0240 000053E3 		cmp	r3, #0
 491 0244 000000CA 		bgt	.L12
 492 0248 0D0000EA 		b	.L10
 493              	.L12:
 154:sdk.c         **** 			my_setpoint.position.z=-150;
 495              	.LM23:
 496 024c 04219FE5 		ldr	r2, .L18+64
 497 0250 04319FE5 		ldr	r3, .L18+68	@ float
 498 0254 083082E5 		str	r3, [r2, #8]	@ float
 155:sdk.c         **** 			my_this.thrustBase=1700;
 500              	.LM24:
 501 0258 D0209FE5 		ldr	r2, .L18+24
 502 025c 721FA0E3 		mov	r1, #456
 503 0260 6A3EA0E3 		mov	r3, #1696
 504 0264 043083E2 		add	r3, r3, #4
 505 0268 B13082E1 		strh	r3, [r2, r1]	@ movhi
 156:sdk.c         **** 			WO_CTRL_Input.thrust=output_thrust;
 507              	.LM25:
 508 026c D8309FE5 		ldr	r3, .L18+52
 509 0270 003093E5 		ldr	r3, [r3, #0]
 510 0274 0338A0E1 		mov	r3, r3, asl #16
 511 0278 2328A0E1 		mov	r2, r3, lsr #16
 512 027c 98309FE5 		ldr	r3, .L18+4
 513 0280 B620C3E1 		strh	r2, [r3, #6]	@ movhi
 514              	.L10:
 157:sdk.c         **** 		}
 158:sdk.c         **** 		if(stop_flag>4000){
 516              	.LM26:
 517 0284 C4309FE5 		ldr	r3, .L18+56
 518 0288 003093E5 		ldr	r3, [r3, #0]
 519 028c FA0E53E3 		cmp	r3, #4000
 520 0290 020000DA 		ble	.L13
 159:sdk.c         **** 			WO_CTRL_Input.thrust=1600;
 522              	.LM27:
 523 0294 80309FE5 		ldr	r3, .L18+4
 524 0298 192DA0E3 		mov	r2, #1600
 525 029c B620C3E1 		strh	r2, [r3, #6]	@ movhi
 526              	.L13:
 160:sdk.c         **** 		}
 161:sdk.c         **** 		if(stop_flag>6000){
 528              	.LM28:
 529 02a0 A8309FE5 		ldr	r3, .L18+56
 530 02a4 002093E5 		ldr	r2, [r3, #0]
 531 02a8 5D3DA0E3 		mov	r3, #5952
 532 02ac 303083E2 		add	r3, r3, #48
 533 02b0 030052E1 		cmp	r2, r3
 534 02b4 020000DA 		ble	.L15
 162:sdk.c         **** 			WO_CTRL_Input.thrust=0;
 536              	.LM29:
 537 02b8 5C309FE5 		ldr	r3, .L18+4
 538 02bc 0020A0E3 		mov	r2, #0
 539 02c0 B620C3E1 		strh	r2, [r3, #6]	@ movhi
 540              	.L15:
 163:sdk.c         **** 		}
 164:sdk.c         **** 		//WO_CTRL_Input.thrust=0;
 165:sdk.c         **** 		//WO_CTRL_Input.yaw=2047;
 166:sdk.c         **** 		WO_CTRL_Input.pitch=calc_pitch;
 542              	.LM30:
 543 02c4 74309FE5 		ldr	r3, .L18+40
 544 02c8 003093E5 		ldr	r3, [r3, #0]	@ float
 545 02cc 0300A0E1 		mov	r0, r3
 546 02d0 FEFFFFEB 		bl	__fixsfsi
 547 02d4 0030A0E1 		mov	r3, r0
 548 02d8 0338A0E1 		mov	r3, r3, asl #16
 549 02dc 2328A0E1 		mov	r2, r3, lsr #16
 550 02e0 34309FE5 		ldr	r3, .L18+4
 551 02e4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 167:sdk.c         **** 		WO_CTRL_Input.roll=calc_roll;
 553              	.LM31:
 554 02e8 54309FE5 		ldr	r3, .L18+44
 555 02ec 003093E5 		ldr	r3, [r3, #0]	@ float
 556 02f0 0300A0E1 		mov	r0, r3
 557 02f4 FEFFFFEB 		bl	__fixsfsi
 558 02f8 0030A0E1 		mov	r3, r0
 559 02fc 0338A0E1 		mov	r3, r3, asl #16
 560 0300 2328A0E1 		mov	r2, r3, lsr #16
 561 0304 10309FE5 		ldr	r3, .L18+4
 562 0308 B220C3E1 		strh	r2, [r3, #2]	@ movhi
 563              	.L17:
 168:sdk.c         **** 	}
 169:sdk.c         **** 
 170:sdk.c         **** }
 565              	.LM32:
 566 030c 0CD04BE2 		sub	sp, fp, #12
 567 0310 00689DE8 		ldmfd	sp, {fp, sp, lr}
 568 0314 1EFF2FE1 		bx	lr
 569              	.L19:
 570              		.align	2
 571              	.L18:
 572 0318 00000000 		.word	WO_SDK
 573 031c 00000000 		.word	WO_CTRL_Input
 574 0320 34000000 		.word	temp.2114
 575 0324 00000000 		.word	RO_ALL_Data
 576 0328 00007A44 		.word	1148846080
 577 032c 35FA8E3C 		.word	1016003125
 578 0330 00000000 		.word	my_this
 579 0334 D4020000 		.word	freq.2115
 580 0338 00000000 		.word	my_state
 581 033c 00000000 		.word	calc_thrust
 582 0340 00000000 		.word	calc_pitch
 583 0344 00000000 		.word	calc_roll
 584 0348 00000000 		.word	receiveLandSignal
 585 034c 00000000 		.word	output_thrust
 586 0350 D0020000 		.word	stop_flag.2116
 587 0354 00004843 		.word	1128792064
 588 0358 00000000 		.word	my_setpoint
 589 035c 000016C3 		.word	-1021968384
 596              	.Lscope0:
 597              		.align	2
 599              		.global	SDK_mainloop
 601              	SDK_mainloop:
 171:sdk.c         **** /* SDK_mainloop(void) is triggered @ 1kHz.
 172:sdk.c         ****  *
 173:sdk.c         ****  * RO_(Read Only) data is updated before entering this function
 174:sdk.c         ****  * and can be read to obtain information for supervision or control
 175:sdk.c         ****  *
 176:sdk.c         ****  * WO_(Write Only) data is written to the LL processor after
 177:sdk.c         ****  * execution of this function.
 178:sdk.c         ****  *
 179:sdk.c         ****  * WO_ and RO_ structs are defined in sdk.h
 180:sdk.c         ****  *
 181:sdk.c         ****  * The struct RO_ALL_Data (defined in sdk.h)
 182:sdk.c         ****  * is used to read all sensor data, results of the data fusion
 183:sdk.c         ****  * and R/C inputs transmitted from the LL-processor. This struct is
 184:sdk.c         ****  * automatically updated at 1 kHz.
 185:sdk.c         ****  * */
 186:sdk.c         **** 
 187:sdk.c         **** /* How to flash the high level processor
 188:sdk.c         ****  *
 189:sdk.c         ****  * The easiest way to get your code on the high level processor is to use the JTAG-adapter.
 190:sdk.c         ****  *
 191:sdk.c         ****  * It needs three steps to get your code on the high level processor.
 192:sdk.c         ****  * 1. Build your code ("Build Project")
 193:sdk.c         ****  * 2. Connect your JTAG adapter and start the JTAG connection ("OpenOCD Asctec-JTAG")
 194:sdk.c         ****  * 3. Flash the processor ("Asctec JTAG Debug")
 195:sdk.c         ****  *
 196:sdk.c         ****  * In the menu "Run -> External Tools -> External Tools Configuration..." you
 197:sdk.c         ****  * will find "OpenOCD Asctec-JTAG". If the JTAG connection was activated
 198:sdk.c         ****  * correctly, the console will show only the following line:
 199:sdk.c         ****  * "Info:    openocd.c:92 main(): Open On-Chip Debugger (2007-08-10 22:30 CEST)"
 200:sdk.c         ****  *
 201:sdk.c         ****  * Do not launch more than ONE JTAG-connection at the same time!
 202:sdk.c         ****  *
 203:sdk.c         ****  * In the menu "Run -> Debug Configurations..." you will find "Asctec JTAG Debug"
 204:sdk.c         ****  * If the code was successfully flashed on the processor, the program will switch
 205:sdk.c         ****  * to the Debug window.
 206:sdk.c         ****  *************
 207:sdk.c         ****  * If you want to flash the high level processor using a serial interface (AscTec USB adapter)
 208:sdk.c         ****  * and bootloader software like "Flash Magic", you need to change
 209:sdk.c         ****  * the following in the "makefile" (line 113):
 210:sdk.c         ****  *
 211:sdk.c         ****  * FORMAT = ihex
 212:sdk.c         ****  * #FORMAT = binary
 213:sdk.c         ****  *
 214:sdk.c         ****  * After buidling your code you will find the main.hex in your workspace folder.
 215:sdk.c         ****  *************
 216:sdk.c         ****  * */
 217:sdk.c         **** 
 218:sdk.c         **** /* After flashing the HL, your code can be debugged online. The ARM7 supports ONE hardware breakpoi
 219:sdk.c         ****  * You can monitor the CPU-load by looking at HL_Status.cpu_load. As long as this value is 1000 you
 220:sdk.c         ****  * code in SDK_mainloop() is executed at 1 kHz.
 221:sdk.c         ****  *
 222:sdk.c         ****  * To activate the SDK controls, the serial interface switch on your R/C (channel 5) needs to be in
 223:sdk.c         ****  *
 224:sdk.c         ****  * If your project needs communication over a serial link, you find an example of how to do so in m
 225:sdk.c         ****  * All sample functions for transmitting and receiving data over the UART (HL_serial_0) are in uart
 226:sdk.c         ****  * these examples to code your own communication state machine.
 227:sdk.c         ****  */
 228:sdk.c         **** 
 229:sdk.c         **** 
 230:sdk.c         **** void SDK_mainloop(void) //write your own code within this function
 231:sdk.c         **** {
 603              	.LM33:
 604              		@ Function supports interworking.
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607 0360 0DC0A0E1 		mov	ip, sp
 608 0364 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 609 0368 04B04CE2 		sub	fp, ip, #4
 232:sdk.c         **** 
 233:sdk.c         **** 
 234:sdk.c         **** 	//you can select an example by using ONE of the functions below.
 235:sdk.c         **** 	//CAUTION! Read the code of the examples before you test them on your UAV!
 236:sdk.c         **** 
 237:sdk.c         **** 	//SDK_EXAMPLE_direct_individual_motor_commands();
 238:sdk.c         **** 	//SDK_EXAMPLE_direct_motor_commands_with_standard_output_mapping();
 239:sdk.c         **** 	//SDK_EXAMPLE_attitude_commands();
 240:sdk.c         **** 	//SDK_EXAMPLE_gps_waypoint_control();
 241:sdk.c         **** 
 242:sdk.c         **** 	//example to turn motors on and off every 2 seconds
 243:sdk.c         **** 	/*
 244:sdk.c         ****  	static int timer=0;
 245:sdk.c         **** 	if(++timer<1000) SDK_EXAMPLE_turn_motors_on();
 246:sdk.c         **** 	else if(timer<2000) SDK_EXAMPLE_turn_motors_off();
 247:sdk.c         **** 	else timer=0;
 248:sdk.c         **** 	*/
 249:sdk.c         **** 	fake_gps3();
 611              	.LM34:
 612 036c FEFFFFEB 		bl	fake_gps3
 250:sdk.c         **** }
 614              	.LM35:
 615 0370 0CD04BE2 		sub	sp, fp, #12
 616 0374 00689DE8 		ldmfd	sp, {fp, sp, lr}
 617 0378 1EFF2FE1 		bx	lr
 619              	.Lscope1:
 620              		.align	2
 622              		.global	SDK_EXAMPLE_direct_individual_motor_commands
 624              	SDK_EXAMPLE_direct_individual_motor_commands:
 251:sdk.c         **** 
 252:sdk.c         **** /* the following example shows the direct motor command usage by mapping the stick directly to the 
 253:sdk.c         ****  *
 254:sdk.c         ****  */
 255:sdk.c         **** void SDK_EXAMPLE_direct_individual_motor_commands(void)
 256:sdk.c         **** {
 626              	.LM36:
 627              		@ Function supports interworking.
 628              		@ args = 0, pretend = 0, frame = 4
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630 037c 0DC0A0E1 		mov	ip, sp
 631 0380 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 632 0384 04B04CE2 		sub	fp, ip, #4
 633 0388 04D04DE2 		sub	sp, sp, #4
 257:sdk.c         **** 
 258:sdk.c         **** 	WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..
 635              	.LM37:
 636 038c E0219FE5 		ldr	r2, .L31
 637 0390 0030A0E3 		mov	r3, #0
 638 0394 0030C2E5 		strb	r3, [r2, #0]
 259:sdk.c         **** 							//0x01: direct motor control using standard output mapping: commands are interpreted as pitc
 260:sdk.c         **** 							//0x02: attitude and throttle control: commands are input for standard attitude controller
 261:sdk.c         **** 							//0x03: GPS waypoint control
 262:sdk.c         **** 
 263:sdk.c         **** 	WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 640              	.LM38:
 641 0398 D4219FE5 		ldr	r2, .L31
 642 039c 0130A0E3 		mov	r3, #1
 643 03a0 0130C2E5 		strb	r3, [r2, #1]
 264:sdk.c         **** 							//1: enable control by HL processor
 265:sdk.c         **** 
 266:sdk.c         **** 	WO_SDK.disable_motor_onoff_by_stick=0;
 645              	.LM39:
 646 03a4 C8219FE5 		ldr	r2, .L31
 647 03a8 0030A0E3 		mov	r3, #0
 648 03ac 0230C2E5 		strb	r3, [r2, #2]
 267:sdk.c         **** 
 268:sdk.c         **** 	unsigned int i;
 269:sdk.c         **** 
 270:sdk.c         **** 	//scale throttle stick to [0..200] and map it to all motors
 271:sdk.c         **** 	WO_Direct_Individual_Motor_Control.motor[0]=RO_ALL_Data.channel[2]/21;
 650              	.LM40:
 651 03b0 C0319FE5 		ldr	r3, .L31+4
 652 03b4 B420D3E1 		ldrh	r2, [r3, #4]
 653 03b8 BC319FE5 		ldr	r3, .L31+8
 654 03bc 930281E0 		umull	r0, r1, r3, r2
 655 03c0 023061E0 		rsb	r3, r1, r2
 656 03c4 A330A0E1 		mov	r3, r3, lsr #1
 657 03c8 033081E0 		add	r3, r1, r3
 658 03cc 2332A0E1 		mov	r3, r3, lsr #4
 659 03d0 0338A0E1 		mov	r3, r3, asl #16
 660 03d4 2338A0E1 		mov	r3, r3, lsr #16
 661 03d8 FF3003E2 		and	r3, r3, #255
 662 03dc 9C219FE5 		ldr	r2, .L31+12
 663 03e0 0030C2E5 		strb	r3, [r2, #0]
 272:sdk.c         **** 	WO_Direct_Individual_Motor_Control.motor[1]=RO_ALL_Data.channel[2]/21;
 665              	.LM41:
 666 03e4 8C319FE5 		ldr	r3, .L31+4
 667 03e8 B420D3E1 		ldrh	r2, [r3, #4]
 668 03ec 88319FE5 		ldr	r3, .L31+8
 669 03f0 930281E0 		umull	r0, r1, r3, r2
 670 03f4 023061E0 		rsb	r3, r1, r2
 671 03f8 A330A0E1 		mov	r3, r3, lsr #1
 672 03fc 033081E0 		add	r3, r1, r3
 673 0400 2332A0E1 		mov	r3, r3, lsr #4
 674 0404 0338A0E1 		mov	r3, r3, asl #16
 675 0408 2338A0E1 		mov	r3, r3, lsr #16
 676 040c FF3003E2 		and	r3, r3, #255
 677 0410 68219FE5 		ldr	r2, .L31+12
 678 0414 0130C2E5 		strb	r3, [r2, #1]
 273:sdk.c         **** 	WO_Direct_Individual_Motor_Control.motor[2]=RO_ALL_Data.channel[2]/21;
 680              	.LM42:
 681 0418 58319FE5 		ldr	r3, .L31+4
 682 041c B420D3E1 		ldrh	r2, [r3, #4]
 683 0420 54319FE5 		ldr	r3, .L31+8
 684 0424 930281E0 		umull	r0, r1, r3, r2
 685 0428 023061E0 		rsb	r3, r1, r2
 686 042c A330A0E1 		mov	r3, r3, lsr #1
 687 0430 033081E0 		add	r3, r1, r3
 688 0434 2332A0E1 		mov	r3, r3, lsr #4
 689 0438 0338A0E1 		mov	r3, r3, asl #16
 690 043c 2338A0E1 		mov	r3, r3, lsr #16
 691 0440 FF3003E2 		and	r3, r3, #255
 692 0444 34219FE5 		ldr	r2, .L31+12
 693 0448 0230C2E5 		strb	r3, [r2, #2]
 274:sdk.c         **** 	WO_Direct_Individual_Motor_Control.motor[3]=RO_ALL_Data.channel[2]/21;
 695              	.LM43:
 696 044c 24319FE5 		ldr	r3, .L31+4
 697 0450 B420D3E1 		ldrh	r2, [r3, #4]
 698 0454 20319FE5 		ldr	r3, .L31+8
 699 0458 930281E0 		umull	r0, r1, r3, r2
 700 045c 023061E0 		rsb	r3, r1, r2
 701 0460 A330A0E1 		mov	r3, r3, lsr #1
 702 0464 033081E0 		add	r3, r1, r3
 703 0468 2332A0E1 		mov	r3, r3, lsr #4
 704 046c 0338A0E1 		mov	r3, r3, asl #16
 705 0470 2338A0E1 		mov	r3, r3, lsr #16
 706 0474 FF3003E2 		and	r3, r3, #255
 707 0478 00219FE5 		ldr	r2, .L31+12
 708 047c 0330C2E5 		strb	r3, [r2, #3]
 275:sdk.c         **** 	WO_Direct_Individual_Motor_Control.motor[4]=RO_ALL_Data.channel[2]/21;
 710              	.LM44:
 711 0480 F0309FE5 		ldr	r3, .L31+4
 712 0484 B420D3E1 		ldrh	r2, [r3, #4]
 713 0488 EC309FE5 		ldr	r3, .L31+8
 714 048c 930281E0 		umull	r0, r1, r3, r2
 715 0490 023061E0 		rsb	r3, r1, r2
 716 0494 A330A0E1 		mov	r3, r3, lsr #1
 717 0498 033081E0 		add	r3, r1, r3
 718 049c 2332A0E1 		mov	r3, r3, lsr #4
 719 04a0 0338A0E1 		mov	r3, r3, asl #16
 720 04a4 2338A0E1 		mov	r3, r3, lsr #16
 721 04a8 FF3003E2 		and	r3, r3, #255
 722 04ac CC209FE5 		ldr	r2, .L31+12
 723 04b0 0430C2E5 		strb	r3, [r2, #4]
 276:sdk.c         **** 	WO_Direct_Individual_Motor_Control.motor[5]=RO_ALL_Data.channel[2]/21;
 725              	.LM45:
 726 04b4 BC309FE5 		ldr	r3, .L31+4
 727 04b8 B420D3E1 		ldrh	r2, [r3, #4]
 728 04bc B8309FE5 		ldr	r3, .L31+8
 729 04c0 930281E0 		umull	r0, r1, r3, r2
 730 04c4 023061E0 		rsb	r3, r1, r2
 731 04c8 A330A0E1 		mov	r3, r3, lsr #1
 732 04cc 033081E0 		add	r3, r1, r3
 733 04d0 2332A0E1 		mov	r3, r3, lsr #4
 734 04d4 0338A0E1 		mov	r3, r3, asl #16
 735 04d8 2338A0E1 		mov	r3, r3, lsr #16
 736 04dc FF3003E2 		and	r3, r3, #255
 737 04e0 98209FE5 		ldr	r2, .L31+12
 738 04e4 0530C2E5 		strb	r3, [r2, #5]
 277:sdk.c         **** 
 278:sdk.c         **** 	//make sure commands are never 0 so that motors will always keep spinning
 279:sdk.c         ****     //also make sure that commands stay within range
 280:sdk.c         ****     for(i=0;i<6;i++)
 740              	.LM46:
 741 04e8 0030A0E3 		mov	r3, #0
 742 04ec 10300BE5 		str	r3, [fp, #-16]
 743 04f0 190000EA 		b	.L23
 744              	.L24:
 281:sdk.c         ****     {
 282:sdk.c         ****     	if(!WO_Direct_Individual_Motor_Control.motor[i]) WO_Direct_Individual_Motor_Control.motor[i]=1
 746              	.LM47:
 747 04f4 10201BE5 		ldr	r2, [fp, #-16]
 748 04f8 80309FE5 		ldr	r3, .L31+12
 749 04fc 023083E0 		add	r3, r3, r2
 750 0500 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 751 0504 000053E3 		cmp	r3, #0
 752 0508 0500001A 		bne	.L25
 753 050c 10201BE5 		ldr	r2, [fp, #-16]
 754 0510 68309FE5 		ldr	r3, .L31+12
 755 0514 022083E0 		add	r2, r3, r2
 756 0518 0130A0E3 		mov	r3, #1
 757 051c 0030C2E5 		strb	r3, [r2, #0]
 758 0520 0A0000EA 		b	.L27
 759              	.L25:
 283:sdk.c         ****     	else if (WO_Direct_Individual_Motor_Control.motor[i]>200) WO_Direct_Individual_Motor_Control.m
 761              	.LM48:
 762 0524 10201BE5 		ldr	r2, [fp, #-16]
 763 0528 50309FE5 		ldr	r3, .L31+12
 764 052c 023083E0 		add	r3, r3, r2
 765 0530 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 766 0534 C80053E3 		cmp	r3, #200
 767 0538 0400009A 		bls	.L27
 768 053c 10201BE5 		ldr	r2, [fp, #-16]
 769 0540 38309FE5 		ldr	r3, .L31+12
 770 0544 022083E0 		add	r2, r3, r2
 771 0548 3730E0E3 		mvn	r3, #55
 772 054c 0030C2E5 		strb	r3, [r2, #0]
 773              	.L27:
 280:sdk.c         ****     for(i=0;i<6;i++)
 775              	.LM49:
 776 0550 10301BE5 		ldr	r3, [fp, #-16]
 777 0554 013083E2 		add	r3, r3, #1
 778 0558 10300BE5 		str	r3, [fp, #-16]
 779              	.L23:
 780 055c 10301BE5 		ldr	r3, [fp, #-16]
 781 0560 050053E3 		cmp	r3, #5
 782 0564 E2FFFF9A 		bls	.L24
 284:sdk.c         ****     }
 285:sdk.c         **** }
 784              	.LM50:
 785 0568 0CD04BE2 		sub	sp, fp, #12
 786 056c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 787 0570 1EFF2FE1 		bx	lr
 788              	.L32:
 789              		.align	2
 790              	.L31:
 791 0574 00000000 		.word	WO_SDK
 792 0578 00000000 		.word	RO_ALL_Data
 793 057c 87611886 		.word	-2045222521
 794 0580 00000000 		.word	WO_Direct_Individual_Motor_Control
 799              	.Lscope2:
 800              		.align	2
 802              		.global	SDK_EXAMPLE_direct_motor_commands_with_standard_output_mapping
 804              	SDK_EXAMPLE_direct_motor_commands_with_standard_output_mapping:
 286:sdk.c         **** 
 287:sdk.c         **** 
 288:sdk.c         **** void SDK_EXAMPLE_direct_motor_commands_with_standard_output_mapping(void)
 289:sdk.c         **** {
 806              	.LM51:
 807              		@ Function supports interworking.
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810 0584 0DC0A0E1 		mov	ip, sp
 811 0588 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 812 058c 04B04CE2 		sub	fp, ip, #4
 290:sdk.c         **** 	WO_SDK.ctrl_mode=0x01;	//0x00: direct individual motor control: individual commands for motors 0..
 814              	.LM52:
 815 0590 F4209FE5 		ldr	r2, .L35
 816 0594 0130A0E3 		mov	r3, #1
 817 0598 0030C2E5 		strb	r3, [r2, #0]
 291:sdk.c         **** 							//0x01: direct motor control using standard output mapping: commands are interpreted as pitc
 292:sdk.c         **** 							//0x02: attitude and throttle control: commands are input for standard attitude controller
 293:sdk.c         **** 							//0x03: GPS waypoint control
 294:sdk.c         **** 
 295:sdk.c         **** 	WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 819              	.LM53:
 820 059c E8209FE5 		ldr	r2, .L35
 821 05a0 0130A0E3 		mov	r3, #1
 822 05a4 0130C2E5 		strb	r3, [r2, #1]
 296:sdk.c         **** 							//1: enable control by HL processor
 297:sdk.c         **** 
 298:sdk.c         **** 	/*
 299:sdk.c         **** 	 *  Stick commands directly mapped to motors, NO attitude control! Do NOT try to fly!
 300:sdk.c         **** 	 * */
 301:sdk.c         **** 
 302:sdk.c         **** 	WO_Direct_Motor_Control.pitch=(4095-RO_ALL_Data.channel[0])/21;
 824              	.LM54:
 825 05a8 E0309FE5 		ldr	r3, .L35+4
 826 05ac B030D3E1 		ldrh	r3, [r3, #0]
 827 05b0 FF2E63E2 		rsb	r2, r3, #4080
 828 05b4 0F2082E2 		add	r2, r2, #15
 829 05b8 C335A0E3 		mov	r3, #817889280
 830 05bc C33B83E2 		add	r3, r3, #199680
 831 05c0 313083E2 		add	r3, r3, #49
 832 05c4 9203C3E0 		smull	r0, r3, r2, r3
 833 05c8 4311A0E1 		mov	r1, r3, asr #2
 834 05cc C23FA0E1 		mov	r3, r2, asr #31
 835 05d0 013063E0 		rsb	r3, r3, r1
 836 05d4 FF3003E2 		and	r3, r3, #255
 837 05d8 B4209FE5 		ldr	r2, .L35+8
 838 05dc 0030C2E5 		strb	r3, [r2, #0]
 303:sdk.c         **** 	WO_Direct_Motor_Control.roll=RO_ALL_Data.channel[1]/21;
 840              	.LM55:
 841 05e0 A8309FE5 		ldr	r3, .L35+4
 842 05e4 B220D3E1 		ldrh	r2, [r3, #2]
 843 05e8 A8309FE5 		ldr	r3, .L35+12
 844 05ec 930281E0 		umull	r0, r1, r3, r2
 845 05f0 023061E0 		rsb	r3, r1, r2
 846 05f4 A330A0E1 		mov	r3, r3, lsr #1
 847 05f8 033081E0 		add	r3, r1, r3
 848 05fc 2332A0E1 		mov	r3, r3, lsr #4
 849 0600 0338A0E1 		mov	r3, r3, asl #16
 850 0604 2338A0E1 		mov	r3, r3, lsr #16
 851 0608 FF3003E2 		and	r3, r3, #255
 852 060c 80209FE5 		ldr	r2, .L35+8
 853 0610 0130C2E5 		strb	r3, [r2, #1]
 304:sdk.c         **** 	WO_Direct_Motor_Control.thrust=RO_ALL_Data.channel[2]/21;
 855              	.LM56:
 856 0614 74309FE5 		ldr	r3, .L35+4
 857 0618 B420D3E1 		ldrh	r2, [r3, #4]
 858 061c 74309FE5 		ldr	r3, .L35+12
 859 0620 930281E0 		umull	r0, r1, r3, r2
 860 0624 023061E0 		rsb	r3, r1, r2
 861 0628 A330A0E1 		mov	r3, r3, lsr #1
 862 062c 033081E0 		add	r3, r1, r3
 863 0630 2332A0E1 		mov	r3, r3, lsr #4
 864 0634 0338A0E1 		mov	r3, r3, asl #16
 865 0638 2338A0E1 		mov	r3, r3, lsr #16
 866 063c FF3003E2 		and	r3, r3, #255
 867 0640 4C209FE5 		ldr	r2, .L35+8
 868 0644 0330C2E5 		strb	r3, [r2, #3]
 305:sdk.c         **** 	WO_Direct_Motor_Control.yaw=(4095-RO_ALL_Data.channel[3])/21;
 870              	.LM57:
 871 0648 40309FE5 		ldr	r3, .L35+4
 872 064c B630D3E1 		ldrh	r3, [r3, #6]
 873 0650 FF2E63E2 		rsb	r2, r3, #4080
 874 0654 0F2082E2 		add	r2, r2, #15
 875 0658 C335A0E3 		mov	r3, #817889280
 876 065c C33B83E2 		add	r3, r3, #199680
 877 0660 313083E2 		add	r3, r3, #49
 878 0664 9213C3E0 		smull	r1, r3, r2, r3
 879 0668 4311A0E1 		mov	r1, r3, asr #2
 880 066c C23FA0E1 		mov	r3, r2, asr #31
 881 0670 013063E0 		rsb	r3, r3, r1
 882 0674 FF3003E2 		and	r3, r3, #255
 883 0678 14209FE5 		ldr	r2, .L35+8
 884 067c 0230C2E5 		strb	r3, [r2, #2]
 306:sdk.c         **** 
 307:sdk.c         **** }
 886              	.LM58:
 887 0680 0CD04BE2 		sub	sp, fp, #12
 888 0684 00689DE8 		ldmfd	sp, {fp, sp, lr}
 889 0688 1EFF2FE1 		bx	lr
 890              	.L36:
 891              		.align	2
 892              	.L35:
 893 068c 00000000 		.word	WO_SDK
 894 0690 00000000 		.word	RO_ALL_Data
 895 0694 00000000 		.word	WO_Direct_Motor_Control
 896 0698 87611886 		.word	-2045222521
 898              	.Lscope3:
 899              		.align	2
 901              		.global	SDK_EXAMPLE_attitude_commands
 903              	SDK_EXAMPLE_attitude_commands:
 308:sdk.c         **** 
 309:sdk.c         **** 
 310:sdk.c         **** void SDK_EXAMPLE_attitude_commands(void)
 311:sdk.c         **** {
 905              	.LM59:
 906              		@ Function supports interworking.
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909 069c 0DC0A0E1 		mov	ip, sp
 910 06a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 911 06a4 04B04CE2 		sub	fp, ip, #4
 312:sdk.c         **** 	WO_SDK.ctrl_mode=0x02;	//0x00: direct individual motor control: individual commands for motors 0..
 913              	.LM60:
 914 06a8 34209FE5 		ldr	r2, .L39
 915 06ac 0230A0E3 		mov	r3, #2
 916 06b0 0030C2E5 		strb	r3, [r2, #0]
 313:sdk.c         **** 							//0x01: direct motor control using standard output mapping: commands are interpreted as pitc
 314:sdk.c         **** 							//0x02: attitude and throttle control: commands are input for standard attitude controller
 315:sdk.c         **** 							//0x03: GPS waypoint control
 316:sdk.c         **** 
 317:sdk.c         **** 	WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 918              	.LM61:
 919 06b4 28209FE5 		ldr	r2, .L39
 920 06b8 0130A0E3 		mov	r3, #1
 921 06bc 0130C2E5 		strb	r3, [r2, #1]
 318:sdk.c         **** 							//1: enable control by HL processor
 319:sdk.c         **** 
 320:sdk.c         **** 	//with this example the UAV will go to ~10% throttle when SDK control is activated
 321:sdk.c         **** 	WO_CTRL_Input.ctrl=0x08;	//0x08: enable throttle control by HL. Height control and GPS are deactiv
 923              	.LM62:
 924 06c0 20209FE5 		ldr	r2, .L39+4
 925 06c4 0830A0E3 		mov	r3, #8
 926 06c8 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 322:sdk.c         **** 								//pitch, roll and yaw are still commanded via the remote control
 323:sdk.c         **** 
 324:sdk.c         **** 	WO_CTRL_Input.thrust=400;	//10% throttle command
 928              	.LM63:
 929 06cc 14209FE5 		ldr	r2, .L39+4
 930 06d0 193EA0E3 		mov	r3, #400
 931 06d4 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 325:sdk.c         **** 
 326:sdk.c         **** 
 327:sdk.c         **** }
 933              	.LM64:
 934 06d8 0CD04BE2 		sub	sp, fp, #12
 935 06dc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 936 06e0 1EFF2FE1 		bx	lr
 937              	.L40:
 938              		.align	2
 939              	.L39:
 940 06e4 00000000 		.word	WO_SDK
 941 06e8 00000000 		.word	WO_CTRL_Input
 943              	.Lscope4:
 944              		.bss
 945              		.align	2
 946              	originLon.2234:
 947 02d8 00000000 		.space	8
 947      00000000 
 949              		.align	2
 950              	originLat.2233:
 951 02e0 00000000 		.space	8
 951      00000000 
 953              	wpExampleState.2232:
 954 02e8 00       		.space	1
 956              		.global	__floatsidf
 957              		.global	__divdf3
 958              		.global	__muldf3
 959              		.global	__fixdfsi
 960              		.text
 961              		.align	2
 963              		.global	SDK_EXAMPLE_gps_waypoint_control
 965              	SDK_EXAMPLE_gps_waypoint_control:
 328:sdk.c         **** 
 329:sdk.c         **** 
 330:sdk.c         **** 
 331:sdk.c         **** /* This function demonstrates a simple waypoint command generation. Switch on Channel 7 is used
 332:sdk.c         ****  * to activate a 15m by 15m square. Therefore a waypoint is calculated from the current position an
 333:sdk.c         ****  * height and is transmitted to the low level processor. The waypoint status is monitored to switch
 334:sdk.c         ****  * the next waypoint after the current one is reached.
 335:sdk.c         ****  *
 336:sdk.c         ****  * wpCtrlWpCmd is used to send a command to the low level processor. Different options like waypoin
 337:sdk.c         ****  * are available. See LL_HL_comm.h for WP_CMD_* defines
 338:sdk.c         ****  *
 339:sdk.c         ****  * wpCtrlWpCmdUpdated has to be set to 1 to send the command. When the cmd is sent it is set back t
 340:sdk.c         ****  *
 341:sdk.c         ****  * wpCtrlAckTrigger is set to 1 when the LL accepts the waypoint
 342:sdk.c         ****  *
 343:sdk.c         ****  * wpCtrlNavStatus gives you a navigation status. See WP_NAVSTAT_* defines in SDK.h for options
 344:sdk.c         ****  *
 345:sdk.c         ****  * wpCtrlDistToWp gives you the current distance to the current waypoint in dm (= 10 cm)
 346:sdk.c         ****  */
 347:sdk.c         **** void SDK_EXAMPLE_gps_waypoint_control()
 348:sdk.c         **** {
 967              	.LM65:
 968              		@ Function supports interworking.
 969              		@ args = 0, pretend = 0, frame = 48
 970              		@ frame_needed = 1, uses_anonymous_args = 0
 971 06ec 0DC0A0E1 		mov	ip, sp
 972 06f0 70D82DE9 		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 973 06f4 04B04CE2 		sub	fp, ip, #4
 974 06f8 48D04DE2 		sub	sp, sp, #72
 349:sdk.c         **** 	static unsigned char wpExampleState=0;
 350:sdk.c         **** 	static double originLat,originLon;
 351:sdk.c         **** 
 352:sdk.c         **** 
 353:sdk.c         **** 	WO_SDK.ctrl_mode=0x03;
 976              	.LM66:
 977 06fc 34239FE5 		ldr	r2, .L79
 978 0700 0330A0E3 		mov	r3, #3
 979 0704 0030C2E5 		strb	r3, [r2, #0]
 354:sdk.c         **** 
 355:sdk.c         **** 	WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 981              	.LM67:
 982 0708 28239FE5 		ldr	r2, .L79
 983 070c 0130A0E3 		mov	r3, #1
 984 0710 0130C2E5 		strb	r3, [r2, #1]
 356:sdk.c         **** 							//1: enable control by HL processor
 357:sdk.c         **** 
 358:sdk.c         **** 	switch (wpExampleState)
 986              	.LM68:
 987 0714 2C339FE5 		ldr	r3, .L79+16
 988 0718 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 989 071c 040053E3 		cmp	r3, #4
 990 0720 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 991 0724 DC0200EA 		b	.L42
 992              		.align	2
 993              	.L48:
 994 0728 3C070000 		.word	.L43
 995 072c 64070000 		.word	.L44
 996 0730 700A0000 		.word	.L45
 997 0734 380D0000 		.word	.L46
 998 0738 2C100000 		.word	.L47
 999              	.L43:
 359:sdk.c         **** 	{
 360:sdk.c         **** 		//prior to start, the lever on channel 7 has to be in "OFF" position
 361:sdk.c         **** 		case 0:
 362:sdk.c         **** 		if (RO_RC_Data.channel[6]<1600)
 1001              	.LM69:
 1002 073c 00339FE5 		ldr	r3, .L79+12
 1003 0740 BC20D3E1 		ldrh	r2, [r3, #12]
 1004 0744 633EA0E3 		mov	r3, #1584
 1005 0748 0F3083E2 		add	r3, r3, #15
 1006 074c 030052E1 		cmp	r2, r3
 1007 0750 D402008A 		bhi	.L78
 363:sdk.c         **** 			wpExampleState=1;
 1009              	.LM70:
 1010 0754 EC329FE5 		ldr	r3, .L79+16
 1011 0758 0120A0E3 		mov	r2, #1
 1012 075c 0020C3E5 		strb	r2, [r3, #0]
 364:sdk.c         **** 		break;
 1014              	.LM71:
 1015 0760 D00200EA 		b	.L78
 1016              	.L44:
 365:sdk.c         **** 
 366:sdk.c         **** 		case 1:
 367:sdk.c         **** 		if (RO_RC_Data.channel[6]>2400)
 1018              	.LM72:
 1019 0764 D8329FE5 		ldr	r3, .L79+12
 1020 0768 BC30D3E1 		ldrh	r3, [r3, #12]
 1021 076c 960E53E3 		cmp	r3, #2400
 1022 0770 CC02009A 		bls	.L78
 1023              	.LBB2:
 368:sdk.c         **** 		{
 369:sdk.c         **** 			double lat,lon;
 370:sdk.c         **** 			//lever was set to "ON" state -> calculate and send first waypoint and switch state
 371:sdk.c         **** 
 372:sdk.c         **** 			//fill waypoint structure
 373:sdk.c         **** 			wpToLL.max_speed=100;
 1025              	.LM73:
 1026 0774 E0229FE5 		ldr	r2, .L79+36
 1027 0778 6430A0E3 		mov	r3, #100
 1028 077c 0530C2E5 		strb	r3, [r2, #5]
 374:sdk.c         **** 			wpToLL.pos_acc=3000; 	//3m accuracy
 1030              	.LM74:
 1031 0780 D4229FE5 		ldr	r2, .L79+36
 1032 0784 BB3EA0E3 		mov	r3, #2992
 1033 0788 083083E2 		add	r3, r3, #8
 1034 078c B830C2E1 		strh	r3, [r2, #8]	@ movhi
 375:sdk.c         **** 			wpToLL.time=400; 		//4 seconds waiting time at each waypoint
 1036              	.LM75:
 1037 0790 C4229FE5 		ldr	r2, .L79+36
 1038 0794 193EA0E3 		mov	r3, #400
 1039 0798 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 376:sdk.c         **** 			wpToLL.wp_activated=1;
 1041              	.LM76:
 1042 079c B8229FE5 		ldr	r2, .L79+36
 1043 07a0 0130A0E3 		mov	r3, #1
 1044 07a4 003082E5 		str	r3, [r2, #0]
 377:sdk.c         **** 
 378:sdk.c         **** 			//see LL_HL_comm.h for WPPROP defines
 379:sdk.c         **** 			wpToLL.properties=WPPROP_ABSCOORDS|WPPROP_AUTOMATICGOTO|WPPROP_HEIGHTENABLED|WPPROP_YAWENABLED;
 1046              	.LM77:
 1047 07a8 AC229FE5 		ldr	r2, .L79+36
 1048 07ac 1730A0E3 		mov	r3, #23
 1049 07b0 0430C2E5 		strb	r3, [r2, #4]
 380:sdk.c         **** 
 381:sdk.c         **** 			//use current height and yaw
 382:sdk.c         **** 			wpToLL.yaw=IMU_CalcData.angle_yaw; //use current yaw
 1051              	.LM78:
 1052 07b4 9C329FE5 		ldr	r3, .L79+32
 1053 07b8 082093E5 		ldr	r2, [r3, #8]
 1054 07bc 98329FE5 		ldr	r3, .L79+36
 1055 07c0 142083E5 		str	r2, [r3, #20]
 383:sdk.c         **** 			wpToLL.height=IMU_CalcData.height; //use current height
 1057              	.LM79:
 1058 07c4 8C329FE5 		ldr	r3, .L79+32
 1059 07c8 4C2093E5 		ldr	r2, [r3, #76]
 1060 07cc 88329FE5 		ldr	r3, .L79+36
 1061 07d0 182083E5 		str	r2, [r3, #24]
 384:sdk.c         **** 
 385:sdk.c         **** 			originLat=(double)GPS_Data.latitude/10000000.0;
 1063              	.LM80:
 1064 07d4 60329FE5 		ldr	r3, .L79+4
 1065 07d8 003093E5 		ldr	r3, [r3, #0]
 1066 07dc 0300A0E1 		mov	r0, r3
 1067 07e0 FEFFFFEB 		bl	__floatsidf
 1068 07e4 0030A0E1 		mov	r3, r0
 1069 07e8 0140A0E1 		mov	r4, r1
 1070 07ec 0300A0E1 		mov	r0, r3
 1071 07f0 0410A0E1 		mov	r1, r4
 1072 07f4 9B2F8FE2 		adr	r2, .L79+48
 1073 07f8 0C0092E8 		ldmia	r2, {r2-r3}
 1074 07fc FEFFFFEB 		bl	__divdf3
 1075 0800 0030A0E1 		mov	r3, r0
 1076 0804 0140A0E1 		mov	r4, r1
 1077 0808 50229FE5 		ldr	r2, .L79+40
 1078 080c 180082E8 		stmia	r2, {r3-r4}
 386:sdk.c         **** 			originLon=(double)GPS_Data.longitude/10000000.0;
 1080              	.LM81:
 1081 0810 24329FE5 		ldr	r3, .L79+4
 1082 0814 043093E5 		ldr	r3, [r3, #4]
 1083 0818 0300A0E1 		mov	r0, r3
 1084 081c FEFFFFEB 		bl	__floatsidf
 1085 0820 0030A0E1 		mov	r3, r0
 1086 0824 0140A0E1 		mov	r4, r1
 1087 0828 0300A0E1 		mov	r0, r3
 1088 082c 0410A0E1 		mov	r1, r4
 1089 0830 232E8FE2 		adr	r2, .L79+48
 1090 0834 0C0092E8 		ldmia	r2, {r2-r3}
 1091 0838 FEFFFFEB 		bl	__divdf3
 1092 083c 0030A0E1 		mov	r3, r0
 1093 0840 0140A0E1 		mov	r4, r1
 1094 0844 18229FE5 		ldr	r2, .L79+44
 1095 0848 180082E8 		stmia	r2, {r3-r4}
 387:sdk.c         **** 
 388:sdk.c         **** 			//calculate a position 15m north of us
 389:sdk.c         **** 			xy2latlon(originLat,originLon,0.0,15.0,&lat,&lon);
 1097              	.LM82:
 1098 084c 0C329FE5 		ldr	r3, .L79+40
 1099 0850 060093E8 		ldmia	r3, {r1-r2}
 1100 0854 08329FE5 		ldr	r3, .L79+44
 1101 0858 600093E8 		ldmia	r3, {r5-r6}
 1102 085c 0030A0E3 		mov	r3, #0
 1103 0860 0040A0E3 		mov	r4, #0
 1104 0864 18008DE8 		stmia	sp, {r3-r4}
 1105 0868 0131A0E3 		mov	r3, #1073741824
 1106 086c 2E3883E2 		add	r3, r3, #3014656
 1107 0870 0040A0E3 		mov	r4, #0
 1108 0874 08308DE5 		str	r3, [sp, #8]
 1109 0878 0C408DE5 		str	r4, [sp, #12]
 1110 087c 20304BE2 		sub	r3, fp, #32
 1111 0880 10308DE5 		str	r3, [sp, #16]
 1112 0884 28304BE2 		sub	r3, fp, #40
 1113 0888 14308DE5 		str	r3, [sp, #20]
 1114 088c 0100A0E1 		mov	r0, r1
 1115 0890 0210A0E1 		mov	r1, r2
 1116 0894 0520A0E1 		mov	r2, r5
 1117 0898 0630A0E1 		mov	r3, r6
 1118 089c FEFFFFEB 		bl	xy2latlon
 390:sdk.c         **** 
 391:sdk.c         **** 			wpToLL.X=lon*10000000;
 1120              	.LM83:
 1121 08a0 28304BE2 		sub	r3, fp, #40
 1122 08a4 180093E8 		ldmia	r3, {r3-r4}
 1123 08a8 0300A0E1 		mov	r0, r3
 1124 08ac 0410A0E1 		mov	r1, r4
 1125 08b0 1B2E8FE2 		adr	r2, .L79+48
 1126 08b4 0C0092E8 		ldmia	r2, {r2-r3}
 1127 08b8 FEFFFFEB 		bl	__muldf3
 1128 08bc 0030A0E1 		mov	r3, r0
 1129 08c0 0140A0E1 		mov	r4, r1
 1130 08c4 0300A0E1 		mov	r0, r3
 1131 08c8 0410A0E1 		mov	r1, r4
 1132 08cc FEFFFFEB 		bl	__fixdfsi
 1133 08d0 0020A0E1 		mov	r2, r0
 1134 08d4 80319FE5 		ldr	r3, .L79+36
 1135 08d8 0C2083E5 		str	r2, [r3, #12]
 392:sdk.c         **** 			wpToLL.Y=lat*10000000;
 1137              	.LM84:
 1138 08dc 20304BE2 		sub	r3, fp, #32
 1139 08e0 180093E8 		ldmia	r3, {r3-r4}
 1140 08e4 0300A0E1 		mov	r0, r3
 1141 08e8 0410A0E1 		mov	r1, r4
 1142 08ec 5D2F8FE2 		adr	r2, .L79+48
 1143 08f0 0C0092E8 		ldmia	r2, {r2-r3}
 1144 08f4 FEFFFFEB 		bl	__muldf3
 1145 08f8 0030A0E1 		mov	r3, r0
 1146 08fc 0140A0E1 		mov	r4, r1
 1147 0900 0300A0E1 		mov	r0, r3
 1148 0904 0410A0E1 		mov	r1, r4
 1149 0908 FEFFFFEB 		bl	__fixdfsi
 1150 090c 0020A0E1 		mov	r2, r0
 1151 0910 44319FE5 		ldr	r3, .L79+36
 1152 0914 102083E5 		str	r2, [r3, #16]
 393:sdk.c         **** 
 394:sdk.c         **** 			//calc chksum
 395:sdk.c         **** 			wpToLL.chksum = 0xAAAA
 1154              	.LM85:
 1155 0918 3C319FE5 		ldr	r3, .L79+36
 1156 091c 143093E5 		ldr	r3, [r3, #20]
 1157 0920 0338A0E1 		mov	r3, r3, asl #16
 1158 0924 2328A0E1 		mov	r2, r3, lsr #16
 1159 0928 2C319FE5 		ldr	r3, .L79+36
 1160 092c 183093E5 		ldr	r3, [r3, #24]
 1161 0930 0338A0E1 		mov	r3, r3, asl #16
 1162 0934 2338A0E1 		mov	r3, r3, lsr #16
 1163 0938 033082E0 		add	r3, r2, r3
 1164 093c 0338A0E1 		mov	r3, r3, asl #16
 1165 0940 2328A0E1 		mov	r2, r3, lsr #16
 1166 0944 10319FE5 		ldr	r3, .L79+36
 1167 0948 B630D3E1 		ldrh	r3, [r3, #6]
 1168 094c 033082E0 		add	r3, r2, r3
 1169 0950 0338A0E1 		mov	r3, r3, asl #16
 1170 0954 2328A0E1 		mov	r2, r3, lsr #16
 1171 0958 FC309FE5 		ldr	r3, .L79+36
 1172 095c 0C3093E5 		ldr	r3, [r3, #12]
 1173 0960 0338A0E1 		mov	r3, r3, asl #16
 1174 0964 2338A0E1 		mov	r3, r3, lsr #16
 1175 0968 033082E0 		add	r3, r2, r3
 1176 096c 0338A0E1 		mov	r3, r3, asl #16
 1177 0970 2328A0E1 		mov	r2, r3, lsr #16
 1178 0974 E0309FE5 		ldr	r3, .L79+36
 1179 0978 103093E5 		ldr	r3, [r3, #16]
 1180 097c 0338A0E1 		mov	r3, r3, asl #16
 1181 0980 2338A0E1 		mov	r3, r3, lsr #16
 1182 0984 033082E0 		add	r3, r2, r3
 1183 0988 0338A0E1 		mov	r3, r3, asl #16
 1184 098c 2328A0E1 		mov	r2, r3, lsr #16
 1185 0990 C4309FE5 		ldr	r3, .L79+36
 1186 0994 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1187 0998 033082E0 		add	r3, r2, r3
 1188 099c 0338A0E1 		mov	r3, r3, asl #16
 1189 09a0 2328A0E1 		mov	r2, r3, lsr #16
 1190 09a4 B0309FE5 		ldr	r3, .L79+36
 1191 09a8 B830D3E1 		ldrh	r3, [r3, #8]
 1192 09ac 033082E0 		add	r3, r2, r3
 1193 09b0 0338A0E1 		mov	r3, r3, asl #16
 1194 09b4 2328A0E1 		mov	r2, r3, lsr #16
 1195 09b8 9C309FE5 		ldr	r3, .L79+36
 1196 09bc 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1197 09c0 033082E0 		add	r3, r2, r3
 1198 09c4 0338A0E1 		mov	r3, r3, asl #16
 1199 09c8 2328A0E1 		mov	r2, r3, lsr #16
 1200 09cc 88309FE5 		ldr	r3, .L79+36
 1201 09d0 003093E5 		ldr	r3, [r3, #0]
 1202 09d4 0338A0E1 		mov	r3, r3, asl #16
 1203 09d8 2338A0E1 		mov	r3, r3, lsr #16
 1204 09dc 033082E0 		add	r3, r2, r3
 1205 09e0 0338A0E1 		mov	r3, r3, asl #16
 1206 09e4 2338A0E1 		mov	r3, r3, lsr #16
 1207 09e8 553C43E2 		sub	r3, r3, #21760
 1208 09ec 563043E2 		sub	r3, r3, #86
 1209 09f0 0338A0E1 		mov	r3, r3, asl #16
 1210 09f4 2338A0E1 		mov	r3, r3, lsr #16
 1211 09f8 0320A0E1 		mov	r2, r3
 1212 09fc 58309FE5 		ldr	r3, .L79+36
 1213 0a00 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 396:sdk.c         **** 									+ wpToLL.yaw
 397:sdk.c         **** 									+ wpToLL.height
 398:sdk.c         **** 									+ wpToLL.time
 399:sdk.c         **** 									+ wpToLL.X
 400:sdk.c         **** 									+ wpToLL.Y
 401:sdk.c         **** 									+ wpToLL.max_speed
 402:sdk.c         **** 									+ wpToLL.pos_acc
 403:sdk.c         **** 									+ wpToLL.properties
 404:sdk.c         **** 									+ wpToLL.wp_activated;
 405:sdk.c         **** 
 406:sdk.c         **** 			//send waypoint
 407:sdk.c         **** 			wpCtrlAckTrigger=0;
 1215              	.LM86:
 1216 0a04 44209FE5 		ldr	r2, .L79+24
 1217 0a08 0030A0E3 		mov	r3, #0
 1218 0a0c 0030C2E5 		strb	r3, [r2, #0]
 408:sdk.c         **** 			wpCtrlWpCmd=WP_CMD_SINGLE_WP;
 1220              	.LM87:
 1221 0a10 28209FE5 		ldr	r2, .L79+8
 1222 0a14 0130A0E3 		mov	r3, #1
 1223 0a18 0030C2E5 		strb	r3, [r2, #0]
 409:sdk.c         **** 			wpCtrlWpCmdUpdated=1;
 1225              	.LM88:
 1226 0a1c 28209FE5 		ldr	r2, .L79+20
 1227 0a20 0130A0E3 		mov	r3, #1
 1228 0a24 0030C2E5 		strb	r3, [r2, #0]
 410:sdk.c         **** 
 411:sdk.c         **** 			wpExampleState=2;
 1230              	.LM89:
 1231 0a28 18209FE5 		ldr	r2, .L79+16
 1232 0a2c 0230A0E3 		mov	r3, #2
 1233 0a30 0030C2E5 		strb	r3, [r2, #0]
 412:sdk.c         **** 
 413:sdk.c         **** 		}
 414:sdk.c         **** 		break;
 1235              	.LM90:
 1236 0a34 1B0200EA 		b	.L78
 1237              	.L80:
 1238              		.align	2
 1239              	.L79:
 1240 0a38 00000000 		.word	WO_SDK
 1241 0a3c 00000000 		.word	GPS_Data
 1242 0a40 00000000 		.word	wpCtrlWpCmd
 1243 0a44 00000000 		.word	RO_RC_Data
 1244 0a48 E8020000 		.word	wpExampleState.2232
 1245 0a4c 00000000 		.word	wpCtrlWpCmdUpdated
 1246 0a50 00000000 		.word	wpCtrlAckTrigger
 1247 0a54 00000000 		.word	wpCtrlNavStatus
 1248 0a58 00000000 		.word	IMU_CalcData
 1249 0a5c 00000000 		.word	wpToLL
 1250 0a60 E0020000 		.word	originLat.2233
 1251 0a64 D8020000 		.word	originLon.2234
 1252 0a68 D0126341 		.word	1097011920
 1253 0a6c 00000000 		.word	0
 1254              	.L45:
 1255              	.LBE2:
 415:sdk.c         **** 
 416:sdk.c         **** 		case 2:
 417:sdk.c         **** 			//wait until cmd is processed and sent to LL processor
 418:sdk.c         **** 			if ((wpCtrlWpCmdUpdated==0) && (wpCtrlAckTrigger))
 1257              	.LM91:
 1258 0a70 2C301FE5 		ldr	r3, .L79+20
 1259 0a74 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1260 0a78 000053E3 		cmp	r3, #0
 1261 0a7c A300001A 		bne	.L54
 1262 0a80 38301FE5 		ldr	r3, .L79+24
 1263 0a84 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1264 0a88 000053E3 		cmp	r3, #0
 1265 0a8c 9F00000A 		beq	.L54
 419:sdk.c         **** 			{
 420:sdk.c         **** 				//check if waypoint was reached and wait time is over
 421:sdk.c         **** 				if (wpCtrlNavStatus&(WP_NAVSTAT_REACHED_POS_TIME))
 1267              	.LM92:
 1268 0a90 44301FE5 		ldr	r3, .L79+28
 1269 0a94 B030D3E1 		ldrh	r3, [r3, #0]
 1270 0a98 023003E2 		and	r3, r3, #2
 1271 0a9c 000053E3 		cmp	r3, #0
 1272 0aa0 9200000A 		beq	.L57
 1273              	.LBB3:
 422:sdk.c         **** 				{
 423:sdk.c         **** 					//new waypoint
 424:sdk.c         **** 					double lat,lon;
 425:sdk.c         **** 
 426:sdk.c         **** 					//fill waypoint structure
 427:sdk.c         **** 					wpToLL.max_speed=100;
 1275              	.LM93:
 1276 0aa4 50201FE5 		ldr	r2, .L79+36
 1277 0aa8 6430A0E3 		mov	r3, #100
 1278 0aac 0530C2E5 		strb	r3, [r2, #5]
 428:sdk.c         **** 					wpToLL.pos_acc=3000; //3m accuracy
 1280              	.LM94:
 1281 0ab0 5C201FE5 		ldr	r2, .L79+36
 1282 0ab4 BB3EA0E3 		mov	r3, #2992
 1283 0ab8 083083E2 		add	r3, r3, #8
 1284 0abc B830C2E1 		strh	r3, [r2, #8]	@ movhi
 429:sdk.c         **** 					wpToLL.time=400; //4 seconds wait time
 1286              	.LM95:
 1287 0ac0 6C201FE5 		ldr	r2, .L79+36
 1288 0ac4 193EA0E3 		mov	r3, #400
 1289 0ac8 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 430:sdk.c         **** 					wpToLL.wp_activated=1;
 1291              	.LM96:
 1292 0acc 78201FE5 		ldr	r2, .L79+36
 1293 0ad0 0130A0E3 		mov	r3, #1
 1294 0ad4 003082E5 		str	r3, [r2, #0]
 431:sdk.c         **** 
 432:sdk.c         **** 					//see LL_HL_comm.h for WPPROP defines
 433:sdk.c         **** 					wpToLL.properties=WPPROP_ABSCOORDS|WPPROP_AUTOMATICGOTO|WPPROP_HEIGHTENABLED|WPPROP_YAWENABLED
 1296              	.LM97:
 1297 0ad8 84201FE5 		ldr	r2, .L79+36
 1298 0adc 1730A0E3 		mov	r3, #23
 1299 0ae0 0430C2E5 		strb	r3, [r2, #4]
 434:sdk.c         **** 
 435:sdk.c         **** 					//use current height and yaw
 436:sdk.c         **** 					wpToLL.yaw=IMU_CalcData.angle_yaw; //use current yaw
 1301              	.LM98:
 1302 0ae4 94301FE5 		ldr	r3, .L79+32
 1303 0ae8 082093E5 		ldr	r2, [r3, #8]
 1304 0aec 98301FE5 		ldr	r3, .L79+36
 1305 0af0 142083E5 		str	r2, [r3, #20]
 437:sdk.c         **** 					wpToLL.height=IMU_CalcData.height; //use current height
 1307              	.LM99:
 1308 0af4 A4301FE5 		ldr	r3, .L79+32
 1309 0af8 4C2093E5 		ldr	r2, [r3, #76]
 1310 0afc A8301FE5 		ldr	r3, .L79+36
 1311 0b00 182083E5 		str	r2, [r3, #24]
 438:sdk.c         **** 
 439:sdk.c         **** 					//calculate a position 15m north and 15m east of origin
 440:sdk.c         **** 					xy2latlon(originLat,originLon,15.0,15.0,&lat,&lon);
 1313              	.LM100:
 1314 0b04 AC301FE5 		ldr	r3, .L79+40
 1315 0b08 060093E8 		ldmia	r3, {r1-r2}
 1316 0b0c B0301FE5 		ldr	r3, .L79+44
 1317 0b10 600093E8 		ldmia	r3, {r5-r6}
 1318 0b14 0131A0E3 		mov	r3, #1073741824
 1319 0b18 2E3883E2 		add	r3, r3, #3014656
 1320 0b1c 0040A0E3 		mov	r4, #0
 1321 0b20 18008DE8 		stmia	sp, {r3-r4}
 1322 0b24 0131A0E3 		mov	r3, #1073741824
 1323 0b28 2E3883E2 		add	r3, r3, #3014656
 1324 0b2c 0040A0E3 		mov	r4, #0
 1325 0b30 08308DE5 		str	r3, [sp, #8]
 1326 0b34 0C408DE5 		str	r4, [sp, #12]
 1327 0b38 30304BE2 		sub	r3, fp, #48
 1328 0b3c 10308DE5 		str	r3, [sp, #16]
 1329 0b40 38304BE2 		sub	r3, fp, #56
 1330 0b44 14308DE5 		str	r3, [sp, #20]
 1331 0b48 0100A0E1 		mov	r0, r1
 1332 0b4c 0210A0E1 		mov	r1, r2
 1333 0b50 0520A0E1 		mov	r2, r5
 1334 0b54 0630A0E1 		mov	r3, r6
 1335 0b58 FEFFFFEB 		bl	xy2latlon
 441:sdk.c         **** 
 442:sdk.c         **** 					wpToLL.X=lon*10000000;
 1337              	.LM101:
 1338 0b5c 38304BE2 		sub	r3, fp, #56
 1339 0b60 180093E8 		ldmia	r3, {r3-r4}
 1340 0b64 0300A0E1 		mov	r0, r3
 1341 0b68 0410A0E1 		mov	r1, r4
 1342 0b6c 432F4FE2 		adr	r2, .L79+48
 1343 0b70 0C0092E8 		ldmia	r2, {r2-r3}
 1344 0b74 FEFFFFEB 		bl	__muldf3
 1345 0b78 0030A0E1 		mov	r3, r0
 1346 0b7c 0140A0E1 		mov	r4, r1
 1347 0b80 0300A0E1 		mov	r0, r3
 1348 0b84 0410A0E1 		mov	r1, r4
 1349 0b88 FEFFFFEB 		bl	__fixdfsi
 1350 0b8c 0020A0E1 		mov	r2, r0
 1351 0b90 3C311FE5 		ldr	r3, .L79+36
 1352 0b94 0C2083E5 		str	r2, [r3, #12]
 443:sdk.c         **** 					wpToLL.Y=lat*10000000;
 1354              	.LM102:
 1355 0b98 30304BE2 		sub	r3, fp, #48
 1356 0b9c 180093E8 		ldmia	r3, {r3-r4}
 1357 0ba0 0300A0E1 		mov	r0, r3
 1358 0ba4 0410A0E1 		mov	r1, r4
 1359 0ba8 522F4FE2 		adr	r2, .L79+48
 1360 0bac 0C0092E8 		ldmia	r2, {r2-r3}
 1361 0bb0 FEFFFFEB 		bl	__muldf3
 1362 0bb4 0030A0E1 		mov	r3, r0
 1363 0bb8 0140A0E1 		mov	r4, r1
 1364 0bbc 0300A0E1 		mov	r0, r3
 1365 0bc0 0410A0E1 		mov	r1, r4
 1366 0bc4 FEFFFFEB 		bl	__fixdfsi
 1367 0bc8 0020A0E1 		mov	r2, r0
 1368 0bcc 78311FE5 		ldr	r3, .L79+36
 1369 0bd0 102083E5 		str	r2, [r3, #16]
 444:sdk.c         **** 
 445:sdk.c         **** 					//calc chksum
 446:sdk.c         **** 					wpToLL.chksum = 0xAAAA
 1371              	.LM103:
 1372 0bd4 80311FE5 		ldr	r3, .L79+36
 1373 0bd8 143093E5 		ldr	r3, [r3, #20]
 1374 0bdc 0338A0E1 		mov	r3, r3, asl #16
 1375 0be0 2328A0E1 		mov	r2, r3, lsr #16
 1376 0be4 90311FE5 		ldr	r3, .L79+36
 1377 0be8 183093E5 		ldr	r3, [r3, #24]
 1378 0bec 0338A0E1 		mov	r3, r3, asl #16
 1379 0bf0 2338A0E1 		mov	r3, r3, lsr #16
 1380 0bf4 033082E0 		add	r3, r2, r3
 1381 0bf8 0338A0E1 		mov	r3, r3, asl #16
 1382 0bfc 2328A0E1 		mov	r2, r3, lsr #16
 1383 0c00 AC311FE5 		ldr	r3, .L79+36
 1384 0c04 B630D3E1 		ldrh	r3, [r3, #6]
 1385 0c08 033082E0 		add	r3, r2, r3
 1386 0c0c 0338A0E1 		mov	r3, r3, asl #16
 1387 0c10 2328A0E1 		mov	r2, r3, lsr #16
 1388 0c14 C0311FE5 		ldr	r3, .L79+36
 1389 0c18 0C3093E5 		ldr	r3, [r3, #12]
 1390 0c1c 0338A0E1 		mov	r3, r3, asl #16
 1391 0c20 2338A0E1 		mov	r3, r3, lsr #16
 1392 0c24 033082E0 		add	r3, r2, r3
 1393 0c28 0338A0E1 		mov	r3, r3, asl #16
 1394 0c2c 2328A0E1 		mov	r2, r3, lsr #16
 1395 0c30 DC311FE5 		ldr	r3, .L79+36
 1396 0c34 103093E5 		ldr	r3, [r3, #16]
 1397 0c38 0338A0E1 		mov	r3, r3, asl #16
 1398 0c3c 2338A0E1 		mov	r3, r3, lsr #16
 1399 0c40 033082E0 		add	r3, r2, r3
 1400 0c44 0338A0E1 		mov	r3, r3, asl #16
 1401 0c48 2328A0E1 		mov	r2, r3, lsr #16
 1402 0c4c F8311FE5 		ldr	r3, .L79+36
 1403 0c50 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1404 0c54 033082E0 		add	r3, r2, r3
 1405 0c58 0338A0E1 		mov	r3, r3, asl #16
 1406 0c5c 2328A0E1 		mov	r2, r3, lsr #16
 1407 0c60 0C321FE5 		ldr	r3, .L79+36
 1408 0c64 B830D3E1 		ldrh	r3, [r3, #8]
 1409 0c68 033082E0 		add	r3, r2, r3
 1410 0c6c 0338A0E1 		mov	r3, r3, asl #16
 1411 0c70 2328A0E1 		mov	r2, r3, lsr #16
 1412 0c74 20321FE5 		ldr	r3, .L79+36
 1413 0c78 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1414 0c7c 033082E0 		add	r3, r2, r3
 1415 0c80 0338A0E1 		mov	r3, r3, asl #16
 1416 0c84 2328A0E1 		mov	r2, r3, lsr #16
 1417 0c88 34321FE5 		ldr	r3, .L79+36
 1418 0c8c 003093E5 		ldr	r3, [r3, #0]
 1419 0c90 0338A0E1 		mov	r3, r3, asl #16
 1420 0c94 2338A0E1 		mov	r3, r3, lsr #16
 1421 0c98 033082E0 		add	r3, r2, r3
 1422 0c9c 0338A0E1 		mov	r3, r3, asl #16
 1423 0ca0 2338A0E1 		mov	r3, r3, lsr #16
 1424 0ca4 553C43E2 		sub	r3, r3, #21760
 1425 0ca8 563043E2 		sub	r3, r3, #86
 1426 0cac 0338A0E1 		mov	r3, r3, asl #16
 1427 0cb0 2338A0E1 		mov	r3, r3, lsr #16
 1428 0cb4 0320A0E1 		mov	r2, r3
 1429 0cb8 64321FE5 		ldr	r3, .L79+36
 1430 0cbc BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 447:sdk.c         **** 											+ wpToLL.yaw
 448:sdk.c         **** 											+ wpToLL.height
 449:sdk.c         **** 											+ wpToLL.time
 450:sdk.c         **** 											+ wpToLL.X
 451:sdk.c         **** 											+ wpToLL.Y
 452:sdk.c         **** 											+ wpToLL.max_speed
 453:sdk.c         **** 											+ wpToLL.pos_acc
 454:sdk.c         **** 											+ wpToLL.properties
 455:sdk.c         **** 											+ wpToLL.wp_activated;
 456:sdk.c         **** 					//send waypoint
 457:sdk.c         **** 					wpCtrlAckTrigger=0;
 1432              	.LM104:
 1433 0cc0 78221FE5 		ldr	r2, .L79+24
 1434 0cc4 0030A0E3 		mov	r3, #0
 1435 0cc8 0030C2E5 		strb	r3, [r2, #0]
 458:sdk.c         **** 					wpCtrlWpCmd=WP_CMD_SINGLE_WP;
 1437              	.LM105:
 1438 0ccc 94221FE5 		ldr	r2, .L79+8
 1439 0cd0 0130A0E3 		mov	r3, #1
 1440 0cd4 0030C2E5 		strb	r3, [r2, #0]
 459:sdk.c         **** 					wpCtrlWpCmdUpdated=1;
 1442              	.LM106:
 1443 0cd8 94221FE5 		ldr	r2, .L79+20
 1444 0cdc 0130A0E3 		mov	r3, #1
 1445 0ce0 0030C2E5 		strb	r3, [r2, #0]
 460:sdk.c         **** 
 461:sdk.c         **** 					wpExampleState=3;
 1447              	.LM107:
 1448 0ce4 A4221FE5 		ldr	r2, .L79+16
 1449 0ce8 0330A0E3 		mov	r3, #3
 1450 0cec 0030C2E5 		strb	r3, [r2, #0]
 1451              	.L57:
 1452              	.LBE3:
 462:sdk.c         **** 				}
 463:sdk.c         **** 
 464:sdk.c         **** 				if (wpCtrlNavStatus&WP_NAVSTAT_PILOT_ABORT)
 1454              	.LM108:
 1455 0cf0 A4321FE5 		ldr	r3, .L79+28
 1456 0cf4 B030D3E1 		ldrh	r3, [r3, #0]
 1457 0cf8 083003E2 		and	r3, r3, #8
 1458 0cfc 000053E3 		cmp	r3, #0
 1459 0d00 0200000A 		beq	.L54
 465:sdk.c         **** 					wpExampleState=0;
 1461              	.LM109:
 1462 0d04 C4321FE5 		ldr	r3, .L79+16
 1463 0d08 0020A0E3 		mov	r2, #0
 1464 0d0c 0020C3E5 		strb	r2, [r3, #0]
 1465              	.L54:
 466:sdk.c         **** 
 467:sdk.c         **** 
 468:sdk.c         **** 			}
 469:sdk.c         **** 			if (RO_RC_Data.channel[6]<1600)
 1467              	.LM110:
 1468 0d10 D4321FE5 		ldr	r3, .L79+12
 1469 0d14 BC20D3E1 		ldrh	r2, [r3, #12]
 1470 0d18 633EA0E3 		mov	r3, #1584
 1471 0d1c 0F3083E2 		add	r3, r3, #15
 1472 0d20 030052E1 		cmp	r2, r3
 1473 0d24 5F01008A 		bhi	.L78
 470:sdk.c         **** 						wpExampleState=0;
 1475              	.LM111:
 1476 0d28 E8321FE5 		ldr	r3, .L79+16
 1477 0d2c 0020A0E3 		mov	r2, #0
 1478 0d30 0020C3E5 		strb	r2, [r3, #0]
 471:sdk.c         **** 		break;
 1480              	.LM112:
 1481 0d34 5B0100EA 		b	.L78
 1482              	.L46:
 472:sdk.c         **** 
 473:sdk.c         **** 		case 3:
 474:sdk.c         **** 			//wait until cmd is processed and sent to LL processor
 475:sdk.c         **** 			if ((wpCtrlWpCmdUpdated==0) && (wpCtrlAckTrigger))
 1484              	.LM113:
 1485 0d38 F4321FE5 		ldr	r3, .L79+20
 1486 0d3c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1487 0d40 000053E3 		cmp	r3, #0
 1488 0d44 A200001A 		bne	.L62
 1489 0d48 00331FE5 		ldr	r3, .L79+24
 1490 0d4c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1491 0d50 000053E3 		cmp	r3, #0
 1492 0d54 9E00000A 		beq	.L62
 476:sdk.c         **** 			{
 477:sdk.c         **** 				//check if waypoint was reached and wait time is over
 478:sdk.c         **** 				if (wpCtrlNavStatus&(WP_NAVSTAT_REACHED_POS_TIME))
 1494              	.LM114:
 1495 0d58 0C331FE5 		ldr	r3, .L79+28
 1496 0d5c B030D3E1 		ldrh	r3, [r3, #0]
 1497 0d60 023003E2 		and	r3, r3, #2
 1498 0d64 000053E3 		cmp	r3, #0
 1499 0d68 9100000A 		beq	.L65
 1500              	.LBB4:
 479:sdk.c         **** 				{
 480:sdk.c         **** 					//new waypoint
 481:sdk.c         **** 					double lat,lon;
 482:sdk.c         **** 
 483:sdk.c         **** 					//fill waypoint structure
 484:sdk.c         **** 					wpToLL.max_speed=100;
 1502              	.LM115:
 1503 0d6c 18231FE5 		ldr	r2, .L79+36
 1504 0d70 6430A0E3 		mov	r3, #100
 1505 0d74 0530C2E5 		strb	r3, [r2, #5]
 485:sdk.c         **** 					wpToLL.pos_acc=3000; //3m accuracy
 1507              	.LM116:
 1508 0d78 24231FE5 		ldr	r2, .L79+36
 1509 0d7c BB3EA0E3 		mov	r3, #2992
 1510 0d80 083083E2 		add	r3, r3, #8
 1511 0d84 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 486:sdk.c         **** 					wpToLL.time=400; //4 seconds wait time
 1513              	.LM117:
 1514 0d88 34231FE5 		ldr	r2, .L79+36
 1515 0d8c 193EA0E3 		mov	r3, #400
 1516 0d90 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 487:sdk.c         **** 					wpToLL.wp_activated=1;
 1518              	.LM118:
 1519 0d94 40231FE5 		ldr	r2, .L79+36
 1520 0d98 0130A0E3 		mov	r3, #1
 1521 0d9c 003082E5 		str	r3, [r2, #0]
 488:sdk.c         **** 
 489:sdk.c         **** 					//see LL_HL_comm.h for WPPROP defines
 490:sdk.c         **** 					wpToLL.properties=WPPROP_ABSCOORDS|WPPROP_AUTOMATICGOTO|WPPROP_HEIGHTENABLED|WPPROP_YAWENABLED
 1523              	.LM119:
 1524 0da0 4C231FE5 		ldr	r2, .L79+36
 1525 0da4 1730A0E3 		mov	r3, #23
 1526 0da8 0430C2E5 		strb	r3, [r2, #4]
 491:sdk.c         **** 
 492:sdk.c         **** 					//use current height and yaw
 493:sdk.c         **** 					wpToLL.yaw=IMU_CalcData.angle_yaw; //use current yaw
 1528              	.LM120:
 1529 0dac 5C331FE5 		ldr	r3, .L79+32
 1530 0db0 082093E5 		ldr	r2, [r3, #8]
 1531 0db4 60331FE5 		ldr	r3, .L79+36
 1532 0db8 142083E5 		str	r2, [r3, #20]
 494:sdk.c         **** 					wpToLL.height=IMU_CalcData.height; //use current height
 1534              	.LM121:
 1535 0dbc 6C331FE5 		ldr	r3, .L79+32
 1536 0dc0 4C2093E5 		ldr	r2, [r3, #76]
 1537 0dc4 70331FE5 		ldr	r3, .L79+36
 1538 0dc8 182083E5 		str	r2, [r3, #24]
 495:sdk.c         **** 
 496:sdk.c         **** 					//calculate a position 15m east of origin
 497:sdk.c         **** 					xy2latlon(originLat,originLon,15.0,0.0,&lat,&lon);
 1540              	.LM122:
 1541 0dcc 74331FE5 		ldr	r3, .L79+40
 1542 0dd0 060093E8 		ldmia	r3, {r1-r2}
 1543 0dd4 78331FE5 		ldr	r3, .L79+44
 1544 0dd8 600093E8 		ldmia	r3, {r5-r6}
 1545 0ddc 0131A0E3 		mov	r3, #1073741824
 1546 0de0 2E3883E2 		add	r3, r3, #3014656
 1547 0de4 0040A0E3 		mov	r4, #0
 1548 0de8 18008DE8 		stmia	sp, {r3-r4}
 1549 0dec 0030A0E3 		mov	r3, #0
 1550 0df0 0040A0E3 		mov	r4, #0
 1551 0df4 08308DE5 		str	r3, [sp, #8]
 1552 0df8 0C408DE5 		str	r4, [sp, #12]
 1553 0dfc 40304BE2 		sub	r3, fp, #64
 1554 0e00 10308DE5 		str	r3, [sp, #16]
 1555 0e04 48304BE2 		sub	r3, fp, #72
 1556 0e08 14308DE5 		str	r3, [sp, #20]
 1557 0e0c 0100A0E1 		mov	r0, r1
 1558 0e10 0210A0E1 		mov	r1, r2
 1559 0e14 0520A0E1 		mov	r2, r5
 1560 0e18 0630A0E1 		mov	r3, r6
 1561 0e1c FEFFFFEB 		bl	xy2latlon
 498:sdk.c         **** 
 499:sdk.c         **** 					wpToLL.X=lon*10000000;
 1563              	.LM123:
 1564 0e20 48304BE2 		sub	r3, fp, #72
 1565 0e24 180093E8 		ldmia	r3, {r3-r4}
 1566 0e28 0300A0E1 		mov	r0, r3
 1567 0e2c 0410A0E1 		mov	r1, r4
 1568 0e30 7B2F8FE2 		adr	r2, .L81+40
 1569 0e34 0C0092E8 		ldmia	r2, {r2-r3}
 1570 0e38 FEFFFFEB 		bl	__muldf3
 1571 0e3c 0030A0E1 		mov	r3, r0
 1572 0e40 0140A0E1 		mov	r4, r1
 1573 0e44 0300A0E1 		mov	r0, r3
 1574 0e48 0410A0E1 		mov	r1, r4
 1575 0e4c FEFFFFEB 		bl	__fixdfsi
 1576 0e50 0020A0E1 		mov	r2, r0
 1577 0e54 AC319FE5 		ldr	r3, .L81+12
 1578 0e58 0C2083E5 		str	r2, [r3, #12]
 500:sdk.c         **** 					wpToLL.Y=lat*10000000;
 1580              	.LM124:
 1581 0e5c 40304BE2 		sub	r3, fp, #64
 1582 0e60 180093E8 		ldmia	r3, {r3-r4}
 1583 0e64 0300A0E1 		mov	r0, r3
 1584 0e68 0410A0E1 		mov	r1, r4
 1585 0e6c 1B2E8FE2 		adr	r2, .L81+40
 1586 0e70 0C0092E8 		ldmia	r2, {r2-r3}
 1587 0e74 FEFFFFEB 		bl	__muldf3
 1588 0e78 0030A0E1 		mov	r3, r0
 1589 0e7c 0140A0E1 		mov	r4, r1
 1590 0e80 0300A0E1 		mov	r0, r3
 1591 0e84 0410A0E1 		mov	r1, r4
 1592 0e88 FEFFFFEB 		bl	__fixdfsi
 1593 0e8c 0020A0E1 		mov	r2, r0
 1594 0e90 70319FE5 		ldr	r3, .L81+12
 1595 0e94 102083E5 		str	r2, [r3, #16]
 501:sdk.c         **** 
 502:sdk.c         **** 					//calc chksum
 503:sdk.c         **** 					wpToLL.chksum = 0xAAAA
 1597              	.LM125:
 1598 0e98 68319FE5 		ldr	r3, .L81+12
 1599 0e9c 143093E5 		ldr	r3, [r3, #20]
 1600 0ea0 0338A0E1 		mov	r3, r3, asl #16
 1601 0ea4 2328A0E1 		mov	r2, r3, lsr #16
 1602 0ea8 58319FE5 		ldr	r3, .L81+12
 1603 0eac 183093E5 		ldr	r3, [r3, #24]
 1604 0eb0 0338A0E1 		mov	r3, r3, asl #16
 1605 0eb4 2338A0E1 		mov	r3, r3, lsr #16
 1606 0eb8 033082E0 		add	r3, r2, r3
 1607 0ebc 0338A0E1 		mov	r3, r3, asl #16
 1608 0ec0 2328A0E1 		mov	r2, r3, lsr #16
 1609 0ec4 3C319FE5 		ldr	r3, .L81+12
 1610 0ec8 B630D3E1 		ldrh	r3, [r3, #6]
 1611 0ecc 033082E0 		add	r3, r2, r3
 1612 0ed0 0338A0E1 		mov	r3, r3, asl #16
 1613 0ed4 2328A0E1 		mov	r2, r3, lsr #16
 1614 0ed8 28319FE5 		ldr	r3, .L81+12
 1615 0edc 0C3093E5 		ldr	r3, [r3, #12]
 1616 0ee0 0338A0E1 		mov	r3, r3, asl #16
 1617 0ee4 2338A0E1 		mov	r3, r3, lsr #16
 1618 0ee8 033082E0 		add	r3, r2, r3
 1619 0eec 0338A0E1 		mov	r3, r3, asl #16
 1620 0ef0 2328A0E1 		mov	r2, r3, lsr #16
 1621 0ef4 0C319FE5 		ldr	r3, .L81+12
 1622 0ef8 103093E5 		ldr	r3, [r3, #16]
 1623 0efc 0338A0E1 		mov	r3, r3, asl #16
 1624 0f00 2338A0E1 		mov	r3, r3, lsr #16
 1625 0f04 033082E0 		add	r3, r2, r3
 1626 0f08 0338A0E1 		mov	r3, r3, asl #16
 1627 0f0c 2328A0E1 		mov	r2, r3, lsr #16
 1628 0f10 F0309FE5 		ldr	r3, .L81+12
 1629 0f14 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1630 0f18 033082E0 		add	r3, r2, r3
 1631 0f1c 0338A0E1 		mov	r3, r3, asl #16
 1632 0f20 2328A0E1 		mov	r2, r3, lsr #16
 1633 0f24 DC309FE5 		ldr	r3, .L81+12
 1634 0f28 B830D3E1 		ldrh	r3, [r3, #8]
 1635 0f2c 033082E0 		add	r3, r2, r3
 1636 0f30 0338A0E1 		mov	r3, r3, asl #16
 1637 0f34 2328A0E1 		mov	r2, r3, lsr #16
 1638 0f38 C8309FE5 		ldr	r3, .L81+12
 1639 0f3c 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1640 0f40 033082E0 		add	r3, r2, r3
 1641 0f44 0338A0E1 		mov	r3, r3, asl #16
 1642 0f48 2328A0E1 		mov	r2, r3, lsr #16
 1643 0f4c B4309FE5 		ldr	r3, .L81+12
 1644 0f50 003093E5 		ldr	r3, [r3, #0]
 1645 0f54 0338A0E1 		mov	r3, r3, asl #16
 1646 0f58 2338A0E1 		mov	r3, r3, lsr #16
 1647 0f5c 033082E0 		add	r3, r2, r3
 1648 0f60 0338A0E1 		mov	r3, r3, asl #16
 1649 0f64 2338A0E1 		mov	r3, r3, lsr #16
 1650 0f68 553C43E2 		sub	r3, r3, #21760
 1651 0f6c 563043E2 		sub	r3, r3, #86
 1652 0f70 0338A0E1 		mov	r3, r3, asl #16
 1653 0f74 2338A0E1 		mov	r3, r3, lsr #16
 1654 0f78 0320A0E1 		mov	r2, r3
 1655 0f7c 84309FE5 		ldr	r3, .L81+12
 1656 0f80 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 504:sdk.c         **** 											+ wpToLL.yaw
 505:sdk.c         **** 											+ wpToLL.height
 506:sdk.c         **** 											+ wpToLL.time
 507:sdk.c         **** 											+ wpToLL.X
 508:sdk.c         **** 											+ wpToLL.Y
 509:sdk.c         **** 											+ wpToLL.max_speed
 510:sdk.c         **** 											+ wpToLL.pos_acc
 511:sdk.c         **** 											+ wpToLL.properties
 512:sdk.c         **** 											+ wpToLL.wp_activated;
 513:sdk.c         **** 
 514:sdk.c         **** 					//send waypoint
 515:sdk.c         **** 					wpCtrlAckTrigger=0;
 1658              	.LM126:
 1659 0f84 80209FE5 		ldr	r2, .L81+16
 1660 0f88 0030A0E3 		mov	r3, #0
 1661 0f8c 0030C2E5 		strb	r3, [r2, #0]
 516:sdk.c         **** 					wpCtrlWpCmd=WP_CMD_SINGLE_WP;
 1663              	.LM127:
 1664 0f90 78209FE5 		ldr	r2, .L81+20
 1665 0f94 0130A0E3 		mov	r3, #1
 1666 0f98 0030C2E5 		strb	r3, [r2, #0]
 517:sdk.c         **** 					wpCtrlWpCmdUpdated=1;
 1668              	.LM128:
 1669 0f9c 70209FE5 		ldr	r2, .L81+24
 1670 0fa0 0130A0E3 		mov	r3, #1
 1671 0fa4 0030C2E5 		strb	r3, [r2, #0]
 518:sdk.c         **** 
 519:sdk.c         **** 					wpExampleState=4;
 1673              	.LM129:
 1674 0fa8 70209FE5 		ldr	r2, .L81+36
 1675 0fac 0430A0E3 		mov	r3, #4
 1676 0fb0 0030C2E5 		strb	r3, [r2, #0]
 1677              	.L65:
 1678              	.LBE4:
 520:sdk.c         **** 				}
 521:sdk.c         **** 
 522:sdk.c         **** 				if (wpCtrlNavStatus&WP_NAVSTAT_PILOT_ABORT)
 1680              	.LM130:
 1681 0fb4 5C309FE5 		ldr	r3, .L81+28
 1682 0fb8 B030D3E1 		ldrh	r3, [r3, #0]
 1683 0fbc 083003E2 		and	r3, r3, #8
 1684 0fc0 000053E3 		cmp	r3, #0
 1685 0fc4 0200000A 		beq	.L62
 523:sdk.c         **** 					wpExampleState=0;
 1687              	.LM131:
 1688 0fc8 50309FE5 		ldr	r3, .L81+36
 1689 0fcc 0020A0E3 		mov	r2, #0
 1690 0fd0 0020C3E5 		strb	r2, [r3, #0]
 1691              	.L62:
 524:sdk.c         **** 
 525:sdk.c         **** 
 526:sdk.c         **** 			}
 527:sdk.c         **** 			if (RO_RC_Data.channel[6]<1600)
 1693              	.LM132:
 1694 0fd4 40309FE5 		ldr	r3, .L81+32
 1695 0fd8 BC20D3E1 		ldrh	r2, [r3, #12]
 1696 0fdc 633EA0E3 		mov	r3, #1584
 1697 0fe0 0F3083E2 		add	r3, r3, #15
 1698 0fe4 030052E1 		cmp	r2, r3
 1699 0fe8 AE00008A 		bhi	.L78
 528:sdk.c         **** 						wpExampleState=0;
 1701              	.LM133:
 1702 0fec 2C309FE5 		ldr	r3, .L81+36
 1703 0ff0 0020A0E3 		mov	r2, #0
 1704 0ff4 0020C3E5 		strb	r2, [r3, #0]
 529:sdk.c         **** 		break;
 1706              	.LM134:
 1707 0ff8 AA0000EA 		b	.L78
 1708              	.L82:
 1709              		.align	2
 1710              	.L81:
 1711 0ffc 00000000 		.word	IMU_CalcData
 1712 1000 D8020000 		.word	originLon.2234
 1713 1004 E0020000 		.word	originLat.2233
 1714 1008 00000000 		.word	wpToLL
 1715 100c 00000000 		.word	wpCtrlAckTrigger
 1716 1010 00000000 		.word	wpCtrlWpCmd
 1717 1014 00000000 		.word	wpCtrlWpCmdUpdated
 1718 1018 00000000 		.word	wpCtrlNavStatus
 1719 101c 00000000 		.word	RO_RC_Data
 1720 1020 E8020000 		.word	wpExampleState.2232
 1721 1024 D0126341 		.word	1097011920
 1722 1028 00000000 		.word	0
 1723              	.L47:
 530:sdk.c         **** 
 531:sdk.c         **** 		case 4:
 532:sdk.c         **** 			//wait until cmd is processed and sent to LL processor
 533:sdk.c         **** 			if ((wpCtrlWpCmdUpdated==0) && (wpCtrlAckTrigger))
 1725              	.LM135:
 1726 102c 20301FE5 		ldr	r3, .L81+24
 1727 1030 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1728 1034 000053E3 		cmp	r3, #0
 1729 1038 8D00001A 		bne	.L70
 1730 103c 38301FE5 		ldr	r3, .L81+16
 1731 1040 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1732 1044 000053E3 		cmp	r3, #0
 1733 1048 8900000A 		beq	.L70
 534:sdk.c         **** 			{
 535:sdk.c         **** 				//check if waypoint was reached and wait time is over
 536:sdk.c         **** 				if (wpCtrlNavStatus&(WP_NAVSTAT_REACHED_POS_TIME))
 1735              	.LM136:
 1736 104c 3C301FE5 		ldr	r3, .L81+28
 1737 1050 B030D3E1 		ldrh	r3, [r3, #0]
 1738 1054 023003E2 		and	r3, r3, #2
 1739 1058 000053E3 		cmp	r3, #0
 1740 105c 7C00000A 		beq	.L73
 537:sdk.c         **** 				{
 538:sdk.c         **** 
 539:sdk.c         **** 					//fill waypoint structure
 540:sdk.c         **** 					wpToLL.max_speed=100;
 1742              	.LM137:
 1743 1060 60201FE5 		ldr	r2, .L81+12
 1744 1064 6430A0E3 		mov	r3, #100
 1745 1068 0530C2E5 		strb	r3, [r2, #5]
 541:sdk.c         **** 					wpToLL.pos_acc=3000; //3m accuracy
 1747              	.LM138:
 1748 106c 6C201FE5 		ldr	r2, .L81+12
 1749 1070 BB3EA0E3 		mov	r3, #2992
 1750 1074 083083E2 		add	r3, r3, #8
 1751 1078 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 542:sdk.c         **** 					wpToLL.time=400; //4 seconds wait time
 1753              	.LM139:
 1754 107c 7C201FE5 		ldr	r2, .L81+12
 1755 1080 193EA0E3 		mov	r3, #400
 1756 1084 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 543:sdk.c         **** 					wpToLL.wp_activated=1;
 1758              	.LM140:
 1759 1088 88201FE5 		ldr	r2, .L81+12
 1760 108c 0130A0E3 		mov	r3, #1
 1761 1090 003082E5 		str	r3, [r2, #0]
 544:sdk.c         **** 
 545:sdk.c         **** 					//see LL_HL_comm.h for WPPROP defines
 546:sdk.c         **** 					wpToLL.properties=WPPROP_ABSCOORDS|WPPROP_AUTOMATICGOTO|WPPROP_HEIGHTENABLED|WPPROP_YAWENABLED
 1763              	.LM141:
 1764 1094 94201FE5 		ldr	r2, .L81+12
 1765 1098 1730A0E3 		mov	r3, #23
 1766 109c 0430C2E5 		strb	r3, [r2, #4]
 547:sdk.c         **** 
 548:sdk.c         **** 					//use current height and yaw
 549:sdk.c         **** 					wpToLL.yaw=IMU_CalcData.angle_yaw; //use current yaw
 1768              	.LM142:
 1769 10a0 AC301FE5 		ldr	r3, .L81
 1770 10a4 082093E5 		ldr	r2, [r3, #8]
 1771 10a8 A8301FE5 		ldr	r3, .L81+12
 1772 10ac 142083E5 		str	r2, [r3, #20]
 550:sdk.c         **** 					wpToLL.height=IMU_CalcData.height; //use current height
 1774              	.LM143:
 1775 10b0 BC301FE5 		ldr	r3, .L81
 1776 10b4 4C2093E5 		ldr	r2, [r3, #76]
 1777 10b8 B8301FE5 		ldr	r3, .L81+12
 1778 10bc 182083E5 		str	r2, [r3, #24]
 551:sdk.c         **** 
 552:sdk.c         **** 					//go to the beginning
 553:sdk.c         **** 
 554:sdk.c         **** 					wpToLL.X=originLon*10000000;
 1780              	.LM144:
 1781 10c0 C8301FE5 		ldr	r3, .L81+4
 1782 10c4 180093E8 		ldmia	r3, {r3-r4}
 1783 10c8 0300A0E1 		mov	r0, r3
 1784 10cc 0410A0E1 		mov	r1, r4
 1785 10d0 B4204FE2 		adr	r2, .L81+40
 1786 10d4 0C0092E8 		ldmia	r2, {r2-r3}
 1787 10d8 FEFFFFEB 		bl	__muldf3
 1788 10dc 0030A0E1 		mov	r3, r0
 1789 10e0 0140A0E1 		mov	r4, r1
 1790 10e4 0300A0E1 		mov	r0, r3
 1791 10e8 0410A0E1 		mov	r1, r4
 1792 10ec FEFFFFEB 		bl	__fixdfsi
 1793 10f0 0020A0E1 		mov	r2, r0
 1794 10f4 F4301FE5 		ldr	r3, .L81+12
 1795 10f8 0C2083E5 		str	r2, [r3, #12]
 555:sdk.c         **** 					wpToLL.Y=originLat*10000000;
 1797              	.LM145:
 1798 10fc 00311FE5 		ldr	r3, .L81+8
 1799 1100 180093E8 		ldmia	r3, {r3-r4}
 1800 1104 0300A0E1 		mov	r0, r3
 1801 1108 0410A0E1 		mov	r1, r4
 1802 110c F0204FE2 		adr	r2, .L81+40
 1803 1110 0C0092E8 		ldmia	r2, {r2-r3}
 1804 1114 FEFFFFEB 		bl	__muldf3
 1805 1118 0030A0E1 		mov	r3, r0
 1806 111c 0140A0E1 		mov	r4, r1
 1807 1120 0300A0E1 		mov	r0, r3
 1808 1124 0410A0E1 		mov	r1, r4
 1809 1128 FEFFFFEB 		bl	__fixdfsi
 1810 112c 0020A0E1 		mov	r2, r0
 1811 1130 30311FE5 		ldr	r3, .L81+12
 1812 1134 102083E5 		str	r2, [r3, #16]
 556:sdk.c         **** 
 557:sdk.c         **** 					//calc chksum
 558:sdk.c         **** 					wpToLL.chksum = 0xAAAA
 1814              	.LM146:
 1815 1138 38311FE5 		ldr	r3, .L81+12
 1816 113c 143093E5 		ldr	r3, [r3, #20]
 1817 1140 0338A0E1 		mov	r3, r3, asl #16
 1818 1144 2328A0E1 		mov	r2, r3, lsr #16
 1819 1148 48311FE5 		ldr	r3, .L81+12
 1820 114c 183093E5 		ldr	r3, [r3, #24]
 1821 1150 0338A0E1 		mov	r3, r3, asl #16
 1822 1154 2338A0E1 		mov	r3, r3, lsr #16
 1823 1158 033082E0 		add	r3, r2, r3
 1824 115c 0338A0E1 		mov	r3, r3, asl #16
 1825 1160 2328A0E1 		mov	r2, r3, lsr #16
 1826 1164 64311FE5 		ldr	r3, .L81+12
 1827 1168 B630D3E1 		ldrh	r3, [r3, #6]
 1828 116c 033082E0 		add	r3, r2, r3
 1829 1170 0338A0E1 		mov	r3, r3, asl #16
 1830 1174 2328A0E1 		mov	r2, r3, lsr #16
 1831 1178 78311FE5 		ldr	r3, .L81+12
 1832 117c 0C3093E5 		ldr	r3, [r3, #12]
 1833 1180 0338A0E1 		mov	r3, r3, asl #16
 1834 1184 2338A0E1 		mov	r3, r3, lsr #16
 1835 1188 033082E0 		add	r3, r2, r3
 1836 118c 0338A0E1 		mov	r3, r3, asl #16
 1837 1190 2328A0E1 		mov	r2, r3, lsr #16
 1838 1194 94311FE5 		ldr	r3, .L81+12
 1839 1198 103093E5 		ldr	r3, [r3, #16]
 1840 119c 0338A0E1 		mov	r3, r3, asl #16
 1841 11a0 2338A0E1 		mov	r3, r3, lsr #16
 1842 11a4 033082E0 		add	r3, r2, r3
 1843 11a8 0338A0E1 		mov	r3, r3, asl #16
 1844 11ac 2328A0E1 		mov	r2, r3, lsr #16
 1845 11b0 B0311FE5 		ldr	r3, .L81+12
 1846 11b4 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1847 11b8 033082E0 		add	r3, r2, r3
 1848 11bc 0338A0E1 		mov	r3, r3, asl #16
 1849 11c0 2328A0E1 		mov	r2, r3, lsr #16
 1850 11c4 C4311FE5 		ldr	r3, .L81+12
 1851 11c8 B830D3E1 		ldrh	r3, [r3, #8]
 1852 11cc 033082E0 		add	r3, r2, r3
 1853 11d0 0338A0E1 		mov	r3, r3, asl #16
 1854 11d4 2328A0E1 		mov	r2, r3, lsr #16
 1855 11d8 D8311FE5 		ldr	r3, .L81+12
 1856 11dc 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1857 11e0 033082E0 		add	r3, r2, r3
 1858 11e4 0338A0E1 		mov	r3, r3, asl #16
 1859 11e8 2328A0E1 		mov	r2, r3, lsr #16
 1860 11ec EC311FE5 		ldr	r3, .L81+12
 1861 11f0 003093E5 		ldr	r3, [r3, #0]
 1862 11f4 0338A0E1 		mov	r3, r3, asl #16
 1863 11f8 2338A0E1 		mov	r3, r3, lsr #16
 1864 11fc 033082E0 		add	r3, r2, r3
 1865 1200 0338A0E1 		mov	r3, r3, asl #16
 1866 1204 2338A0E1 		mov	r3, r3, lsr #16
 1867 1208 553C43E2 		sub	r3, r3, #21760
 1868 120c 563043E2 		sub	r3, r3, #86
 1869 1210 0338A0E1 		mov	r3, r3, asl #16
 1870 1214 2338A0E1 		mov	r3, r3, lsr #16
 1871 1218 0320A0E1 		mov	r2, r3
 1872 121c 1C321FE5 		ldr	r3, .L81+12
 1873 1220 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 559:sdk.c         **** 											+ wpToLL.yaw
 560:sdk.c         **** 											+ wpToLL.height
 561:sdk.c         **** 											+ wpToLL.time
 562:sdk.c         **** 											+ wpToLL.X
 563:sdk.c         **** 											+ wpToLL.Y
 564:sdk.c         **** 											+ wpToLL.max_speed
 565:sdk.c         **** 											+ wpToLL.pos_acc
 566:sdk.c         **** 											+ wpToLL.properties
 567:sdk.c         **** 											+ wpToLL.wp_activated;
 568:sdk.c         **** 
 569:sdk.c         **** 					//send waypoint
 570:sdk.c         **** 					wpCtrlAckTrigger=0;
 1875              	.LM147:
 1876 1224 20221FE5 		ldr	r2, .L81+16
 1877 1228 0030A0E3 		mov	r3, #0
 1878 122c 0030C2E5 		strb	r3, [r2, #0]
 571:sdk.c         **** 					wpCtrlWpCmd=WP_CMD_SINGLE_WP;
 1880              	.LM148:
 1881 1230 28221FE5 		ldr	r2, .L81+20
 1882 1234 0130A0E3 		mov	r3, #1
 1883 1238 0030C2E5 		strb	r3, [r2, #0]
 572:sdk.c         **** 					wpCtrlWpCmdUpdated=1;
 1885              	.LM149:
 1886 123c 30221FE5 		ldr	r2, .L81+24
 1887 1240 0130A0E3 		mov	r3, #1
 1888 1244 0030C2E5 		strb	r3, [r2, #0]
 573:sdk.c         **** 
 574:sdk.c         **** 					wpExampleState=0;
 1890              	.LM150:
 1891 1248 30221FE5 		ldr	r2, .L81+36
 1892 124c 0030A0E3 		mov	r3, #0
 1893 1250 0030C2E5 		strb	r3, [r2, #0]
 1894              	.L73:
 575:sdk.c         **** 				}
 576:sdk.c         **** 
 577:sdk.c         **** 				if (wpCtrlNavStatus&WP_NAVSTAT_PILOT_ABORT)
 1896              	.LM151:
 1897 1254 44321FE5 		ldr	r3, .L81+28
 1898 1258 B030D3E1 		ldrh	r3, [r3, #0]
 1899 125c 083003E2 		and	r3, r3, #8
 1900 1260 000053E3 		cmp	r3, #0
 1901 1264 0200000A 		beq	.L70
 578:sdk.c         **** 					wpExampleState=0;
 1903              	.LM152:
 1904 1268 50321FE5 		ldr	r3, .L81+36
 1905 126c 0020A0E3 		mov	r2, #0
 1906 1270 0020C3E5 		strb	r2, [r3, #0]
 1907              	.L70:
 579:sdk.c         **** 
 580:sdk.c         **** 
 581:sdk.c         **** 			}
 582:sdk.c         **** 			if (RO_RC_Data.channel[6]<1600)
 1909              	.LM153:
 1910 1274 60321FE5 		ldr	r3, .L81+32
 1911 1278 BC20D3E1 		ldrh	r2, [r3, #12]
 1912 127c 633EA0E3 		mov	r3, #1584
 1913 1280 0F3083E2 		add	r3, r3, #15
 1914 1284 030052E1 		cmp	r2, r3
 1915 1288 0600008A 		bhi	.L78
 583:sdk.c         **** 						wpExampleState=0;
 1917              	.LM154:
 1918 128c 74321FE5 		ldr	r3, .L81+36
 1919 1290 0020A0E3 		mov	r2, #0
 1920 1294 0020C3E5 		strb	r2, [r3, #0]
 584:sdk.c         **** 		break;
 1922              	.LM155:
 1923 1298 020000EA 		b	.L78
 1924              	.L42:
 585:sdk.c         **** 
 586:sdk.c         **** 		default:
 587:sdk.c         **** 			wpExampleState=0;
 1926              	.LM156:
 1927 129c 84321FE5 		ldr	r3, .L81+36
 1928 12a0 0020A0E3 		mov	r2, #0
 1929 12a4 0020C3E5 		strb	r2, [r3, #0]
 1930              	.L78:
 588:sdk.c         **** 		break;
 589:sdk.c         **** 	}
 590:sdk.c         **** 
 591:sdk.c         **** }
 1932              	.LM157:
 1933 12a8 18D04BE2 		sub	sp, fp, #24
 1934 12ac 70689DE8 		ldmfd	sp, {r4, r5, r6, fp, sp, lr}
 1935 12b0 1EFF2FE1 		bx	lr
 1954              	.Lscope5:
 1955              		.bss
 1956 02e9 000000   		.align	2
 1957              	timeout.2464:
 1958 02ec 00000000 		.space	4
 1960              		.text
 1961              		.align	2
 1963              		.global	SDK_EXAMPLE_turn_motors_on
 1965              	SDK_EXAMPLE_turn_motors_on:
 592:sdk.c         **** 
 593:sdk.c         **** int SDK_EXAMPLE_turn_motors_on(void) //hold throttle stick down and yaw stick fully left to turn mo
 594:sdk.c         **** {
 1967              	.LM158:
 1968              		@ Function supports interworking.
 1969              		@ args = 0, pretend = 0, frame = 4
 1970              		@ frame_needed = 1, uses_anonymous_args = 0
 1971 12b4 0DC0A0E1 		mov	ip, sp
 1972 12b8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1973 12bc 04B04CE2 		sub	fp, ip, #4
 1974 12c0 04D04DE2 		sub	sp, sp, #4
 595:sdk.c         **** 	static int timeout=0;
 596:sdk.c         **** 
 597:sdk.c         **** 	WO_SDK.ctrl_mode=0x02;	//0x00: direct individual motor control: individual commands for motors 0..
 1976              	.LM159:
 1977 12c4 E4209FE5 		ldr	r2, .L90
 1978 12c8 0230A0E3 		mov	r3, #2
 1979 12cc 0030C2E5 		strb	r3, [r2, #0]
 598:sdk.c         **** 							//0x01: direct motor control using standard output mapping: commands are interpreted as pitc
 599:sdk.c         **** 							//0x02: attitude and throttle control: commands are input for standard attitude controller
 600:sdk.c         **** 							//0x03: GPS waypoint control
 601:sdk.c         **** 
 602:sdk.c         **** 	WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 1981              	.LM160:
 1982 12d0 D8209FE5 		ldr	r2, .L90
 1983 12d4 0130A0E3 		mov	r3, #1
 1984 12d8 0130C2E5 		strb	r3, [r2, #1]
 603:sdk.c         **** 							//1: enable control by HL processor
 604:sdk.c         **** 
 605:sdk.c         **** 	WO_SDK.disable_motor_onoff_by_stick=0; //make sure stick command is accepted
 1986              	.LM161:
 1987 12dc CC209FE5 		ldr	r2, .L90
 1988 12e0 0030A0E3 		mov	r3, #0
 1989 12e4 0230C2E5 		strb	r3, [r2, #2]
 606:sdk.c         **** 
 607:sdk.c         **** 	if(++timeout>=1000)
 1991              	.LM162:
 1992 12e8 C4309FE5 		ldr	r3, .L90+4
 1993 12ec 003093E5 		ldr	r3, [r3, #0]
 1994 12f0 012083E2 		add	r2, r3, #1
 1995 12f4 B8309FE5 		ldr	r3, .L90+4
 1996 12f8 002083E5 		str	r2, [r3, #0]
 1997 12fc B0309FE5 		ldr	r3, .L90+4
 1998 1300 002093E5 		ldr	r2, [r3, #0]
 1999 1304 F93FA0E3 		mov	r3, #996
 2000 1308 033083E2 		add	r3, r3, #3
 2001 130c 030052E1 		cmp	r2, r3
 2002 1310 050000DA 		ble	.L84
 608:sdk.c         **** 	{
 609:sdk.c         **** 		timeout=0;
 2004              	.LM163:
 2005 1314 98209FE5 		ldr	r2, .L90+4
 2006 1318 0030A0E3 		mov	r3, #0
 2007 131c 003082E5 		str	r3, [r2, #0]
 610:sdk.c         **** 		return(1); //1 => start sequence completed => motors running => user can stop calling this functi
 2009              	.LM164:
 2010 1320 0130A0E3 		mov	r3, #1
 2011 1324 10300BE5 		str	r3, [fp, #-16]
 2012 1328 1B0000EA 		b	.L86
 2013              	.L84:
 611:sdk.c         **** 	}
 612:sdk.c         **** 	else if(timeout>500) //neutral stick command for 500 ms
 2015              	.LM165:
 2016 132c 80309FE5 		ldr	r3, .L90+4
 2017 1330 003093E5 		ldr	r3, [r3, #0]
 2018 1334 7D0F53E3 		cmp	r3, #500
 2019 1338 0B0000DA 		ble	.L87
 613:sdk.c         **** 	{
 614:sdk.c         **** 		WO_CTRL_Input.ctrl=0x0C;	//0x0C: enable throttle control and yaw control
 2021              	.LM166:
 2022 133c 74209FE5 		ldr	r2, .L90+8
 2023 1340 0C30A0E3 		mov	r3, #12
 2024 1344 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 615:sdk.c         **** 		WO_CTRL_Input.thrust=0;	//use R/C throttle stick input /2 to control thrust (just for testing)
 2026              	.LM167:
 2027 1348 68209FE5 		ldr	r2, .L90+8
 2028 134c 0030A0E3 		mov	r3, #0
 2029 1350 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 616:sdk.c         **** 		WO_CTRL_Input.yaw=0;
 2031              	.LM168:
 2032 1354 5C209FE5 		ldr	r2, .L90+8
 2033 1358 0030A0E3 		mov	r3, #0
 2034 135c B430C2E1 		strh	r3, [r2, #4]	@ movhi
 617:sdk.c         **** 		return(0);
 2036              	.LM169:
 2037 1360 0030A0E3 		mov	r3, #0
 2038 1364 10300BE5 		str	r3, [fp, #-16]
 2039 1368 0B0000EA 		b	.L86
 2040              	.L87:
 618:sdk.c         **** 	}
 619:sdk.c         **** 	else //hold stick command for 500 ms
 620:sdk.c         **** 	{
 621:sdk.c         **** 		WO_CTRL_Input.ctrl=0x0C;	//0x0C: enable throttle control and yaw control
 2042              	.LM170:
 2043 136c 44209FE5 		ldr	r2, .L90+8
 2044 1370 0C30A0E3 		mov	r3, #12
 2045 1374 B830C2E1 		strh	r3, [r2, #8]	@ movhi
 622:sdk.c         **** 		WO_CTRL_Input.thrust=0;	//use R/C throttle stick input /2 to control thrust (just for testing)
 2047              	.LM171:
 2048 1378 38209FE5 		ldr	r2, .L90+8
 2049 137c 0030A0E3 		mov	r3, #0
 2050 1380 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 623:sdk.c         **** 		WO_CTRL_Input.yaw=-2047;
 2052              	.LM172:
 2053 1384 2C209FE5 		ldr	r2, .L90+8
 2054 1388 7F3EE0E3 		mvn	r3, #2032
 2055 138c 0E3043E2 		sub	r3, r3, #14
 2056 1390 B430C2E1 		strh	r3, [r2, #4]	@ movhi
 624:sdk.c         **** 		return(0);
 2058              	.LM173:
 2059 1394 0030A0E3 		mov	r3, #0
 2060 1398 10300BE5 		str	r3, [fp, #-16]
 2061              	.L86:
 2062 139c 10301BE5 		ldr	r3, [fp, #-16]
 625:sdk.c         **** 	}
 626:sdk.c         **** 
 627:sdk.c         **** }
 2064              	.LM174:
 2065 13a0 0300A0E1 		mov	r0, r3
 2066 13a4 0CD04BE2 		sub	sp, fp, #12
 2067 13a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2068 13ac 1EFF2FE1 		bx	lr
 2069              	.L91:
 2070              		.align	2
 2071              	.L90:
 2072 13b0 00000000 		.word	WO_SDK
 2073 13b4 EC020000 		.word	timeout.2464
 2074 13b8 00000000 		.word	WO_CTRL_Input
 2079              	.Lscope6:
 2080              		.bss
 2081              		.align	2
 2082              	timeout.2478:
 2083 02f0 00000000 		.space	4
 2085              		.text
 2086              		.align	2
 2088              		.global	SDK_EXAMPLE_turn_motors_off
 2090              	SDK_EXAMPLE_turn_motors_off:
 628:sdk.c         **** 
 629:sdk.c         **** int SDK_EXAMPLE_turn_motors_off(void) //hold throttle stick down and yaw stick fully right to turn 
 630:sdk.c         **** {
 2092              	.LM175:
 2093              		@ Function supports interworking.
 2094              		@ args = 0, pretend = 0, frame = 4
 2095              		@ frame_needed = 1, uses_anonymous_args = 0
 2096 13bc 0DC0A0E1 		mov	ip, sp
 2097 13c0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2098 13c4 04B04CE2 		sub	fp, ip, #4
 2099 13c8 04D04DE2 		sub	sp, sp, #4
 631:sdk.c         **** 	static int timeout=0;
 632:sdk.c         **** 
 633:sdk.c         **** 	WO_SDK.ctrl_mode=0x02;	//0x00: direct individual motor control: individual commands for motors 0..
 2101              	.LM176:
 2102 13cc E0209FE5 		ldr	r2, .L99
 2103 13d0 0230A0E3 		mov	r3, #2
 2104 13d4 0030C2E5 		strb	r3, [r2, #0]
 634:sdk.c         **** 							//0x01: direct motor control using standard output mapping: commands are interpreted as pitc
 635:sdk.c         **** 							//0x02: attitude and throttle control: commands are input for standard attitude controller
 636:sdk.c         **** 							//0x03: GPS waypoint control
 637:sdk.c         **** 
 638:sdk.c         **** 	WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 2106              	.LM177:
 2107 13d8 D4209FE5 		ldr	r2, .L99
 2108 13dc 0130A0E3 		mov	r3, #1
 2109 13e0 0130C2E5 		strb	r3, [r2, #1]
 639:sdk.c         **** 							//1: enable control by HL processor
 640:sdk.c         **** 
 641:sdk.c         **** 	WO_SDK.disable_motor_onoff_by_stick=0; //make sure stick command is accepted
 2111              	.LM178:
 2112 13e4 C8209FE5 		ldr	r2, .L99
 2113 13e8 0030A0E3 		mov	r3, #0
 2114 13ec 0230C2E5 		strb	r3, [r2, #2]
 642:sdk.c         **** 
 643:sdk.c         **** 	if(++timeout>=1000)
 2116              	.LM179:
 2117 13f0 C0309FE5 		ldr	r3, .L99+4
 2118 13f4 003093E5 		ldr	r3, [r3, #0]
 2119 13f8 012083E2 		add	r2, r3, #1
 2120 13fc B4309FE5 		ldr	r3, .L99+4
 2121 1400 002083E5 		str	r2, [r3, #0]
 2122 1404 AC309FE5 		ldr	r3, .L99+4
 2123 1408 002093E5 		ldr	r2, [r3, #0]
 2124 140c F93FA0E3 		mov	r3, #996
 2125 1410 033083E2 		add	r3, r3, #3
 2126 1414 030052E1 		cmp	r2, r3
 2127 1418 050000DA 		ble	.L93
 644:sdk.c         **** 	{
 645:sdk.c         **** 		timeout=0;
 2129              	.LM180:
 2130 141c 94209FE5 		ldr	r2, .L99+4
 2131 1420 0030A0E3 		mov	r3, #0
 2132 1424 003082E5 		str	r3, [r2, #0]
 646:sdk.c         **** 		return(1); //1 => stop sequence completed => motors turned off => user can stop calling this func
 2134              	.LM181:
 2135 1428 0130A0E3 		mov	r3, #1
 2136 142c 10300BE5 		str	r3, [fp, #-16]
 2137 1430 1A0000EA 		b	.L95
 2138              	.L93:
 647:sdk.c         **** 	}
 648:sdk.c         **** 	else if(timeout>500) //neutral stick command for 500 ms
 2140              	.LM182:
 2141 1434 7C309FE5 		ldr	r3, .L99+4
 2142 1438 003093E5 		ldr	r3, [r3, #0]
 2143 143c 7D0F53E3 		cmp	r3, #500
 2144 1440 0B0000DA 		ble	.L96
 649:sdk.c         **** 	{
 650:sdk.c         **** 		WO_CTRL_Input.ctrl=0x0C;	//0x0C: enable throttle control and yaw control
 2146              	.LM183:
 2147 1444 70209FE5 		ldr	r2, .L99+8
 2148 1448 0C30A0E3 		mov	r3, #12
 2149 144c B830C2E1 		strh	r3, [r2, #8]	@ movhi
 651:sdk.c         **** 		WO_CTRL_Input.thrust=0;	//use R/C throttle stick input /2 to control thrust (just for testing)
 2151              	.LM184:
 2152 1450 64209FE5 		ldr	r2, .L99+8
 2153 1454 0030A0E3 		mov	r3, #0
 2154 1458 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 652:sdk.c         **** 		WO_CTRL_Input.yaw=0;
 2156              	.LM185:
 2157 145c 58209FE5 		ldr	r2, .L99+8
 2158 1460 0030A0E3 		mov	r3, #0
 2159 1464 B430C2E1 		strh	r3, [r2, #4]	@ movhi
 653:sdk.c         **** 		return(0);
 2161              	.LM186:
 2162 1468 0030A0E3 		mov	r3, #0
 2163 146c 10300BE5 		str	r3, [fp, #-16]
 2164 1470 0A0000EA 		b	.L95
 2165              	.L96:
 654:sdk.c         **** 	}
 655:sdk.c         **** 	else //hold stick command for 500 ms
 656:sdk.c         **** 	{
 657:sdk.c         **** 		WO_CTRL_Input.ctrl=0x0C;	//0x0C: enable throttle control and yaw control
 2167              	.LM187:
 2168 1474 40209FE5 		ldr	r2, .L99+8
 2169 1478 0C30A0E3 		mov	r3, #12
 2170 147c B830C2E1 		strh	r3, [r2, #8]	@ movhi
 658:sdk.c         **** 		WO_CTRL_Input.thrust=0;	//use R/C throttle stick input /2 to control thrust (just for testing)
 2172              	.LM188:
 2173 1480 34209FE5 		ldr	r2, .L99+8
 2174 1484 0030A0E3 		mov	r3, #0
 2175 1488 B630C2E1 		strh	r3, [r2, #6]	@ movhi
 659:sdk.c         **** 		WO_CTRL_Input.yaw=2047;
 2177              	.LM189:
 2178 148c 28209FE5 		ldr	r2, .L99+8
 2179 1490 3E3BE0E3 		mvn	r3, #63488
 2180 1494 B430C2E1 		strh	r3, [r2, #4]	@ movhi
 660:sdk.c         **** 		return(0);
 2182              	.LM190:
 2183 1498 0030A0E3 		mov	r3, #0
 2184 149c 10300BE5 		str	r3, [fp, #-16]
 2185              	.L95:
 2186 14a0 10301BE5 		ldr	r3, [fp, #-16]
 661:sdk.c         **** 	}
 662:sdk.c         **** }
 2188              	.LM191:
 2189 14a4 0300A0E1 		mov	r0, r3
 2190 14a8 0CD04BE2 		sub	sp, fp, #12
 2191 14ac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2192 14b0 1EFF2FE1 		bx	lr
 2193              	.L100:
 2194              		.align	2
 2195              	.L99:
 2196 14b4 00000000 		.word	WO_SDK
 2197 14b8 F0020000 		.word	timeout.2478
 2198 14bc 00000000 		.word	WO_CTRL_Input
 2203              	.Lscope7:
 2204              		.comm	GPS_timeout,4,4
 2205              		.comm	SYSTEM_initialized,1,1
 2206              		.comm	WO_SDK,4,4
 2207              		.comm	RO_ALL_Data,140,4
 2208              		.comm	RO_RC_Data,16,4
 2209              		.comm	WO_Direct_Individual_Motor_Control,8,4
 2210              		.comm	WO_Direct_Motor_Control,4,4
 2211              		.comm	WO_CTRL_Input,12,4
 2212              		.comm	calc_thrust,4,4
 2213              		.comm	calc_pitch,4,4
 2214              		.comm	calc_roll,4,4
 2248              	.Letext0:
 2249              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 sdk.c
     /tmp/ccZMlSwc.s:130    .bss:00000000 allDataBuffer
     /tmp/ccZMlSwc.s:131    .bss:00000000 $d
     /tmp/ccZMlSwc.s:136    .bss:00000100 receivedViconData
     /tmp/ccZMlSwc.s:142    .bss:00000128 sendDebugData
     /tmp/ccZMlSwc.s:148    .bss:00000168 receiveDebugData
     /tmp/ccZMlSwc.s:154    .bss:000001a8 sendParamDebug
     /tmp/ccZMlSwc.s:160    .bss:000001cc receiveParamDebug
     /tmp/ccZMlSwc.s:166    .bss:000001f0 sendPositionWayPointData
     /tmp/ccZMlSwc.s:172    .bss:000001fc receivePositionWayPointData
     /tmp/ccZMlSwc.s:178    .bss:00000208 sendLandSignal
     /tmp/ccZMlSwc.s:184    .bss:0000020c receiveLandSignal
     /tmp/ccZMlSwc.s:191    .data:00000000 receiveCmdData
     /tmp/ccZMlSwc.s:188    .data:00000000 $d
     /tmp/ccZMlSwc.s:198    .bss:00000210 sendNormalData
     /tmp/ccZMlSwc.s:204    .bss:00000250 receiveNormalData
     /tmp/ccZMlSwc.s:210    .bss:00000290 pack_id
     /tmp/ccZMlSwc.s:216    .bss:00000294 vicon_count
     /tmp/ccZMlSwc.s:222    .bss:00000298 vicon_tp
     /tmp/ccZMlSwc.s:228    .bss:0000029c receive_valid_data_flag
     /tmp/ccZMlSwc.s:234    .bss:000002a0 use_way_point_flag
     /tmp/ccZMlSwc.s:241    .data:00000004 output_thrust
     /tmp/ccZMlSwc.s:248    .bss:000002a4 my_state
     /tmp/ccZMlSwc.s:255    .data:00000008 my_setpoint
     /tmp/ccZMlSwc.s:269    .bss:000002d0 stop_flag.2116
     /tmp/ccZMlSwc.s:273    .bss:000002d4 freq.2115
     /tmp/ccZMlSwc.s:280    .data:00000034 temp.2114
     /tmp/ccZMlSwc.s:289    .text:00000000 $a
     /tmp/ccZMlSwc.s:293    .text:00000000 fake_gps3
     /tmp/ccZMlSwc.s:572    .text:00000318 $d
                            *COM*:00000004 WO_SDK
                            *COM*:0000000c WO_CTRL_Input
                            *COM*:0000008c RO_ALL_Data
                            *COM*:00000004 calc_thrust
                            *COM*:00000004 calc_pitch
                            *COM*:00000004 calc_roll
     /tmp/ccZMlSwc.s:597    .text:00000360 $a
     /tmp/ccZMlSwc.s:601    .text:00000360 SDK_mainloop
     /tmp/ccZMlSwc.s:624    .text:0000037c SDK_EXAMPLE_direct_individual_motor_commands
     /tmp/ccZMlSwc.s:791    .text:00000574 $d
                            *COM*:00000008 WO_Direct_Individual_Motor_Control
     /tmp/ccZMlSwc.s:800    .text:00000584 $a
     /tmp/ccZMlSwc.s:804    .text:00000584 SDK_EXAMPLE_direct_motor_commands_with_standard_output_mapping
     /tmp/ccZMlSwc.s:893    .text:0000068c $d
                            *COM*:00000004 WO_Direct_Motor_Control
     /tmp/ccZMlSwc.s:899    .text:0000069c $a
     /tmp/ccZMlSwc.s:903    .text:0000069c SDK_EXAMPLE_attitude_commands
     /tmp/ccZMlSwc.s:940    .text:000006e4 $d
     /tmp/ccZMlSwc.s:946    .bss:000002d8 originLon.2234
     /tmp/ccZMlSwc.s:950    .bss:000002e0 originLat.2233
     /tmp/ccZMlSwc.s:953    .bss:000002e8 wpExampleState.2232
     /tmp/ccZMlSwc.s:961    .text:000006ec $a
     /tmp/ccZMlSwc.s:965    .text:000006ec SDK_EXAMPLE_gps_waypoint_control
     /tmp/ccZMlSwc.s:994    .text:00000728 $d
     /tmp/ccZMlSwc.s:1002   .text:0000073c $a
     /tmp/ccZMlSwc.s:1240   .text:00000a38 $d
                            *COM*:00000010 RO_RC_Data
     /tmp/ccZMlSwc.s:1258   .text:00000a70 $a
     /tmp/ccZMlSwc.s:1711   .text:00000ffc $d
     /tmp/ccZMlSwc.s:1726   .text:0000102c $a
     /tmp/ccZMlSwc.s:1957   .bss:000002ec timeout.2464
     /tmp/ccZMlSwc.s:1965   .text:000012b4 SDK_EXAMPLE_turn_motors_on
     /tmp/ccZMlSwc.s:2072   .text:000013b0 $d
     /tmp/ccZMlSwc.s:2082   .bss:000002f0 timeout.2478
     /tmp/ccZMlSwc.s:2086   .text:000013bc $a
     /tmp/ccZMlSwc.s:2090   .text:000013bc SDK_EXAMPLE_turn_motors_off
     /tmp/ccZMlSwc.s:2196   .text:000014b4 $d
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized

UNDEFINED SYMBOLS
__floatsisf
__divsf3
__mulsf3
__fixsfsi
__gtsf2
positionControllerInit
positionController
my_this
__floatsidf
__divdf3
__muldf3
__fixdfsi
xy2latlon
GPS_Data
wpCtrlWpCmd
wpCtrlWpCmdUpdated
wpCtrlAckTrigger
wpCtrlNavStatus
IMU_CalcData
wpToLL
