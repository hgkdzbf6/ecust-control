   1              		.file	"main.c"
   3              		.text
   4              	.Ltext0:
 143              		.global	int_cnt
 144              		.bss
 145              		.align	2
 148              	int_cnt:
 149 0000 00000000 		.space	4
 150              		.global	cnt
 151              		.align	2
 154              	cnt:
 155 0004 00000000 		.space	4
 156              		.global	mainloop_cnt
 157              		.align	2
 160              	mainloop_cnt:
 161 0008 00000000 		.space	4
 162              		.global	mainloop_trigger
 165              	mainloop_trigger:
 166 000c 00       		.space	1
 167              		.global	GPS_timeout
 168 000d 000000   		.align	2
 171              	GPS_timeout:
 172 0010 00000000 		.space	4
 173              		.global	trigger_cnt
 174              		.align	2
 177              	trigger_cnt:
 178 0014 00000000 		.space	4
 179              		.global	SYSTEM_initialized
 182              	SYSTEM_initialized:
 183 0018 00       		.space	1
 184              		.global	DataOutputsPerSecond
 185              		.data
 188              	DataOutputsPerSecond:
 189 0000 0A       		.byte	10
 190              		.text
 191              		.align	2
 193              		.global	timer0ISR
 195              	timer0ISR:
   1:main.c        **** /*
   2:main.c        **** 
   3:main.c        **** AscTec AutoPilot HL SDK v2.0
   4:main.c        **** 
   5:main.c        **** Copyright (c) 2011, Ascending Technologies GmbH
   6:main.c        **** All rights reserved.
   7:main.c        **** 
   8:main.c        **** Redistribution and use in source and binary forms, with or without
   9:main.c        **** modification, are permitted provided that the following conditions are met:
  10:main.c        **** 
  11:main.c        ****  * Redistributions of source code must retain the above copyright notice,
  12:main.c        ****    this list of conditions and the following disclaimer.
  13:main.c        ****  * Redistributions in binary form must reproduce the above copyright
  14:main.c        ****    notice, this list of conditions and the following disclaimer in the
  15:main.c        ****    documentation and/or other materials provided with the distribution.
  16:main.c        **** 
  17:main.c        **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  18:main.c        **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  19:main.c        **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  20:main.c        **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  21:main.c        **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  22:main.c        **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  23:main.c        **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  24:main.c        **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  25:main.c        **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  26:main.c        **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  27:main.c        **** DAMAGE.
  28:main.c        **** 
  29:main.c        ****  */
  30:main.c        **** 
  31:main.c        **** /**********************************************************
  32:main.c        ****                   Header files
  33:main.c        ****  **********************************************************/
  34:main.c        **** #include "LPC214x.h"
  35:main.c        **** #include "main.h"
  36:main.c        **** #include "system.h"
  37:main.c        **** #include "uart.h"
  38:main.c        **** #include "mymath.h"
  39:main.c        **** #include "hardware.h"
  40:main.c        **** #include "irq.h"
  41:main.c        **** #include "i2c.h"
  42:main.c        **** #include "gpsmath.h"
  43:main.c        **** #include "adc.h"
  44:main.c        **** #include "uart.h"
  45:main.c        **** #include "ssp.h"
  46:main.c        **** #include "LL_HL_comm.h"
  47:main.c        **** #include "sdk.h"
  48:main.c        **** #include "buzzer.h"
  49:main.c        **** #include "ublox.h"
  50:main.c        **** #include "pelican_ptu.h"
  51:main.c        **** #include "declination.h"
  52:main.c        **** #include "MyProtocol.h"
  53:main.c        **** #include "pid.h"
  54:main.c        **** #include "common_header.h"
  55:main.c        **** 
  56:main.c        **** /* *********************************************************
  57:main.c        ****                Function declarations
  58:main.c        ****   ********************************************************* */
  59:main.c        **** 
  60:main.c        **** void Initialize(void);
  61:main.c        **** void feed(void);
  62:main.c        **** void beeper(unsigned char);
  63:main.c        **** 
  64:main.c        **** /**********************************************************
  65:main.c        ****                   Global Variables
  66:main.c        ****  **********************************************************/
  67:main.c        **** struct HL_STATUS HL_Status;
  68:main.c        **** struct IMU_CALCDATA IMU_CalcData, IMU_CalcData_tmp;
  69:main.c        **** struct GPS_TIME GPS_Time;
  70:main.c        **** 
  71:main.c        **** volatile unsigned int int_cnt=0, cnt=0, mainloop_cnt=0;
  72:main.c        **** volatile unsigned char mainloop_trigger=0;
  73:main.c        **** volatile unsigned int GPS_timeout=0;
  74:main.c        **** volatile unsigned int trigger_cnt=0;
  75:main.c        **** volatile char SYSTEM_initialized=0;
  76:main.c        **** 
  77:main.c        **** unsigned int uart_cnt;
  78:main.c        **** unsigned char DataOutputsPerSecond=10;
  79:main.c        **** 
  80:main.c        **** extern MyViconData receivedViconData;
  81:main.c        **** extern DebugData sendDebugData;
  82:main.c        **** extern ParamDebug sendParamDebug;
  83:main.c        **** extern CmdData receiveCmdData;
  84:main.c        **** extern state_t my_setpoint;
  85:main.c        **** extern state_t my_state;
  86:main.c        **** extern int cpu_load;
  87:main.c        **** extern int vicon_count;
  88:main.c        **** extern float calc_thrust;
  89:main.c        **** extern struct this_s this ;
  90:main.c        **** extern int output_thrust;
  91:main.c        **** extern int receive_valid_data_flag;
  92:main.c        **** extern int vicon_tp;
  93:main.c        **** 
  94:main.c        **** void timer0ISR(void) __irq
  95:main.c        **** {
 197              	.LM0:
 198              		@ Function supports interworking.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201 0000 0DC0A0E1 		mov	ip, sp
 202 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 203 0008 04B04CE2 		sub	fp, ip, #4
  96:main.c        ****   T0IR = 0x01;      //Clear the timer 0 interrupt
 205              	.LM1:
 206 000c 0E32A0E3 		mov	r3, #-536870912
 207 0010 013983E2 		add	r3, r3, #16384
 208 0014 0120A0E3 		mov	r2, #1
 209 0018 002083E5 		str	r2, [r3, #0]
  97:main.c        ****   IENABLE;
  98:main.c        ****   trigger_cnt++;
 211              	.LM2:
 212 001c B4309FE5 		ldr	r3, .L7
 213 0020 003093E5 		ldr	r3, [r3, #0]
 214 0024 012083E2 		add	r2, r3, #1
 215 0028 A8309FE5 		ldr	r3, .L7
 216 002c 002083E5 		str	r2, [r3, #0]
  99:main.c        ****   if(trigger_cnt==ControllerCyclesPerSecond)
 218              	.LM3:
 219 0030 A0309FE5 		ldr	r3, .L7
 220 0034 003093E5 		ldr	r3, [r3, #0]
 221 0038 FA0F53E3 		cmp	r3, #1000
 222 003c 1200001A 		bne	.L2
 100:main.c        ****   {
 101:main.c        ****   	trigger_cnt=0;
 224              	.LM4:
 225 0040 90209FE5 		ldr	r2, .L7
 226 0044 0030A0E3 		mov	r3, #0
 227 0048 003082E5 		str	r3, [r2, #0]
 102:main.c        ****   	HL_Status.up_time++;
 229              	.LM5:
 230 004c 88309FE5 		ldr	r3, .L7+4
 231 0050 B430D3E1 		ldrh	r3, [r3, #4]
 232 0054 013083E2 		add	r3, r3, #1
 233 0058 0338A0E1 		mov	r3, r3, asl #16
 234 005c 2328A0E1 		mov	r2, r3, lsr #16
 235 0060 74309FE5 		ldr	r3, .L7+4
 236 0064 B420C3E1 		strh	r2, [r3, #4]	@ movhi
 103:main.c        ****   	HL_Status.cpu_load=mainloop_cnt;
 238              	.LM6:
 239 0068 70309FE5 		ldr	r3, .L7+8
 240 006c 003093E5 		ldr	r3, [r3, #0]
 241 0070 0338A0E1 		mov	r3, r3, asl #16
 242 0074 2328A0E1 		mov	r2, r3, lsr #16
 243 0078 5C309FE5 		ldr	r3, .L7+4
 244 007c B221C3E1 		strh	r2, [r3, #18]	@ movhi
 104:main.c        **** 
 105:main.c        ****   	mainloop_cnt=0;
 246              	.LM7:
 247 0080 58209FE5 		ldr	r2, .L7+8
 248 0084 0030A0E3 		mov	r3, #0
 249 0088 003082E5 		str	r3, [r2, #0]
 250              	.L2:
 106:main.c        ****   }
 107:main.c        **** 
 108:main.c        ****   if(mainloop_trigger<10) mainloop_trigger++;
 252              	.LM8:
 253 008c 50309FE5 		ldr	r3, .L7+12
 254 0090 0030D3E5 		ldrb	r3, [r3, #0]
 255 0094 FF3003E2 		and	r3, r3, #255
 256 0098 090053E3 		cmp	r3, #9
 257 009c 0600008A 		bhi	.L4
 258 00a0 3C309FE5 		ldr	r3, .L7+12
 259 00a4 0030D3E5 		ldrb	r3, [r3, #0]
 260 00a8 FF3003E2 		and	r3, r3, #255
 261 00ac 013083E2 		add	r3, r3, #1
 262 00b0 FF3003E2 		and	r3, r3, #255
 263 00b4 28209FE5 		ldr	r2, .L7+12
 264 00b8 0030C2E5 		strb	r3, [r2, #0]
 265              	.L4:
 109:main.c        **** 
 110:main.c        ****   IDISABLE;
 111:main.c        ****   VICVectAddr = 0;		// Acknowledge Interrupt
 267              	.LM9:
 268 00bc 0030A0E3 		mov	r3, #0
 269 00c0 FD3E43E2 		sub	r3, r3, #4048
 270 00c4 0020A0E3 		mov	r2, #0
 271 00c8 002083E5 		str	r2, [r3, #0]
 112:main.c        **** }
 273              	.LM10:
 274 00cc 0CD04BE2 		sub	sp, fp, #12
 275 00d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 276 00d4 1EFF2FE1 		bx	lr
 277              	.L8:
 278              		.align	2
 279              	.L7:
 280 00d8 00000000 		.word	trigger_cnt
 281 00dc 00000000 		.word	HL_Status
 282 00e0 00000000 		.word	mainloop_cnt
 283 00e4 00000000 		.word	mainloop_trigger
 285              	.Lscope0:
 286              		.bss
 287 0019 000000   		.align	2
 288              	vbat1.2311:
 289 001c 00000000 		.space	4
 291              		.text
 292              		.align	2
 294              		.global	main
 296              	main:
 113:main.c        **** 
 114:main.c        **** /**********************************************************
 115:main.c        ****                        MAIN
 116:main.c        **** **********************************************************/
 117:main.c        **** int	main (void) {
 298              	.LM11:
 299              		@ Function supports interworking.
 300              		@ args = 0, pretend = 0, frame = 4
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 00e8 0DC0A0E1 		mov	ip, sp
 303 00ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 304 00f0 04B04CE2 		sub	fp, ip, #4
 305 00f4 04D04DE2 		sub	sp, sp, #4
 118:main.c        **** 
 119:main.c        ****   static int vbat1; //battery_voltage (lowpass-filtered)
 120:main.c        **** 
 121:main.c        ****   init();
 307              	.LM12:
 308 00f8 FEFFFFEB 		bl	init
 122:main.c        ****   buzzer(OFF);
 310              	.LM13:
 311 00fc 0000A0E3 		mov	r0, #0
 312 0100 FEFFFFEB 		bl	buzzer
 123:main.c        ****   LL_write_init();
 314              	.LM14:
 315 0104 FEFFFFEB 		bl	LL_write_init
 124:main.c        ****   PTU_init();
 317              	.LM15:
 318 0108 FEFFFFEB 		bl	PTU_init
 125:main.c        ****   ADC0triggerSampling(1<<VOLTAGE_1); //activate ADC sampling
 320              	.LM16:
 321 010c 0400A0E3 		mov	r0, #4
 322 0110 FEFFFFEB 		bl	ADC0triggerSampling
 126:main.c        **** 
 127:main.c        ****   HL_Status.up_time=0;
 324              	.LM17:
 325 0114 D8319FE5 		ldr	r3, .L23
 326 0118 0020A0E3 		mov	r2, #0
 327 011c B420C3E1 		strh	r2, [r3, #4]	@ movhi
 128:main.c        **** 
 129:main.c        ****   LED(1,ON);
 329              	.LM18:
 330 0120 0100A0E3 		mov	r0, #1
 331 0124 0110A0E3 		mov	r1, #1
 332 0128 FEFFFFEB 		bl	LED
 333 012c FFFFFFEA 		b	.L22
 334              	.L10:
 335              	.L22:
 130:main.c        **** 
 131:main.c        **** //  read_callback=my_read_callback;
 132:main.c        **** //  write_callback=my_write_callback;
 133:main.c        **** 
 134:main.c        ****   while(1)
 135:main.c        ****   {
 136:main.c        ****       if(mainloop_trigger)
 337              	.LM19:
 338 0130 C0319FE5 		ldr	r3, .L23+4
 339 0134 0030D3E5 		ldrb	r3, [r3, #0]
 340 0138 FF3003E2 		and	r3, r3, #255
 341 013c 000053E3 		cmp	r3, #0
 342 0140 FAFFFF0A 		beq	.L10
 137:main.c        ****       {
 138:main.c        ****      	if(GPS_timeout<ControllerCyclesPerSecond) GPS_timeout++;
 344              	.LM20:
 345 0144 B0319FE5 		ldr	r3, .L23+8
 346 0148 002093E5 		ldr	r2, [r3, #0]
 347 014c F93FA0E3 		mov	r3, #996
 348 0150 033083E2 		add	r3, r3, #3
 349 0154 030052E1 		cmp	r2, r3
 350 0158 0500008A 		bhi	.L13
 351 015c 98319FE5 		ldr	r3, .L23+8
 352 0160 003093E5 		ldr	r3, [r3, #0]
 353 0164 012083E2 		add	r2, r3, #1
 354 0168 8C319FE5 		ldr	r3, .L23+8
 355 016c 002083E5 		str	r2, [r3, #0]
 356 0170 0D0000EA 		b	.L15
 357              	.L13:
 139:main.c        **** 	  	else if(GPS_timeout==ControllerCyclesPerSecond)
 359              	.LM21:
 360 0174 80319FE5 		ldr	r3, .L23+8
 361 0178 003093E5 		ldr	r3, [r3, #0]
 362 017c FA0F53E3 		cmp	r3, #1000
 363 0180 0900001A 		bne	.L15
 140:main.c        **** 	  	{
 141:main.c        ****   	 		GPS_timeout=ControllerCyclesPerSecond+1;
 365              	.LM22:
 366 0184 70219FE5 		ldr	r2, .L23+8
 367 0188 FA3FA0E3 		mov	r3, #1000
 368 018c 013083E2 		add	r3, r3, #1
 369 0190 003082E5 		str	r3, [r2, #0]
 142:main.c        **** 	  		GPS_Data.status=0;
 371              	.LM23:
 372 0194 64219FE5 		ldr	r2, .L23+12
 373 0198 0030A0E3 		mov	r3, #0
 374 019c 283082E5 		str	r3, [r2, #40]
 143:main.c        **** 	  		GPS_Data.numSV=0;
 376              	.LM24:
 377 01a0 58219FE5 		ldr	r2, .L23+12
 378 01a4 0030A0E3 		mov	r3, #0
 379 01a8 243082E5 		str	r3, [r2, #36]
 380              	.L15:
 144:main.c        **** 	  	}
 145:main.c        **** 
 146:main.c        ****         //battery monitoring
 147:main.c        ****         ADC0getSamplingResults(0xFF,adcChannelValues);
 382              	.LM25:
 383 01ac FF00A0E3 		mov	r0, #255
 384 01b0 4C119FE5 		ldr	r1, .L23+16
 385 01b4 FEFFFFEB 		bl	ADC0getSamplingResults
 148:main.c        ****         vbat1=(vbat1*14+(adcChannelValues[VOLTAGE_1]*9872/579))/15;	//voltage in mV
 387              	.LM26:
 388 01b8 48319FE5 		ldr	r3, .L23+20
 389 01bc 002093E5 		ldr	r2, [r3, #0]
 390 01c0 0230A0E1 		mov	r3, r2
 391 01c4 8331A0E1 		mov	r3, r3, asl #3
 392 01c8 033062E0 		rsb	r3, r2, r3
 393 01cc 8330A0E1 		mov	r3, r3, asl #1
 394 01d0 0300A0E1 		mov	r0, r3
 395 01d4 28319FE5 		ldr	r3, .L23+16
 396 01d8 081093E5 		ldr	r1, [r3, #8]
 397 01dc 0120A0E1 		mov	r2, r1
 398 01e0 0221A0E1 		mov	r2, r2, asl #2
 399 01e4 012082E0 		add	r2, r2, r1
 400 01e8 8220A0E1 		mov	r2, r2, asl #1
 401 01ec 012082E0 		add	r2, r2, r1
 402 01f0 8231A0E1 		mov	r3, r2, asl #3
 403 01f4 033062E0 		rsb	r3, r2, r3
 404 01f8 8331A0E1 		mov	r3, r3, asl #3
 405 01fc 013083E0 		add	r3, r3, r1
 406 0200 0332A0E1 		mov	r3, r3, asl #4
 407 0204 0320A0E1 		mov	r2, r3
 408 0208 BE32A0E3 		mov	r3, #-536870901
 409 020c 263683E2 		add	r3, r3, #39845888
 410 0210 633C83E2 		add	r3, r3, #25344
 411 0214 921383E0 		umull	r1, r3, r2, r3
 412 0218 A334A0E1 		mov	r3, r3, lsr #9
 413 021c 032080E0 		add	r2, r0, r3
 414 0220 E4309FE5 		ldr	r3, .L23+24
 415 0224 921383E0 		umull	r1, r3, r2, r3
 416 0228 A331A0E1 		mov	r3, r3, lsr #3
 417 022c 0320A0E1 		mov	r2, r3
 418 0230 D0309FE5 		ldr	r3, .L23+20
 419 0234 002083E5 		str	r2, [r3, #0]
 149:main.c        **** 
 150:main.c        **** 		HL_Status.battery_voltage_1=vbat1;
 421              	.LM27:
 422 0238 C8309FE5 		ldr	r3, .L23+20
 423 023c 003093E5 		ldr	r3, [r3, #0]
 424 0240 0338A0E1 		mov	r3, r3, asl #16
 425 0244 2328A0E1 		mov	r2, r3, lsr #16
 426 0248 A4309FE5 		ldr	r3, .L23
 427 024c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 151:main.c        ****         mainloop_cnt++;
 429              	.LM28:
 430 0250 B8309FE5 		ldr	r3, .L23+28
 431 0254 003093E5 		ldr	r3, [r3, #0]
 432 0258 012083E2 		add	r2, r3, #1
 433 025c AC309FE5 		ldr	r3, .L23+28
 434 0260 002083E5 		str	r2, [r3, #0]
 152:main.c        **** 		if(!(mainloop_cnt%10)) buzzer_handler(HL_Status.battery_voltage_1);
 436              	.LM29:
 437 0264 A4309FE5 		ldr	r3, .L23+28
 438 0268 002093E5 		ldr	r2, [r3, #0]
 439 026c A0309FE5 		ldr	r3, .L23+32
 440 0270 921383E0 		umull	r1, r3, r2, r3
 441 0274 A331A0E1 		mov	r3, r3, lsr #3
 442 0278 10300BE5 		str	r3, [fp, #-16]
 443 027c 10301BE5 		ldr	r3, [fp, #-16]
 444 0280 0331A0E1 		mov	r3, r3, asl #2
 445 0284 10101BE5 		ldr	r1, [fp, #-16]
 446 0288 013083E0 		add	r3, r3, r1
 447 028c 8330A0E1 		mov	r3, r3, asl #1
 448 0290 022063E0 		rsb	r2, r3, r2
 449 0294 10200BE5 		str	r2, [fp, #-16]
 450 0298 10301BE5 		ldr	r3, [fp, #-16]
 451 029c 000053E3 		cmp	r3, #0
 452 02a0 0500001A 		bne	.L17
 453 02a4 48309FE5 		ldr	r3, .L23
 454 02a8 B030D3E1 		ldrh	r3, [r3, #0]
 455 02ac 0338A0E1 		mov	r3, r3, asl #16
 456 02b0 4338A0E1 		mov	r3, r3, asr #16
 457 02b4 0300A0E1 		mov	r0, r3
 458 02b8 FEFFFFEB 		bl	buzzer_handler
 459              	.L17:
 153:main.c        **** 
 154:main.c        **** 	    if(mainloop_trigger) mainloop_trigger--;
 461              	.LM30:
 462 02bc 34309FE5 		ldr	r3, .L23+4
 463 02c0 0030D3E5 		ldrb	r3, [r3, #0]
 464 02c4 FF3003E2 		and	r3, r3, #255
 465 02c8 000053E3 		cmp	r3, #0
 466 02cc 0600000A 		beq	.L19
 467 02d0 20309FE5 		ldr	r3, .L23+4
 468 02d4 0030D3E5 		ldrb	r3, [r3, #0]
 469 02d8 FF3003E2 		and	r3, r3, #255
 470 02dc 013043E2 		sub	r3, r3, #1
 471 02e0 FF3003E2 		and	r3, r3, #255
 472 02e4 0C209FE5 		ldr	r2, .L23+4
 473 02e8 0030C2E5 		strb	r3, [r2, #0]
 474              	.L19:
 155:main.c        ****         mainloop();
 476              	.LM31:
 477 02ec FEFFFFEB 		bl	mainloop
 156:main.c        ****       }
 157:main.c        ****   }
 479              	.LM32:
 480 02f0 8EFFFFEA 		b	.L10
 481              	.L24:
 482              		.align	2
 483              	.L23:
 484 02f4 00000000 		.word	HL_Status
 485 02f8 00000000 		.word	mainloop_trigger
 486 02fc 00000000 		.word	GPS_timeout
 487 0300 00000000 		.word	GPS_Data
 488 0304 00000000 		.word	adcChannelValues
 489 0308 1C000000 		.word	vbat1.2311
 490 030c 89888888 		.word	-2004318071
 491 0310 00000000 		.word	mainloop_cnt
 492 0314 CDCCCCCC 		.word	-858993459
 497              	.Lscope1:
 498              		.data
 501              	led_state.2355:
 502 0001 01       		.byte	1
 504              		.bss
 505              	led_cnt.2354:
 506 0020 00       		.space	1
 508              		.global	__divsi3
 509 0021 000000   		.text
 510              		.align	2
 512              		.global	mainloop
 514              	mainloop:
 158:main.c        ****   return 0;
 159:main.c        **** }
 160:main.c        **** 
 161:main.c        **** 
 162:main.c        **** void mainloop(void) //mainloop is triggered at 1 kHz
 163:main.c        **** {
 516              	.LM33:
 517              		@ Function supports interworking.
 518              		@ args = 0, pretend = 0, frame = 8
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520 0318 0DC0A0E1 		mov	ip, sp
 521 031c 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 522 0320 04B04CE2 		sub	fp, ip, #4
 523 0324 0CD04DE2 		sub	sp, sp, #12
 164:main.c        ****     static unsigned char led_cnt=0, led_state=1;
 165:main.c        **** 	unsigned char t;
 166:main.c        **** 
 167:main.c        **** 	//blink red led if no GPS lock available
 168:main.c        **** 	led_cnt++;
 525              	.LM34:
 526 0328 A4349FE5 		ldr	r3, .L52
 527 032c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 528 0330 013083E2 		add	r3, r3, #1
 529 0334 FF3003E2 		and	r3, r3, #255
 530 0338 94249FE5 		ldr	r2, .L52
 531 033c 0030C2E5 		strb	r3, [r2, #0]
 169:main.c        **** 	if((GPS_Data.status&0xFF)==0x03)
 533              	.LM35:
 534 0340 90349FE5 		ldr	r3, .L52+4
 535 0344 283093E5 		ldr	r3, [r3, #40]
 536 0348 FF3003E2 		and	r3, r3, #255
 537 034c 030053E3 		cmp	r3, #3
 538 0350 0300001A 		bne	.L26
 170:main.c        **** 	{
 171:main.c        **** 		LED(0,OFF);
 540              	.LM36:
 541 0354 0000A0E3 		mov	r0, #0
 542 0358 0010A0E3 		mov	r1, #0
 543 035c FEFFFFEB 		bl	LED
 544 0360 110000EA 		b	.L28
 545              	.L26:
 172:main.c        **** 	}
 173:main.c        **** 	else
 174:main.c        **** 	{
 175:main.c        **** 	    if(led_cnt==150)
 547              	.LM37:
 548 0364 68349FE5 		ldr	r3, .L52
 549 0368 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 550 036c 960053E3 		cmp	r3, #150
 551 0370 0300001A 		bne	.L29
 176:main.c        **** 	    {
 177:main.c        **** 	      LED(0,ON);
 553              	.LM38:
 554 0374 0000A0E3 		mov	r0, #0
 555 0378 0110A0E3 		mov	r1, #1
 556 037c FEFFFFEB 		bl	LED
 557 0380 090000EA 		b	.L28
 558              	.L29:
 178:main.c        **** 	    }
 179:main.c        **** 	    else if(led_cnt==200)
 560              	.LM39:
 561 0384 48349FE5 		ldr	r3, .L52
 562 0388 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 563 038c C80053E3 		cmp	r3, #200
 564 0390 0500001A 		bne	.L28
 180:main.c        **** 	    {
 181:main.c        **** 	      led_cnt=0;
 566              	.LM40:
 567 0394 38349FE5 		ldr	r3, .L52
 568 0398 0020A0E3 		mov	r2, #0
 569 039c 0020C3E5 		strb	r2, [r3, #0]
 182:main.c        **** 	      LED(0,OFF);
 571              	.LM41:
 572 03a0 0000A0E3 		mov	r0, #0
 573 03a4 0010A0E3 		mov	r1, #0
 574 03a8 FEFFFFEB 		bl	LED
 575              	.L28:
 183:main.c        **** 	    }
 184:main.c        **** 	}
 185:main.c        **** 
 186:main.c        **** 	//after first lock, determine magnetic inclination and declination
 187:main.c        **** 	if (SYSTEM_initialized)
 577              	.LM42:
 578 03ac 28349FE5 		ldr	r3, .L52+8
 579 03b0 0030D3E5 		ldrb	r3, [r3, #0]
 580 03b4 FF3003E2 		and	r3, r3, #255
 581 03b8 000053E3 		cmp	r3, #0
 582 03bc 3500000A 		beq	.L32
 188:main.c        **** 	{
 189:main.c        **** 		if ((!declinationAvailable) && (GPS_Data.horizontal_accuracy<10000) && ((GPS_Data.status&0x03)==0
 584              	.LM43:
 585 03c0 18349FE5 		ldr	r3, .L52+12
 586 03c4 0030D3E5 		ldrb	r3, [r3, #0]
 587 03c8 FF3003E2 		and	r3, r3, #255
 588 03cc 000053E3 		cmp	r3, #0
 589 03d0 3000001A 		bne	.L32
 590 03d4 FC339FE5 		ldr	r3, .L52+4
 591 03d8 182093E5 		ldr	r2, [r3, #24]
 592 03dc 273CA0E3 		mov	r3, #9984
 593 03e0 0F3083E2 		add	r3, r3, #15
 594 03e4 030052E1 		cmp	r2, r3
 595 03e8 2A00008A 		bhi	.L32
 596 03ec E4339FE5 		ldr	r3, .L52+4
 597 03f0 283093E5 		ldr	r3, [r3, #40]
 598 03f4 033003E2 		and	r3, r3, #3
 599 03f8 030053E3 		cmp	r3, #3
 600 03fc 2500001A 		bne	.L32
 601              	.LBB2:
 190:main.c        **** 		{
 191:main.c        **** 			int status;
 192:main.c        **** 			estimatedDeclination=getDeclination(GPS_Data.latitude,GPS_Data.longitude,GPS_Data.height/1000,20
 603              	.LM44:
 604 0400 D0339FE5 		ldr	r3, .L52+4
 605 0404 000093E5 		ldr	r0, [r3, #0]
 606 0408 C8339FE5 		ldr	r3, .L52+4
 607 040c 04C093E5 		ldr	ip, [r3, #4]
 608 0410 C0339FE5 		ldr	r3, .L52+4
 609 0414 081093E5 		ldr	r1, [r3, #8]
 610 0418 C4339FE5 		ldr	r3, .L52+16
 611 041c 9123C3E0 		smull	r2, r3, r1, r3
 612 0420 4323A0E1 		mov	r2, r3, asr #6
 613 0424 C13FA0E1 		mov	r3, r1, asr #31
 614 0428 022063E0 		rsb	r2, r3, r2
 615 042c 18304BE2 		sub	r3, fp, #24
 616 0430 00308DE5 		str	r3, [sp, #0]
 617 0434 0C10A0E1 		mov	r1, ip
 618 0438 7D3EA0E3 		mov	r3, #2000
 619 043c 0C3083E2 		add	r3, r3, #12
 620 0440 FEFFFFEB 		bl	getDeclination
 621 0444 0020A0E1 		mov	r2, r0
 622 0448 98339FE5 		ldr	r3, .L52+20
 623 044c 002083E5 		str	r2, [r3, #0]
 193:main.c        **** 			if (estimatedDeclination<-32000) estimatedDeclination=-32000;
 625              	.LM45:
 626 0450 90339FE5 		ldr	r3, .L52+20
 627 0454 003093E5 		ldr	r3, [r3, #0]
 628 0458 7D0C73E3 		cmn	r3, #32000
 629 045c 030000AA 		bge	.L37
 630 0460 80239FE5 		ldr	r2, .L52+20
 631 0464 8334A0E3 		mov	r3, #-2097152000
 632 0468 4338A0E1 		mov	r3, r3, asr #16
 633 046c 003082E5 		str	r3, [r2, #0]
 634              	.L37:
 194:main.c        **** 			if (estimatedDeclination>32000) estimatedDeclination=32000;
 636              	.LM46:
 637 0470 70339FE5 		ldr	r3, .L52+20
 638 0474 003093E5 		ldr	r3, [r3, #0]
 639 0478 7D0C53E3 		cmp	r3, #32000
 640 047c 020000DA 		ble	.L39
 641 0480 60239FE5 		ldr	r2, .L52+20
 642 0484 7D3CA0E3 		mov	r3, #32000
 643 0488 003082E5 		str	r3, [r2, #0]
 644              	.L39:
 195:main.c        **** 			declinationAvailable=1;
 646              	.LM47:
 647 048c 4C339FE5 		ldr	r3, .L52+12
 648 0490 0120A0E3 		mov	r2, #1
 649 0494 0020C3E5 		strb	r2, [r3, #0]
 650              	.L32:
 651              	.LBE2:
 196:main.c        **** 		}
 197:main.c        **** 	}
 198:main.c        **** 
 199:main.c        **** 	//toggle green LED and update SDK input struct when GPS data packet is received
 200:main.c        ****     if (gpsLEDTrigger)
 653              	.LM48:
 654 0498 4C339FE5 		ldr	r3, .L52+24
 655 049c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 656 04a0 000053E3 		cmp	r3, #0
 657 04a4 4700000A 		beq	.L41
 201:main.c        ****     {
 202:main.c        **** 		if(led_state)
 659              	.LM49:
 660 04a8 40339FE5 		ldr	r3, .L52+28
 661 04ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 662 04b0 000053E3 		cmp	r3, #0
 663 04b4 0600000A 		beq	.L43
 203:main.c        **** 		{
 204:main.c        **** 			led_state=0;
 665              	.LM50:
 666 04b8 30339FE5 		ldr	r3, .L52+28
 667 04bc 0020A0E3 		mov	r2, #0
 668 04c0 0020C3E5 		strb	r2, [r3, #0]
 205:main.c        **** 			LED(1,OFF);
 670              	.LM51:
 671 04c4 0100A0E3 		mov	r0, #1
 672 04c8 0010A0E3 		mov	r1, #0
 673 04cc FEFFFFEB 		bl	LED
 674 04d0 050000EA 		b	.L45
 675              	.L43:
 206:main.c        **** 		}
 207:main.c        **** 		else
 208:main.c        **** 		{
 209:main.c        **** 			LED(1,ON);
 677              	.LM52:
 678 04d4 0100A0E3 		mov	r0, #1
 679 04d8 0110A0E3 		mov	r1, #1
 680 04dc FEFFFFEB 		bl	LED
 210:main.c        **** 			led_state=1;
 682              	.LM53:
 683 04e0 08339FE5 		ldr	r3, .L52+28
 684 04e4 0120A0E3 		mov	r2, #1
 685 04e8 0020C3E5 		strb	r2, [r3, #0]
 686              	.L45:
 211:main.c        **** 		}
 212:main.c        **** 
 213:main.c        **** 		RO_ALL_Data.GPS_height=GPS_Data.height;
 688              	.LM54:
 689 04ec E4329FE5 		ldr	r3, .L52+4
 690 04f0 082093E5 		ldr	r2, [r3, #8]
 691 04f4 F8329FE5 		ldr	r3, .L52+32
 692 04f8 4C2083E5 		str	r2, [r3, #76]
 214:main.c        **** 		RO_ALL_Data.GPS_latitude=GPS_Data.latitude;
 694              	.LM55:
 695 04fc D4329FE5 		ldr	r3, .L52+4
 696 0500 002093E5 		ldr	r2, [r3, #0]
 697 0504 E8329FE5 		ldr	r3, .L52+32
 698 0508 442083E5 		str	r2, [r3, #68]
 215:main.c        **** 		RO_ALL_Data.GPS_longitude=GPS_Data.longitude;
 700              	.LM56:
 701 050c C4329FE5 		ldr	r3, .L52+4
 702 0510 042093E5 		ldr	r2, [r3, #4]
 703 0514 D8329FE5 		ldr	r3, .L52+32
 704 0518 482083E5 		str	r2, [r3, #72]
 216:main.c        **** 		RO_ALL_Data.GPS_speed_x=GPS_Data.speed_x;
 706              	.LM57:
 707 051c B4329FE5 		ldr	r3, .L52+4
 708 0520 0C2093E5 		ldr	r2, [r3, #12]
 709 0524 C8329FE5 		ldr	r3, .L52+32
 710 0528 502083E5 		str	r2, [r3, #80]
 217:main.c        **** 		RO_ALL_Data.GPS_speed_y=GPS_Data.speed_y;
 712              	.LM58:
 713 052c A4329FE5 		ldr	r3, .L52+4
 714 0530 102093E5 		ldr	r2, [r3, #16]
 715 0534 B8329FE5 		ldr	r3, .L52+32
 716 0538 542083E5 		str	r2, [r3, #84]
 218:main.c        **** 		RO_ALL_Data.GPS_status=GPS_Data.status;
 718              	.LM59:
 719 053c 94329FE5 		ldr	r3, .L52+4
 720 0540 282093E5 		ldr	r2, [r3, #40]
 721 0544 A8329FE5 		ldr	r3, .L52+32
 722 0548 6C2083E5 		str	r2, [r3, #108]
 219:main.c        **** 		RO_ALL_Data.GPS_sat_num=GPS_Data.numSV;
 724              	.LM60:
 725 054c 84329FE5 		ldr	r3, .L52+4
 726 0550 242093E5 		ldr	r2, [r3, #36]
 727 0554 98329FE5 		ldr	r3, .L52+32
 728 0558 682083E5 		str	r2, [r3, #104]
 220:main.c        **** 		RO_ALL_Data.GPS_week=GPS_Time.week;
 730              	.LM61:
 731 055c 94329FE5 		ldr	r3, .L52+36
 732 0560 B420D3E1 		ldrh	r2, [r3, #4]
 733 0564 88329FE5 		ldr	r3, .L52+32
 734 0568 B427C3E1 		strh	r2, [r3, #116]	@ movhi
 221:main.c        **** 		RO_ALL_Data.GPS_time_of_week=GPS_Time.time_of_week;
 736              	.LM62:
 737 056c 84329FE5 		ldr	r3, .L52+36
 738 0570 002093E5 		ldr	r2, [r3, #0]
 739 0574 78329FE5 		ldr	r3, .L52+32
 740 0578 702083E5 		str	r2, [r3, #112]
 222:main.c        **** 		RO_ALL_Data.GPS_heading=GPS_Data.heading;
 742              	.LM63:
 743 057c 54329FE5 		ldr	r3, .L52+4
 744 0580 142093E5 		ldr	r2, [r3, #20]
 745 0584 68329FE5 		ldr	r3, .L52+32
 746 0588 582083E5 		str	r2, [r3, #88]
 223:main.c        **** 		RO_ALL_Data.GPS_position_accuracy=GPS_Data.horizontal_accuracy;
 748              	.LM64:
 749 058c 44329FE5 		ldr	r3, .L52+4
 750 0590 182093E5 		ldr	r2, [r3, #24]
 751 0594 58329FE5 		ldr	r3, .L52+32
 752 0598 5C2083E5 		str	r2, [r3, #92]
 224:main.c        **** 		RO_ALL_Data.GPS_speed_accuracy=GPS_Data.speed_accuracy;
 754              	.LM65:
 755 059c 34329FE5 		ldr	r3, .L52+4
 756 05a0 202093E5 		ldr	r2, [r3, #32]
 757 05a4 48329FE5 		ldr	r3, .L52+32
 758 05a8 642083E5 		str	r2, [r3, #100]
 225:main.c        **** 		RO_ALL_Data.GPS_height_accuracy=GPS_Data.vertical_accuracy;
 760              	.LM66:
 761 05ac 24329FE5 		ldr	r3, .L52+4
 762 05b0 1C2093E5 		ldr	r2, [r3, #28]
 763 05b4 38329FE5 		ldr	r3, .L52+32
 764 05b8 602083E5 		str	r2, [r3, #96]
 226:main.c        **** 
 227:main.c        **** 		gpsLEDTrigger=0;
 766              	.LM67:
 767 05bc 28229FE5 		ldr	r2, .L52+24
 768 05c0 0030A0E3 		mov	r3, #0
 769 05c4 0030C2E5 		strb	r3, [r2, #0]
 770              	.L41:
 228:main.c        ****     }
 229:main.c        **** 
 230:main.c        **** //	//re-trigger UART-transmission if it was paused by modem CTS pin
 231:main.c        **** //	if(trigger_transmission)
 232:main.c        **** //	{
 233:main.c        **** //		if(!(IOPIN0&(1<<CTS_RADIO)))
 234:main.c        **** //	  	{
 235:main.c        **** //	  		trigger_transmission=0;
 236:main.c        **** //	    if(ringbuffer(RBREAD, &t, 1))
 237:main.c        **** //		    {
 238:main.c        **** //		      transmission_running=1;
 239:main.c        **** //		      UARTWriteChar(t);
 240:main.c        **** //		    }
 241:main.c        **** //	  	}
 242:main.c        **** //	}
 243:main.c        **** //
 244:main.c        **** //	//send attitude data packet as an example how to use HL_serial_0 (please refer to uart.c for det
 245:main.c        **** 
 246:main.c        **** //
 247:main.c        **** //
 248:main.c        **** 	if(uart_cnt++==ControllerCyclesPerSecond/DataOutputsPerSecond)
 772              	.LM68:
 773 05c8 2C329FE5 		ldr	r3, .L52+40
 774 05cc 004093E5 		ldr	r4, [r3, #0]
 775 05d0 28329FE5 		ldr	r3, .L52+44
 776 05d4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 777 05d8 FA0FA0E3 		mov	r0, #1000
 778 05dc 0310A0E1 		mov	r1, r3
 779 05e0 FEFFFFEB 		bl	__divsi3
 780 05e4 0030A0E1 		mov	r3, r0
 781 05e8 030054E1 		cmp	r4, r3
 782 05ec 0030A013 		movne	r3, #0
 783 05f0 0130A003 		moveq	r3, #1
 784 05f4 FF1003E2 		and	r1, r3, #255
 785 05f8 012084E2 		add	r2, r4, #1
 786 05fc F8319FE5 		ldr	r3, .L52+40
 787 0600 002083E5 		str	r2, [r3, #0]
 788 0604 000051E3 		cmp	r1, #0
 789 0608 6A00000A 		beq	.L46
 249:main.c        **** 	{
 250:main.c        **** 		uart_cnt=0;
 791              	.LM69:
 792 060c E8219FE5 		ldr	r2, .L52+40
 793 0610 0030A0E3 		mov	r3, #0
 794 0614 003082E5 		str	r3, [r2, #0]
 251:main.c        **** 		if(receiveCmdData.cmd==PACKAGE_DEFINE_DEBUG){
 796              	.LM70:
 797 0618 E4319FE5 		ldr	r3, .L52+48
 798 061c 003093E5 		ldr	r3, [r3, #0]
 799 0620 050053E3 		cmp	r3, #5
 800 0624 3100001A 		bne	.L48
 252:main.c        **** 			sendDebugData.timestamp=vicon_tp;
 802              	.LM71:
 803 0628 D8319FE5 		ldr	r3, .L52+52
 804 062c 002093E5 		ldr	r2, [r3, #0]
 805 0630 D4319FE5 		ldr	r3, .L52+56
 806 0634 002083E5 		str	r2, [r3, #0]
 253:main.c        **** 			sendDebugData.z=my_state.position.z;
 808              	.LM72:
 809 0638 D0319FE5 		ldr	r3, .L52+60
 810 063c 082093E5 		ldr	r2, [r3, #8]	@ float
 811 0640 C4319FE5 		ldr	r3, .L52+56
 812 0644 042083E5 		str	r2, [r3, #4]	@ float
 254:main.c        **** 			sendDebugData.vz=my_state.velocity.z;
 814              	.LM73:
 815 0648 C0319FE5 		ldr	r3, .L52+60
 816 064c 142093E5 		ldr	r2, [r3, #20]	@ float
 817 0650 B4319FE5 		ldr	r3, .L52+56
 818 0654 082083E5 		str	r2, [r3, #8]	@ float
 255:main.c        **** 			sendDebugData.battery=HL_Status.battery_voltage_1;
 820              	.LM74:
 821 0658 B4319FE5 		ldr	r3, .L52+64
 822 065c B030D3E1 		ldrh	r3, [r3, #0]
 823 0660 0338A0E1 		mov	r3, r3, asl #16
 824 0664 4328A0E1 		mov	r2, r3, asr #16
 825 0668 9C319FE5 		ldr	r3, .L52+56
 826 066c 0C2083E5 		str	r2, [r3, #12]
 256:main.c        **** 			sendDebugData.cpu_load=mainloop_cnt;
 828              	.LM75:
 829 0670 A0319FE5 		ldr	r3, .L52+68
 830 0674 003093E5 		ldr	r3, [r3, #0]
 831 0678 0320A0E1 		mov	r2, r3
 832 067c 88319FE5 		ldr	r3, .L52+56
 833 0680 102083E5 		str	r2, [r3, #16]
 257:main.c        **** 			sendDebugData.set_position=my_setpoint.position.z;
 835              	.LM76:
 836 0684 90319FE5 		ldr	r3, .L52+72
 837 0688 082093E5 		ldr	r2, [r3, #8]	@ float
 838 068c 78319FE5 		ldr	r3, .L52+56
 839 0690 182083E5 		str	r2, [r3, #24]	@ float
 258:main.c        **** 			sendDebugData.set_velocity=my_setpoint.velocity.z;
 841              	.LM77:
 842 0694 80319FE5 		ldr	r3, .L52+72
 843 0698 142093E5 		ldr	r2, [r3, #20]	@ float
 844 069c 68319FE5 		ldr	r3, .L52+56
 845 06a0 1C2083E5 		str	r2, [r3, #28]	@ float
 259:main.c        **** 			sendDebugData.vicon_count=vicon_count;
 847              	.LM78:
 848 06a4 74319FE5 		ldr	r3, .L52+76
 849 06a8 002093E5 		ldr	r2, [r3, #0]
 850 06ac 58319FE5 		ldr	r3, .L52+56
 851 06b0 142083E5 		str	r2, [r3, #20]
 260:main.c        **** 			sendDebugData.calc_thrust=calc_thrust;
 853              	.LM79:
 854 06b4 68319FE5 		ldr	r3, .L52+80
 855 06b8 002093E5 		ldr	r2, [r3, #0]	@ float
 856 06bc 48319FE5 		ldr	r3, .L52+56
 857 06c0 202083E5 		str	r2, [r3, #32]	@ float
 261:main.c        **** 			my_send(1,PACKAGE_DEFINE_DEBUG,
 859              	.LM80:
 860 06c4 0500A0E3 		mov	r0, #5
 861 06c8 FEFFFFEB 		bl	getPackageLength
 862 06cc 0030A0E1 		mov	r3, r0
 863 06d0 0320A0E1 		mov	r2, r3
 864 06d4 0130A0E3 		mov	r3, #1
 865 06d8 00308DE5 		str	r3, [sp, #0]
 866 06dc 0100A0E3 		mov	r0, #1
 867 06e0 0510A0E3 		mov	r1, #5
 868 06e4 20319FE5 		ldr	r3, .L52+56
 869 06e8 FEFFFFEB 		bl	my_send
 870 06ec 310000EA 		b	.L46
 871              	.L48:
 262:main.c        **** 					getPackageLength(PACKAGE_DEFINE_DEBUG),
 263:main.c        **** 					&sendDebugData,1);
 264:main.c        **** 		}else if(receiveCmdData.cmd==PACKAGE_DEFINE_PARAM){
 873              	.LM81:
 874 06f0 0C319FE5 		ldr	r3, .L52+48
 875 06f4 003093E5 		ldr	r3, [r3, #0]
 876 06f8 060053E3 		cmp	r3, #6
 877 06fc 2D00001A 		bne	.L46
 265:main.c        **** 			sendParamDebug.calc_thrust=calc_thrust;
 879              	.LM82:
 880 0700 1C319FE5 		ldr	r3, .L52+80
 881 0704 002093E5 		ldr	r2, [r3, #0]	@ float
 882 0708 18319FE5 		ldr	r3, .L52+84
 883 070c 202083E5 		str	r2, [r3, #32]	@ float
 266:main.c        **** 			sendParamDebug.ki_p=this.pidZ.pid.ki;
 885              	.LM83:
 886 0710 14319FE5 		ldr	r3, .L52+88
 887 0714 642093E5 		ldr	r2, [r3, #100]	@ float
 888 0718 08319FE5 		ldr	r3, .L52+84
 889 071c 102083E5 		str	r2, [r3, #16]	@ float
 267:main.c        **** 			sendParamDebug.kp_p=this.pidZ.pid.kp;
 891              	.LM84:
 892 0720 04319FE5 		ldr	r3, .L52+88
 893 0724 602093E5 		ldr	r2, [r3, #96]	@ float
 894 0728 F8309FE5 		ldr	r3, .L52+84
 895 072c 0C2083E5 		str	r2, [r3, #12]	@ float
 268:main.c        **** 			sendParamDebug.ki_v=this.pidVZ.pid.ki;
 897              	.LM85:
 898 0730 F4309FE5 		ldr	r3, .L52+88
 899 0734 182093E5 		ldr	r2, [r3, #24]	@ float
 900 0738 E8309FE5 		ldr	r3, .L52+84
 901 073c 082083E5 		str	r2, [r3, #8]	@ float
 269:main.c        **** 			sendParamDebug.kp_v=this.pidVZ.pid.kp;
 903              	.LM86:
 904 0740 E4309FE5 		ldr	r3, .L52+88
 905 0744 142093E5 		ldr	r2, [r3, #20]	@ float
 906 0748 D8309FE5 		ldr	r3, .L52+84
 907 074c 042083E5 		str	r2, [r3, #4]	@ float
 270:main.c        **** 			sendParamDebug.set_velocity=my_setpoint.velocity.z;
 909              	.LM87:
 910 0750 C4309FE5 		ldr	r3, .L52+72
 911 0754 142093E5 		ldr	r2, [r3, #20]	@ float
 912 0758 C8309FE5 		ldr	r3, .L52+84
 913 075c 1C2083E5 		str	r2, [r3, #28]	@ float
 271:main.c        **** 			sendParamDebug.vz=my_state.velocity.z;
 915              	.LM88:
 916 0760 A8309FE5 		ldr	r3, .L52+60
 917 0764 142093E5 		ldr	r2, [r3, #20]	@ float
 918 0768 B8309FE5 		ldr	r3, .L52+84
 919 076c 182083E5 		str	r2, [r3, #24]	@ float
 272:main.c        **** 			sendParamDebug.z=my_state.position.z;
 921              	.LM89:
 922 0770 98309FE5 		ldr	r3, .L52+60
 923 0774 082093E5 		ldr	r2, [r3, #8]	@ float
 924 0778 A8309FE5 		ldr	r3, .L52+84
 925 077c 142083E5 		str	r2, [r3, #20]	@ float
 273:main.c        **** 			sendParamDebug.thrust=output_thrust;
 927              	.LM90:
 928 0780 A8309FE5 		ldr	r3, .L52+92
 929 0784 002093E5 		ldr	r2, [r3, #0]
 930 0788 98309FE5 		ldr	r3, .L52+84
 931 078c 002083E5 		str	r2, [r3, #0]
 274:main.c        **** 			my_send(1,PACKAGE_DEFINE_PARAM,
 933              	.LM91:
 934 0790 0600A0E3 		mov	r0, #6
 935 0794 FEFFFFEB 		bl	getPackageLength
 936 0798 0030A0E1 		mov	r3, r0
 937 079c 0320A0E1 		mov	r2, r3
 938 07a0 0130A0E3 		mov	r3, #1
 939 07a4 00308DE5 		str	r3, [sp, #0]
 940 07a8 0100A0E3 		mov	r0, #1
 941 07ac 0610A0E3 		mov	r1, #6
 942 07b0 70309FE5 		ldr	r3, .L52+84
 943 07b4 FEFFFFEB 		bl	my_send
 944              	.L46:
 275:main.c        **** 					getPackageLength(PACKAGE_DEFINE_PARAM),
 276:main.c        **** 					&sendParamDebug,1);
 277:main.c        **** 		}
 278:main.c        **** 	}
 279:main.c        **** 	//handle gps data reception
 280:main.c        ****     uBloxReceiveEngine();
 946              	.LM92:
 947 07b8 FEFFFFEB 		bl	uBloxReceiveEngine
 281:main.c        **** 
 282:main.c        **** 	//run SDK mainloop. Please put all your data handling / controller code in sdk.c
 283:main.c        **** 	SDK_mainloop();
 949              	.LM93:
 950 07bc FEFFFFEB 		bl	SDK_mainloop
 284:main.c        **** 
 285:main.c        ****     //write data to transmit buffer for immediate transfer to LL processor
 286:main.c        ****     HL2LL_write_cycle();
 952              	.LM94:
 953 07c0 FEFFFFEB 		bl	HL2LL_write_cycle
 287:main.c        **** 
 288:main.c        ****     //control pan-tilt-unit ("cam option 4" @ AscTec Pelican)
 289:main.c        ****     PTU_update();
 955              	.LM95:
 956 07c4 FEFFFFEB 		bl	PTU_update
 290:main.c        **** 
 291:main.c        **** 
 292:main.c        **** }
 958              	.LM96:
 959 07c8 10D04BE2 		sub	sp, fp, #16
 960 07cc 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 961 07d0 1EFF2FE1 		bx	lr
 962              	.L53:
 963              		.align	2
 964              	.L52:
 965 07d4 20000000 		.word	led_cnt.2354
 966 07d8 00000000 		.word	GPS_Data
 967 07dc 00000000 		.word	SYSTEM_initialized
 968 07e0 00000000 		.word	declinationAvailable
 969 07e4 D34D6210 		.word	274877907
 970 07e8 00000000 		.word	estimatedDeclination
 971 07ec 00000000 		.word	gpsLEDTrigger
 972 07f0 01000000 		.word	led_state.2355
 973 07f4 00000000 		.word	RO_ALL_Data
 974 07f8 00000000 		.word	GPS_Time
 975 07fc 00000000 		.word	uart_cnt
 976 0800 00000000 		.word	DataOutputsPerSecond
 977 0804 00000000 		.word	receiveCmdData
 978 0808 00000000 		.word	vicon_tp
 979 080c 00000000 		.word	sendDebugData
 980 0810 00000000 		.word	my_state
 981 0814 00000000 		.word	HL_Status
 982 0818 00000000 		.word	mainloop_cnt
 983 081c 00000000 		.word	my_setpoint
 984 0820 00000000 		.word	vicon_count
 985 0824 00000000 		.word	calc_thrust
 986 0828 00000000 		.word	sendParamDebug
 987 082c 00000000 		.word	this
 988 0830 00000000 		.word	output_thrust
 998              	.Lscope2:
 999              		.comm	IMU_CalcData,92,4
 1000              		.comm	IMU_CalcData_tmp,92,4
 1001              		.comm	HL_Status,24,4
 1002              		.comm	GPS_Time,8,4
 1003              		.comm	SSP_trans_cnt,4,4
 1004              		.comm	uart_cnt,4,4
 1020              	.Letext0:
 1021              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccuDRz1z.s:148    .bss:00000000 int_cnt
     /tmp/ccuDRz1z.s:145    .bss:00000000 $d
     /tmp/ccuDRz1z.s:154    .bss:00000004 cnt
     /tmp/ccuDRz1z.s:160    .bss:00000008 mainloop_cnt
     /tmp/ccuDRz1z.s:165    .bss:0000000c mainloop_trigger
     /tmp/ccuDRz1z.s:171    .bss:00000010 GPS_timeout
     /tmp/ccuDRz1z.s:177    .bss:00000014 trigger_cnt
     /tmp/ccuDRz1z.s:182    .bss:00000018 SYSTEM_initialized
     /tmp/ccuDRz1z.s:188    .data:00000000 DataOutputsPerSecond
     /tmp/ccuDRz1z.s:191    .text:00000000 $a
     /tmp/ccuDRz1z.s:195    .text:00000000 timer0ISR
     /tmp/ccuDRz1z.s:280    .text:000000d8 $d
                            *COM*:00000018 HL_Status
     /tmp/ccuDRz1z.s:288    .bss:0000001c vbat1.2311
     /tmp/ccuDRz1z.s:292    .text:000000e8 $a
     /tmp/ccuDRz1z.s:296    .text:000000e8 main
     /tmp/ccuDRz1z.s:514    .text:00000318 mainloop
     /tmp/ccuDRz1z.s:484    .text:000002f4 $d
     /tmp/ccuDRz1z.s:501    .data:00000001 led_state.2355
     /tmp/ccuDRz1z.s:505    .bss:00000020 led_cnt.2354
     /tmp/ccuDRz1z.s:510    .text:00000318 $a
     /tmp/ccuDRz1z.s:965    .text:000007d4 $d
                            *COM*:00000008 GPS_Time
                            *COM*:00000004 uart_cnt
                            *COM*:0000005c IMU_CalcData
                            *COM*:0000005c IMU_CalcData_tmp
                            *COM*:00000004 SSP_trans_cnt

UNDEFINED SYMBOLS
init
buzzer
LL_write_init
PTU_init
ADC0triggerSampling
LED
ADC0getSamplingResults
buzzer_handler
GPS_Data
adcChannelValues
__divsi3
getDeclination
getPackageLength
my_send
uBloxReceiveEngine
SDK_mainloop
HL2LL_write_cycle
PTU_update
declinationAvailable
estimatedDeclination
gpsLEDTrigger
RO_ALL_Data
receiveCmdData
vicon_tp
sendDebugData
my_state
my_setpoint
vicon_count
calc_thrust
sendParamDebug
this
output_thrust
