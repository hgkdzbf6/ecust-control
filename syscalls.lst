   1              		.file	"syscalls.c"
   3              		.text
   4              	.Ltext0:
 158              		.align	2
 164              		.global	_read_r
 166              	_read_r:
   1:syscalls.c    **** /***********************************************************************/
   2:syscalls.c    **** /*                                                                     */
   3:syscalls.c    **** /*  SYSCALLS.C:  System Calls Remapping                                */
   4:syscalls.c    **** /*  most of this is from newlib-lpc and a Keil-demo                    */
   5:syscalls.c    **** /*                                                                     */
   6:syscalls.c    **** /*  these are "reentrant functions" as needed by                       */
   7:syscalls.c    **** /*  the WinARM-newlib-config, see newlib-manual                        */
   8:syscalls.c    **** /*  collected and modified by Martin Thomas                            */
   9:syscalls.c    **** /*  some more work has to be done on this		                       */
  10:syscalls.c    **** /***********************************************************************/
  11:syscalls.c    **** 
  12:syscalls.c    **** #include <stdlib.h>
  13:syscalls.c    **** #include <reent.h>
  14:syscalls.c    **** #include <sys/stat.h>
  15:syscalls.c    **** #include "uart.h"
  16:syscalls.c    **** 
  17:syscalls.c    **** // new code for _read_r provided by Alexey Shusharin - Thanks
  18:syscalls.c    **** _ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
  19:syscalls.c    **** {
 168              	.LM0:
 169              		@ Function supports interworking.
 170              		@ args = 0, pretend = 0, frame = 32
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 0DC0A0E1 		mov	ip, sp
 173 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 174 0008 04B04CE2 		sub	fp, ip, #4
 175 000c 20D04DE2 		sub	sp, sp, #32
 176 0010 1C000BE5 		str	r0, [fp, #-28]
 177 0014 20100BE5 		str	r1, [fp, #-32]
 178 0018 24200BE5 		str	r2, [fp, #-36]
 179 001c 28300BE5 		str	r3, [fp, #-40]
  20:syscalls.c    ****   char c;
  21:syscalls.c    ****   int  i;
  22:syscalls.c    ****   unsigned char *p;
  23:syscalls.c    **** 
  24:syscalls.c    ****   p = (unsigned char*)ptr;
 181              	.LM1:
 182 0020 24301BE5 		ldr	r3, [fp, #-36]
 183 0024 10300BE5 		str	r3, [fp, #-16]
  25:syscalls.c    **** 
  26:syscalls.c    ****   for (i = 0; i < len; i++)
 185              	.LM2:
 186 0028 0030A0E3 		mov	r3, #0
 187 002c 14300BE5 		str	r3, [fp, #-20]
 188 0030 1F0000EA 		b	.L2
 189              	.L3:
  27:syscalls.c    ****   {
  28:syscalls.c    ****     c = UARTReadChar();
 191              	.LM3:
 192 0034 FEFFFFEB 		bl	UARTReadChar
 193 0038 0030A0E1 		mov	r3, r0
 194 003c 15304BE5 		strb	r3, [fp, #-21]
  29:syscalls.c    **** 
  30:syscalls.c    ****     *p++ = c;
 196              	.LM4:
 197 0040 10201BE5 		ldr	r2, [fp, #-16]
 198 0044 15305BE5 		ldrb	r3, [fp, #-21]
 199 0048 0030C2E5 		strb	r3, [r2, #0]
 200 004c 10301BE5 		ldr	r3, [fp, #-16]
 201 0050 013083E2 		add	r3, r3, #1
 202 0054 10300BE5 		str	r3, [fp, #-16]
  31:syscalls.c    ****     UARTWriteChar(c);
 204              	.LM5:
 205 0058 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 206 005c 0300A0E1 		mov	r0, r3
 207 0060 FEFFFFEB 		bl	UARTWriteChar
  32:syscalls.c    **** 
  33:syscalls.c    ****     if (c == 0x0D && i <= (len - 2))
 209              	.LM6:
 210 0064 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 211 0068 0D0053E3 		cmp	r3, #13
 212 006c 0D00001A 		bne	.L4
 213 0070 14301BE5 		ldr	r3, [fp, #-20]
 214 0074 28201BE5 		ldr	r2, [fp, #-40]
 215 0078 022042E2 		sub	r2, r2, #2
 216 007c 020053E1 		cmp	r3, r2
 217 0080 0800008A 		bhi	.L4
  34:syscalls.c    ****     {
  35:syscalls.c    ****       *p = 0x0A;
 219              	.LM7:
 220 0084 10201BE5 		ldr	r2, [fp, #-16]
 221 0088 0A30A0E3 		mov	r3, #10
 222 008c 0030C2E5 		strb	r3, [r2, #0]
  36:syscalls.c    ****       UARTWriteChar(0x0A);
 224              	.LM8:
 225 0090 0A00A0E3 		mov	r0, #10
 226 0094 FEFFFFEB 		bl	UARTWriteChar
  37:syscalls.c    ****       return i + 2;
 228              	.LM9:
 229 0098 14301BE5 		ldr	r3, [fp, #-20]
 230 009c 023083E2 		add	r3, r3, #2
 231 00a0 2C300BE5 		str	r3, [fp, #-44]
 232 00a4 080000EA 		b	.L7
 233              	.L4:
  26:syscalls.c    ****   for (i = 0; i < len; i++)
 235              	.LM10:
 236 00a8 14301BE5 		ldr	r3, [fp, #-20]
 237 00ac 013083E2 		add	r3, r3, #1
 238 00b0 14300BE5 		str	r3, [fp, #-20]
 239              	.L2:
 240 00b4 14201BE5 		ldr	r2, [fp, #-20]
 241 00b8 28301BE5 		ldr	r3, [fp, #-40]
 242 00bc 030052E1 		cmp	r2, r3
 243 00c0 DBFFFF3A 		bcc	.L3
  38:syscalls.c    ****     }
  39:syscalls.c    ****   }
  40:syscalls.c    ****   return i;
 245              	.LM11:
 246 00c4 14301BE5 		ldr	r3, [fp, #-20]
 247 00c8 2C300BE5 		str	r3, [fp, #-44]
 248              	.L7:
 249 00cc 2C301BE5 		ldr	r3, [fp, #-44]
  41:syscalls.c    **** }
 251              	.LM12:
 252 00d0 0300A0E1 		mov	r0, r3
 253 00d4 0CD04BE2 		sub	sp, fp, #12
 254 00d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 255 00dc 1EFF2FE1 		bx	lr
 262              	.Lscope0:
 263              		.align	2
 269              		.global	_write_r
 271              	_write_r:
  42:syscalls.c    **** 
  43:syscalls.c    **** 
  44:syscalls.c    **** #if 0
  45:syscalls.c    **** // old version - no longer in use
  46:syscalls.c    **** _ssize_t _read_r(
  47:syscalls.c    ****     struct _reent *r, 
  48:syscalls.c    ****     int file, 
  49:syscalls.c    ****     void *ptr, 
  50:syscalls.c    ****     size_t len)
  51:syscalls.c    **** {
  52:syscalls.c    **** 	char c;
  53:syscalls.c    **** 	int  i;
  54:syscalls.c    **** 	unsigned char *p;
  55:syscalls.c    **** 	
  56:syscalls.c    **** 	p = (unsigned char*)ptr;
  57:syscalls.c    **** 	
  58:syscalls.c    **** 	for (i = 0; i < len; i++) {
  59:syscalls.c    **** 		// c = uart0Getch();
  60:syscalls.c    **** 		c = UARTReadChar();
  61:syscalls.c    **** 		if (c == 0x0D) {
  62:syscalls.c    **** 			*p='\0';
  63:syscalls.c    **** 			break;
  64:syscalls.c    **** 		}
  65:syscalls.c    **** 		*p++ = c;
  66:syscalls.c    **** 		UARTWriteChar(c);
  67:syscalls.c    **** 	}
  68:syscalls.c    **** 	return len - i;
  69:syscalls.c    **** }
  70:syscalls.c    **** #endif
  71:syscalls.c    **** 
  72:syscalls.c    **** _ssize_t _write_r (
  73:syscalls.c    ****     struct _reent *r, 
  74:syscalls.c    ****     int file, 
  75:syscalls.c    ****     const void *ptr, 
  76:syscalls.c    ****     size_t len)
  77:syscalls.c    **** {
 273              	.LM13:
 274              		@ Function supports interworking.
 275              		@ args = 0, pretend = 0, frame = 24
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277 00e0 0DC0A0E1 		mov	ip, sp
 278 00e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 279 00e8 04B04CE2 		sub	fp, ip, #4
 280 00ec 18D04DE2 		sub	sp, sp, #24
 281 00f0 18000BE5 		str	r0, [fp, #-24]
 282 00f4 1C100BE5 		str	r1, [fp, #-28]
 283 00f8 20200BE5 		str	r2, [fp, #-32]
 284 00fc 24300BE5 		str	r3, [fp, #-36]
  78:syscalls.c    **** 	int i;
  79:syscalls.c    **** 	const unsigned char *p;
  80:syscalls.c    **** 	
  81:syscalls.c    **** 	p = (const unsigned char*) ptr;
 286              	.LM14:
 287 0100 20301BE5 		ldr	r3, [fp, #-32]
 288 0104 10300BE5 		str	r3, [fp, #-16]
  82:syscalls.c    **** 	
  83:syscalls.c    **** 	for (i = 0; i < len; i++) {
 290              	.LM15:
 291 0108 0030A0E3 		mov	r3, #0
 292 010c 14300BE5 		str	r3, [fp, #-20]
 293 0110 100000EA 		b	.L11
 294              	.L12:
  84:syscalls.c    **** 		if (*p == '\n' ) UARTWriteChar('\r');
 296              	.LM16:
 297 0114 10301BE5 		ldr	r3, [fp, #-16]
 298 0118 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 299 011c 0A0053E3 		cmp	r3, #10
 300 0120 0100001A 		bne	.L13
 301 0124 0D00A0E3 		mov	r0, #13
 302 0128 FEFFFFEB 		bl	UARTWriteChar
 303              	.L13:
  85:syscalls.c    **** 		UARTWriteChar(*p++);
 305              	.LM17:
 306 012c 10301BE5 		ldr	r3, [fp, #-16]
 307 0130 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 308 0134 0320A0E1 		mov	r2, r3
 309 0138 10301BE5 		ldr	r3, [fp, #-16]
 310 013c 013083E2 		add	r3, r3, #1
 311 0140 10300BE5 		str	r3, [fp, #-16]
 312 0144 0200A0E1 		mov	r0, r2
 313 0148 FEFFFFEB 		bl	UARTWriteChar
  83:syscalls.c    **** 	for (i = 0; i < len; i++) {
 315              	.LM18:
 316 014c 14301BE5 		ldr	r3, [fp, #-20]
 317 0150 013083E2 		add	r3, r3, #1
 318 0154 14300BE5 		str	r3, [fp, #-20]
 319              	.L11:
 320 0158 14201BE5 		ldr	r2, [fp, #-20]
 321 015c 24301BE5 		ldr	r3, [fp, #-36]
 322 0160 030052E1 		cmp	r2, r3
 323 0164 EAFFFF3A 		bcc	.L12
  86:syscalls.c    **** 	}
  87:syscalls.c    **** 	
  88:syscalls.c    **** 	return len;
 325              	.LM19:
 326 0168 24301BE5 		ldr	r3, [fp, #-36]
  89:syscalls.c    **** }
 328              	.LM20:
 329 016c 0300A0E1 		mov	r0, r3
 330 0170 0CD04BE2 		sub	sp, fp, #12
 331 0174 00689DE8 		ldmfd	sp, {fp, sp, lr}
 332 0178 1EFF2FE1 		bx	lr
 338              	.Lscope1:
 339              		.align	2
 343              		.global	_close_r
 345              	_close_r:
  90:syscalls.c    **** 
  91:syscalls.c    **** int _close_r(
  92:syscalls.c    ****     struct _reent *r, 
  93:syscalls.c    ****     int file)
  94:syscalls.c    **** {
 347              	.LM21:
 348              		@ Function supports interworking.
 349              		@ args = 0, pretend = 0, frame = 8
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 017c 0DC0A0E1 		mov	ip, sp
 352 0180 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 353 0184 04B04CE2 		sub	fp, ip, #4
 354 0188 08D04DE2 		sub	sp, sp, #8
 355 018c 10000BE5 		str	r0, [fp, #-16]
 356 0190 14100BE5 		str	r1, [fp, #-20]
  95:syscalls.c    **** 	return 0;
 358              	.LM22:
 359 0194 0030A0E3 		mov	r3, #0
  96:syscalls.c    **** }
 361              	.LM23:
 362 0198 0300A0E1 		mov	r0, r3
 363 019c 0CD04BE2 		sub	sp, fp, #12
 364 01a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 365 01a4 1EFF2FE1 		bx	lr
 367              	.Lscope2:
 368              		.align	2
 374              		.global	_lseek_r
 376              	_lseek_r:
  97:syscalls.c    **** 
  98:syscalls.c    **** _off_t _lseek_r(
  99:syscalls.c    ****     struct _reent *r, 
 100:syscalls.c    ****     int file, 
 101:syscalls.c    ****     _off_t ptr, 
 102:syscalls.c    ****     int dir)
 103:syscalls.c    **** {
 378              	.LM24:
 379              		@ Function supports interworking.
 380              		@ args = 0, pretend = 0, frame = 16
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382 01a8 0DC0A0E1 		mov	ip, sp
 383 01ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 384 01b0 04B04CE2 		sub	fp, ip, #4
 385 01b4 10D04DE2 		sub	sp, sp, #16
 386 01b8 10000BE5 		str	r0, [fp, #-16]
 387 01bc 14100BE5 		str	r1, [fp, #-20]
 388 01c0 18200BE5 		str	r2, [fp, #-24]
 389 01c4 1C300BE5 		str	r3, [fp, #-28]
 104:syscalls.c    **** 	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
 391              	.LM25:
 392 01c8 0030A0E3 		mov	r3, #0
 105:syscalls.c    **** }
 394              	.LM26:
 395 01cc 0300A0E1 		mov	r0, r3
 396 01d0 0CD04BE2 		sub	sp, fp, #12
 397 01d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 398 01d8 1EFF2FE1 		bx	lr
 400              	.Lscope3:
 401              		.align	2
 406              		.global	_fstat_r
 408              	_fstat_r:
 106:syscalls.c    **** 
 107:syscalls.c    **** 
 108:syscalls.c    **** int _fstat_r(
 109:syscalls.c    ****     struct _reent *r, 
 110:syscalls.c    ****     int file, 
 111:syscalls.c    ****     struct stat *st)
 112:syscalls.c    **** {
 410              	.LM27:
 411              		@ Function supports interworking.
 412              		@ args = 0, pretend = 0, frame = 12
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414 01dc 0DC0A0E1 		mov	ip, sp
 415 01e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 416 01e4 04B04CE2 		sub	fp, ip, #4
 417 01e8 0CD04DE2 		sub	sp, sp, #12
 418 01ec 10000BE5 		str	r0, [fp, #-16]
 419 01f0 14100BE5 		str	r1, [fp, #-20]
 420 01f4 18200BE5 		str	r2, [fp, #-24]
 113:syscalls.c    **** 	/*  Always set as character device.				*/
 114:syscalls.c    **** 	st->st_mode = S_IFCHR;	
 422              	.LM28:
 423 01f8 18201BE5 		ldr	r2, [fp, #-24]
 424 01fc 023AA0E3 		mov	r3, #8192
 425 0200 043082E5 		str	r3, [r2, #4]
 115:syscalls.c    **** 		/* assigned to strong type with implicit 	*/
 116:syscalls.c    **** 		/* signed/unsigned conversion.  Required by 	*/
 117:syscalls.c    **** 		/* newlib.					*/
 118:syscalls.c    **** 
 119:syscalls.c    **** 	return 0;
 427              	.LM29:
 428 0204 0030A0E3 		mov	r3, #0
 120:syscalls.c    **** }
 430              	.LM30:
 431 0208 0300A0E1 		mov	r0, r3
 432 020c 0CD04BE2 		sub	sp, fp, #12
 433 0210 00689DE8 		ldmfd	sp, {fp, sp, lr}
 434 0214 1EFF2FE1 		bx	lr
 436              	.Lscope4:
 437              		.align	2
 440              		.global	isatty
 442              	isatty:
 121:syscalls.c    **** 
 122:syscalls.c    **** int isatty(int file); /* avoid warning */
 123:syscalls.c    **** 
 124:syscalls.c    **** int isatty(int file)
 125:syscalls.c    **** {
 444              	.LM31:
 445              		@ Function supports interworking.
 446              		@ args = 0, pretend = 0, frame = 4
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448 0218 0DC0A0E1 		mov	ip, sp
 449 021c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 450 0220 04B04CE2 		sub	fp, ip, #4
 451 0224 04D04DE2 		sub	sp, sp, #4
 452 0228 10000BE5 		str	r0, [fp, #-16]
 126:syscalls.c    **** 	return 1;
 454              	.LM32:
 455 022c 0130A0E3 		mov	r3, #1
 127:syscalls.c    **** }
 457              	.LM33:
 458 0230 0300A0E1 		mov	r0, r3
 459 0234 0CD04BE2 		sub	sp, fp, #12
 460 0238 00689DE8 		ldmfd	sp, {fp, sp, lr}
 461 023c 1EFF2FE1 		bx	lr
 463              	.Lscope5:
 464              		.align	2
 468              		.global	_sbrk_r
 470              	_sbrk_r:
 128:syscalls.c    **** 
 129:syscalls.c    **** #if 0
 130:syscalls.c    **** static void _exit (int n) {
 131:syscalls.c    **** label:  goto label; /* endless loop */
 132:syscalls.c    **** }
 133:syscalls.c    **** #endif 
 134:syscalls.c    **** 
 135:syscalls.c    **** /* "malloc clue function" */
 136:syscalls.c    **** 
 137:syscalls.c    **** 	/**** Locally used variables. ****/
 138:syscalls.c    **** extern char _end[];              /*  end is set in the linker command 	*/
 139:syscalls.c    **** 				/* file and is the end of statically 	*/
 140:syscalls.c    **** 				/* allocated data (thus start of heap).	*/
 141:syscalls.c    **** 
 142:syscalls.c    **** static char *heap_ptr;		/* Points to current end of the heap.	*/
 143:syscalls.c    **** 
 144:syscalls.c    **** /************************** _sbrk_r *************************************/
 145:syscalls.c    **** /*  Support function.  Adjusts end of heap to provide more memory to	*/
 146:syscalls.c    **** /* memory allocator. Simple and dumb with no sanity checks.		*/
 147:syscalls.c    **** /*  struct _reent *r	-- re-entrancy structure, used by newlib to 	*/
 148:syscalls.c    **** /*			support multiple threads of operation.		*/
 149:syscalls.c    **** /*  ptrdiff_t nbytes	-- number of bytes to add.			*/
 150:syscalls.c    **** /*  Returns pointer to start of new heap area.				*/
 151:syscalls.c    **** /*  Note:  This implementation is not thread safe (despite taking a	*/
 152:syscalls.c    **** /* _reent structure as a parameter).  					*/
 153:syscalls.c    **** /*  Since _s_r is not used in the current implementation, the following	*/
 154:syscalls.c    **** /* messages must be suppressed.						*/
 155:syscalls.c    **** 
 156:syscalls.c    **** void * _sbrk_r(
 157:syscalls.c    ****     struct _reent *_s_r, 
 158:syscalls.c    ****     ptrdiff_t nbytes)
 159:syscalls.c    **** {
 472              	.LM34:
 473              		@ Function supports interworking.
 474              		@ args = 0, pretend = 0, frame = 12
 475              		@ frame_needed = 1, uses_anonymous_args = 0
 476 0240 0DC0A0E1 		mov	ip, sp
 477 0244 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 478 0248 04B04CE2 		sub	fp, ip, #4
 479 024c 0CD04DE2 		sub	sp, sp, #12
 480 0250 14000BE5 		str	r0, [fp, #-20]
 481 0254 18100BE5 		str	r1, [fp, #-24]
 160:syscalls.c    **** 	char  *base;		/*  errno should be set to  ENOMEM on error	*/
 161:syscalls.c    **** 
 162:syscalls.c    **** 	if (!heap_ptr) {	/*  Initialize if first time through.		*/
 483              	.LM35:
 484 0258 4C309FE5 		ldr	r3, .L29
 485 025c 003093E5 		ldr	r3, [r3, #0]
 486 0260 000053E3 		cmp	r3, #0
 487 0264 0200001A 		bne	.L26
 163:syscalls.c    **** 		heap_ptr = _end;
 489              	.LM36:
 490 0268 3C209FE5 		ldr	r2, .L29
 491 026c 3C309FE5 		ldr	r3, .L29+4
 492 0270 003082E5 		str	r3, [r2, #0]
 493              	.L26:
 164:syscalls.c    **** 	}
 165:syscalls.c    **** 	base = heap_ptr;	/*  Point to end of heap.			*/
 495              	.LM37:
 496 0274 30309FE5 		ldr	r3, .L29
 497 0278 003093E5 		ldr	r3, [r3, #0]
 498 027c 10300BE5 		str	r3, [fp, #-16]
 166:syscalls.c    **** 	heap_ptr += nbytes;	/*  Increase heap.				*/
 500              	.LM38:
 501 0280 24309FE5 		ldr	r3, .L29
 502 0284 002093E5 		ldr	r2, [r3, #0]
 503 0288 18301BE5 		ldr	r3, [fp, #-24]
 504 028c 032082E0 		add	r2, r2, r3
 505 0290 14309FE5 		ldr	r3, .L29
 506 0294 002083E5 		str	r2, [r3, #0]
 167:syscalls.c    **** 	
 168:syscalls.c    **** 	return base;		/*  Return pointer to start of new heap area.	*/
 508              	.LM39:
 509 0298 10301BE5 		ldr	r3, [fp, #-16]
 169:syscalls.c    **** }
 511              	.LM40:
 512 029c 0300A0E1 		mov	r0, r3
 513 02a0 0CD04BE2 		sub	sp, fp, #12
 514 02a4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 515 02a8 1EFF2FE1 		bx	lr
 516              	.L30:
 517              		.align	2
 518              	.L29:
 519 02ac 00000000 		.word	heap_ptr
 520 02b0 00000000 		.word	_end
 525              	.Lscope6:
 526              		.bss
 527              		.align	2
 528              	heap_ptr:
 529 0000 00000000 		.space	4
 531              		.text
 533              	.Letext0:
 534              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
     /tmp/ccVKZtzy.s:158    .text:00000000 $a
     /tmp/ccVKZtzy.s:166    .text:00000000 _read_r
     /tmp/ccVKZtzy.s:271    .text:000000e0 _write_r
     /tmp/ccVKZtzy.s:345    .text:0000017c _close_r
     /tmp/ccVKZtzy.s:376    .text:000001a8 _lseek_r
     /tmp/ccVKZtzy.s:408    .text:000001dc _fstat_r
     /tmp/ccVKZtzy.s:442    .text:00000218 isatty
     /tmp/ccVKZtzy.s:470    .text:00000240 _sbrk_r
     /tmp/ccVKZtzy.s:519    .text:000002ac $d
     /tmp/ccVKZtzy.s:528    .bss:00000000 heap_ptr
     /tmp/ccVKZtzy.s:527    .bss:00000000 $d

UNDEFINED SYMBOLS
UARTReadChar
UARTWriteChar
_end
