   1              		.file	"position_controller.c"
   3              		.text
   4              	.Ltext0:
  50              		.global	rpLimit
  51              		.data
  52              		.align	2
  55              	rpLimit:
  56 0000 0000C843 		.word	1137180672
  57              		.global	rpLimitOverhead
  58              		.align	2
  61              	rpLimitOverhead:
  62 0004 CDCC8C3F 		.word	1066192077
  63              		.global	xyVelMax
  64              		.align	2
  67              	xyVelMax:
  68 0008 0000C843 		.word	1137180672
  69              		.global	zVelMax
  70              		.align	2
  73              	zVelMax:
  74 000c 00002041 		.word	1092616192
  75              		.global	velMaxOverhead
  76              		.align	2
  79              	velMaxOverhead:
  80 0010 CDCC8C3F 		.word	1066192077
  81              		.global	thrustScale
  82              		.section	.rodata
  83              		.align	2
  86              	thrustScale:
  87 0000 00007A44 		.word	1148846080
  88              		.global	my_this
  89              		.data
  90              		.align	2
  93              	my_this:
  94 0014 00000000 		.space	52
  94      00000000 
  94      00000000 
  94      00000000 
  94      00000000 
  95 0048 0AD7233C 		.word	1008981770
  96 004c 0000803F 		.word	1065353216
  97 0050 CDCC4C3D 		.word	1028443341
  98 0054 00000000 		.word	0
  99 0058 00000000 		.space	8
  99      00000000 
 100 0060 00000000 		.space	44
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101 008c 0000C842 		.word	1120403456
 102 0090 00000000 		.space	4
 103 0094 0AD7233C 		.word	1008981770
 104 0098 CDCC4C3F 		.word	1061997773
 105 009c 00000000 		.word	0
 106 00a0 00000000 		.word	0
 107 00a4 00000000 		.space	8
 107      00000000 
 108 00ac 00000000 		.space	52
 108      00000000 
 108      00000000 
 108      00000000 
 108      00000000 
 109 00e0 0AD7233C 		.word	1008981770
 110 00e4 0000803F 		.word	1065353216
 111 00e8 00000000 		.word	0
 112 00ec 00000000 		.word	0
 113 00f0 00000000 		.space	8
 113      00000000 
 114 00f8 00000000 		.space	52
 114      00000000 
 114      00000000 
 114      00000000 
 114      00000000 
 115 012c 0AD7233C 		.word	1008981770
 116 0130 CDCCCC3E 		.word	1053609165
 117 0134 00000000 		.word	0
 118 0138 00000000 		.word	0
 119 013c 00000000 		.space	8
 119      00000000 
 120 0144 00000000 		.space	52
 120      00000000 
 120      00000000 
 120      00000000 
 120      00000000 
 121 0178 0AD7233C 		.word	1008981770
 122 017c 0000803F 		.word	1065353216
 123 0180 00000000 		.word	0
 124 0184 00000000 		.word	0
 125 0188 00000000 		.space	8
 125      00000000 
 126 0190 00000000 		.space	52
 126      00000000 
 126      00000000 
 126      00000000 
 126      00000000 
 127 01c4 0AD7233C 		.word	1008981770
 128 01c8 CDCCCC3E 		.word	1053609165
 129 01cc 00000000 		.word	0
 130 01d0 00000000 		.word	0
 131 01d4 00000000 		.space	8
 131      00000000 
 132 01dc 3A07     		.short	1850
 133 01de 5802     		.short	600
 134              		.bss
 135              		.align	2
 136              	estimateMode.1455:
 137 0000 00000000 		.space	4
 139              		.align	2
 140              	prev_estimatedZ.1454:
 141 0004 00000000 		.space	4
 143              		.global	__mulsf3
 144              		.global	__subsf3
 145              		.global	__addsf3
 146              		.global	__eqsf2
 147              		.text
 148              		.align	2
 155              		.global	positionEstimate
 157              	positionEstimate:
   1:position_controller.c **** /**
   2:position_controller.c ****  *    ||          ____  _ __
   3:position_controller.c ****  * +------+      / __ )(_) /_______________ _____  ___
   4:position_controller.c ****  * | 0xBC |     / __  / / __/ ___/ ___/ __ `/_  / / _ \
   5:position_controller.c ****  * +------+    / /_/ / / /_/ /__/ /  / /_/ / / /_/  __/
   6:position_controller.c ****  *  ||  ||    /_____/_/\__/\___/_/   \__,_/ /___/\___/
   7:position_controller.c ****  *
   8:position_controller.c ****  * Crazyflie Firmware
   9:position_controller.c ****  *
  10:position_controller.c ****  * Copyright (C) 2016 Bitcraze AB
  11:position_controller.c ****  *
  12:position_controller.c ****  * This program is free software: you can redistribute it and/or modify
  13:position_controller.c ****  * it under the terms of the GNU General Public License as published by
  14:position_controller.c ****  * the Free Software Foundation, in version 3.
  15:position_controller.c ****  *
  16:position_controller.c ****  * This program is distributed in the hope that it will be useful,
  17:position_controller.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  18:position_controller.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  19:position_controller.c ****  * GNU General Public License for more details.
  20:position_controller.c ****  *
  21:position_controller.c ****  * You should have received a copy of the GNU General Public License
  22:position_controller.c ****  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  23:position_controller.c ****  *
  24:position_controller.c ****  * position_estimator_pid.c: PID-based implementation of the position controller
  25:position_controller.c ****  */
  26:position_controller.c **** 
  27:position_controller.c **** #include "sdk.h"
  28:position_controller.c **** #include "pid.h"
  29:position_controller.c **** #include "position_controller.h"
  30:position_controller.c **** 
  31:position_controller.c **** // Maximum roll/pitch angle permited
  32:position_controller.c **** float rpLimit  = 400.0f;
  33:position_controller.c **** float rpLimitOverhead = 1.10f;
  34:position_controller.c **** // Velocity maximums
  35:position_controller.c **** float xyVelMax=400.0f;
  36:position_controller.c ****  float zVelMax  = 10.0f;
  37:position_controller.c ****  float velMaxOverhead = 1.10f;
  38:position_controller.c ****  const float thrustScale = 1000.0f;
  39:position_controller.c **** 
  40:position_controller.c **** #define POSITION_RATE 100
  41:position_controller.c **** #define DT (float)(1.0/POSITION_RATE)
  42:position_controller.c **** #define POSITION_LPF_CUTOFF_FREQ 20.0f
  43:position_controller.c **** #define POSITION_LPF_ENABLE true
  44:position_controller.c **** struct this_s my_this = {
  45:position_controller.c **** 	.pidVX = {
  46:position_controller.c **** 	    .init = {
  47:position_controller.c **** 	      .kp = 1,
  48:position_controller.c **** 	      .ki = 0,
  49:position_controller.c **** 	      .kd = 0,
  50:position_controller.c **** 	    },
  51:position_controller.c **** 	    .pid.dt = DT,
  52:position_controller.c **** 	  },
  53:position_controller.c **** 
  54:position_controller.c **** 	  .pidVY = {
  55:position_controller.c **** 	    .init = {
  56:position_controller.c **** 	      .kp = 1,
  57:position_controller.c **** 	      .ki = 0,
  58:position_controller.c **** 	      .kd = 0,
  59:position_controller.c **** 	    },
  60:position_controller.c **** 	    .pid.dt = DT,
  61:position_controller.c **** 	  },
  62:position_controller.c **** 
  63:position_controller.c ****   .pidVZ = {
  64:position_controller.c ****     .init = {
  65:position_controller.c ****       .kp = 1,
  66:position_controller.c ****       .ki = 0.05f,
  67:position_controller.c ****       .kd = 0,
  68:position_controller.c ****     },
  69:position_controller.c ****     .pid.dt = DT,
  70:position_controller.c ****   },
  71:position_controller.c ****   .pidX = {
  72:position_controller.c ****     .init = {
  73:position_controller.c ****       .kp = 0.4,
  74:position_controller.c ****       .ki = 0,
  75:position_controller.c ****       .kd = 0,
  76:position_controller.c ****     },
  77:position_controller.c ****     .pid.dt = DT,
  78:position_controller.c ****   },
  79:position_controller.c ****   .pidY = {
  80:position_controller.c ****     .init = {
  81:position_controller.c ****       .kp = 0.4,
  82:position_controller.c ****       .ki = 0,
  83:position_controller.c ****       .kd = 0,
  84:position_controller.c ****     },
  85:position_controller.c ****     .pid.dt = DT,
  86:position_controller.c ****   },
  87:position_controller.c ****   .pidZ = {
  88:position_controller.c ****     .init = {
  89:position_controller.c ****       .kp = 0.8f,
  90:position_controller.c ****       .ki = 0,
  91:position_controller.c ****       .kd = 0,
  92:position_controller.c ****     },
  93:position_controller.c ****     .pid ={
  94:position_controller.c ****     		.dt=DT,
  95:position_controller.c **** 			.iLimit=100,
  96:position_controller.c ****     },
  97:position_controller.c ****   },
  98:position_controller.c **** 
  99:position_controller.c ****   .thrustBase = 1850,
 100:position_controller.c ****   .thrustMin  = 600,
 101:position_controller.c **** };
 102:position_controller.c **** 
 103:position_controller.c **** void positionEstimate(state_t* estimate,
 104:position_controller.c **** 		const float vicon_data,
 105:position_controller.c **** 		const long timestamp,
 106:position_controller.c **** 		EstimateParams* params,
 107:position_controller.c **** 		const float dt){
 159              	.LM0:
 160              		@ Function supports interworking.
 161              		@ args = 4, pretend = 0, frame = 20
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 0DC0A0E1 		mov	ip, sp
 164 0004 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 165 0008 04B04CE2 		sub	fp, ip, #4
 166 000c 14D04DE2 		sub	sp, sp, #20
 167 0010 18000BE5 		str	r0, [fp, #-24]
 168 0014 1C100BE5 		str	r1, [fp, #-28]	@ float
 169 0018 20200BE5 		str	r2, [fp, #-32]
 170 001c 24300BE5 		str	r3, [fp, #-36]
 108:position_controller.c **** 	float filteredZ;
 109:position_controller.c **** 	static float prev_estimatedZ=0;
 110:position_controller.c **** 	static int estimateMode=0;
 111:position_controller.c **** 	if(estimate->timestamp==timestamp){
 172              	.LM1:
 173 0020 18301BE5 		ldr	r3, [fp, #-24]
 174 0024 282093E5 		ldr	r2, [r3, #40]
 175 0028 20301BE5 		ldr	r3, [fp, #-32]
 176 002c 030052E1 		cmp	r2, r3
 177 0030 2500001A 		bne	.L2
 112:position_controller.c **** 		filteredZ=(params->alpha)*params->estimatedZ
 179              	.LM2:
 180 0034 24301BE5 		ldr	r3, [fp, #-36]
 181 0038 002093E5 		ldr	r2, [r3, #0]	@ float
 182 003c 24301BE5 		ldr	r3, [fp, #-36]
 183 0040 043093E5 		ldr	r3, [r3, #4]	@ float
 184 0044 0200A0E1 		mov	r0, r2
 185 0048 0310A0E1 		mov	r1, r3
 186 004c FEFFFFEB 		bl	__mulsf3
 187 0050 0030A0E1 		mov	r3, r0
 188 0054 0340A0E1 		mov	r4, r3
 189 0058 24301BE5 		ldr	r3, [fp, #-36]
 190 005c 003093E5 		ldr	r3, [r3, #0]	@ float
 191 0060 AC009FE5 		ldr	r0, .L9	@ float
 192 0064 0310A0E1 		mov	r1, r3
 193 0068 FEFFFFEB 		bl	__subsf3
 194 006c 0030A0E1 		mov	r3, r0
 195 0070 0300A0E1 		mov	r0, r3
 196 0074 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 197 0078 FEFFFFEB 		bl	__mulsf3
 198 007c 0030A0E1 		mov	r3, r0
 199 0080 0400A0E1 		mov	r0, r4
 200 0084 0310A0E1 		mov	r1, r3
 201 0088 FEFFFFEB 		bl	__addsf3
 202 008c 0030A0E1 		mov	r3, r0
 203 0090 14300BE5 		str	r3, [fp, #-20]	@ float
 113:position_controller.c **** 				+(1.0f-params->alpha)*vicon_data;
 114:position_controller.c **** 		params->estimatedZ=filteredZ+params->estimatedVZ*dt;
 205              	.LM3:
 206 0094 24301BE5 		ldr	r3, [fp, #-36]
 207 0098 083093E5 		ldr	r3, [r3, #8]	@ float
 208 009c 0300A0E1 		mov	r0, r3
 209 00a0 04109BE5 		ldr	r1, [fp, #4]	@ float
 210 00a4 FEFFFFEB 		bl	__mulsf3
 211 00a8 0030A0E1 		mov	r3, r0
 212 00ac 0300A0E1 		mov	r0, r3
 213 00b0 14101BE5 		ldr	r1, [fp, #-20]	@ float
 214 00b4 FEFFFFEB 		bl	__addsf3
 215 00b8 0030A0E1 		mov	r3, r0
 216 00bc 0320A0E1 		mov	r2, r3
 217 00c0 24301BE5 		ldr	r3, [fp, #-36]
 218 00c4 042083E5 		str	r2, [r3, #4]	@ float
 219 00c8 0E0000EA 		b	.L8
 220              	.L2:
 115:position_controller.c **** 	}else{
 116:position_controller.c **** 		if(params->estimatedZ==0.0f){
 222              	.LM4:
 223 00cc 24301BE5 		ldr	r3, [fp, #-36]
 224 00d0 043093E5 		ldr	r3, [r3, #4]	@ float
 225 00d4 0300A0E1 		mov	r0, r3
 226 00d8 38109FE5 		ldr	r1, .L9+4	@ float
 227 00dc FEFFFFEB 		bl	__eqsf2
 228 00e0 0030A0E1 		mov	r3, r0
 229 00e4 000053E3 		cmp	r3, #0
 230 00e8 0000000A 		beq	.L7
 231 00ec 020000EA 		b	.L5
 232              	.L7:
 117:position_controller.c **** 			filteredZ=vicon_data;
 234              	.LM5:
 235 00f0 1C301BE5 		ldr	r3, [fp, #-28]	@ float
 236 00f4 14300BE5 		str	r3, [fp, #-20]	@ float
 237 00f8 020000EA 		b	.L8
 238              	.L5:
 118:position_controller.c **** 		}else{
 119:position_controller.c **** 			filteredZ=(params->alpha);
 240              	.LM6:
 241 00fc 24301BE5 		ldr	r3, [fp, #-36]
 242 0100 003093E5 		ldr	r3, [r3, #0]	@ float
 243 0104 14300BE5 		str	r3, [fp, #-20]	@ float
 244              	.L8:
 120:position_controller.c **** 		}
 121:position_controller.c **** 	}
 122:position_controller.c **** }
 246              	.LM7:
 247 0108 10D04BE2 		sub	sp, fp, #16
 248 010c 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 249 0110 1EFF2FE1 		bx	lr
 250              	.L10:
 251              		.align	2
 252              	.L9:
 253 0114 0000803F 		.word	1065353216
 254 0118 00000000 		.word	0
 261              	.Lscope0:
 262              		.align	2
 264              		.global	positionControllerInit
 266              	positionControllerInit:
 123:position_controller.c **** void positionControllerInit ()
 124:position_controller.c **** {
 268              	.LM8:
 269              		@ Function supports interworking.
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 1, uses_anonymous_args = 0
 272 011c 0DC0A0E1 		mov	ip, sp
 273 0120 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 274 0124 04B04CE2 		sub	fp, ip, #4
 275 0128 08D04DE2 		sub	sp, sp, #8
 125:position_controller.c ****   pidInit(&my_this.pidX.pid, my_this.pidX.setpoint, my_this.pidX.init.kp, my_this.pidX.init.ki, my_
 277              	.LM9:
 278 012c 84319FE5 		ldr	r3, .L13
 279 0130 281193E5 		ldr	r1, [r3, #296]	@ float
 280 0134 7C319FE5 		ldr	r3, .L13
 281 0138 1CE193E5 		ldr	lr, [r3, #284]	@ float
 282 013c 74319FE5 		ldr	r3, .L13
 283 0140 20C193E5 		ldr	ip, [r3, #288]	@ float
 284 0144 6C319FE5 		ldr	r3, .L13
 285 0148 242193E5 		ldr	r2, [r3, #292]	@ float
 286 014c 64319FE5 		ldr	r3, .L13
 287 0150 183193E5 		ldr	r3, [r3, #280]	@ float
 288 0154 00208DE5 		str	r2, [sp, #0]	@ float
 289 0158 04308DE5 		str	r3, [sp, #4]	@ float
 290 015c 58019FE5 		ldr	r0, .L13+4
 291 0160 0E20A0E1 		mov	r2, lr
 292 0164 0C30A0E1 		mov	r3, ip
 293 0168 FEFFFFEB 		bl	pidInit
 126:position_controller.c ****       my_this.pidX.pid.dt);
 127:position_controller.c ****   pidInit(&my_this.pidY.pid, my_this.pidY.setpoint, my_this.pidY.init.kp, my_this.pidY.init.ki, my_
 295              	.LM10:
 296 016c 44319FE5 		ldr	r3, .L13
 297 0170 C01193E5 		ldr	r1, [r3, #448]	@ float
 298 0174 3C319FE5 		ldr	r3, .L13
 299 0178 B4E193E5 		ldr	lr, [r3, #436]	@ float
 300 017c 34319FE5 		ldr	r3, .L13
 301 0180 B8C193E5 		ldr	ip, [r3, #440]	@ float
 302 0184 2C319FE5 		ldr	r3, .L13
 303 0188 BC2193E5 		ldr	r2, [r3, #444]	@ float
 304 018c 24319FE5 		ldr	r3, .L13
 305 0190 B03193E5 		ldr	r3, [r3, #432]	@ float
 306 0194 00208DE5 		str	r2, [sp, #0]	@ float
 307 0198 04308DE5 		str	r3, [sp, #4]	@ float
 308 019c 1C019FE5 		ldr	r0, .L13+8
 309 01a0 0E20A0E1 		mov	r2, lr
 310 01a4 0C30A0E1 		mov	r3, ip
 311 01a8 FEFFFFEB 		bl	pidInit
 128:position_controller.c ****       my_this.pidY.pid.dt);
 129:position_controller.c ****   pidInit(&my_this.pidZ.pid, my_this.pidZ.setpoint, my_this.pidZ.init.kp, my_this.pidZ.init.ki, my_
 313              	.LM11:
 314 01ac 04319FE5 		ldr	r3, .L13
 315 01b0 901093E5 		ldr	r1, [r3, #144]	@ float
 316 01b4 FC309FE5 		ldr	r3, .L13
 317 01b8 84E093E5 		ldr	lr, [r3, #132]	@ float
 318 01bc F4309FE5 		ldr	r3, .L13
 319 01c0 88C093E5 		ldr	ip, [r3, #136]	@ float
 320 01c4 EC309FE5 		ldr	r3, .L13
 321 01c8 8C2093E5 		ldr	r2, [r3, #140]	@ float
 322 01cc E4309FE5 		ldr	r3, .L13
 323 01d0 803093E5 		ldr	r3, [r3, #128]	@ float
 324 01d4 00208DE5 		str	r2, [sp, #0]	@ float
 325 01d8 04308DE5 		str	r3, [sp, #4]	@ float
 326 01dc E0009FE5 		ldr	r0, .L13+12
 327 01e0 0E20A0E1 		mov	r2, lr
 328 01e4 0C30A0E1 		mov	r3, ip
 329 01e8 FEFFFFEB 		bl	pidInit
 130:position_controller.c ****       my_this.pidZ.pid.dt);
 131:position_controller.c **** 
 132:position_controller.c ****   pidInit(&my_this.pidVX.pid, my_this.pidVX.setpoint, my_this.pidVX.init.kp, my_this.pidVX.init.ki,
 331              	.LM12:
 332 01ec C4309FE5 		ldr	r3, .L13
 333 01f0 DC1093E5 		ldr	r1, [r3, #220]	@ float
 334 01f4 BC309FE5 		ldr	r3, .L13
 335 01f8 D0E093E5 		ldr	lr, [r3, #208]	@ float
 336 01fc B4309FE5 		ldr	r3, .L13
 337 0200 D4C093E5 		ldr	ip, [r3, #212]	@ float
 338 0204 AC309FE5 		ldr	r3, .L13
 339 0208 D82093E5 		ldr	r2, [r3, #216]	@ float
 340 020c A4309FE5 		ldr	r3, .L13
 341 0210 CC3093E5 		ldr	r3, [r3, #204]	@ float
 342 0214 00208DE5 		str	r2, [sp, #0]	@ float
 343 0218 04308DE5 		str	r3, [sp, #4]	@ float
 344 021c A4009FE5 		ldr	r0, .L13+16
 345 0220 0E20A0E1 		mov	r2, lr
 346 0224 0C30A0E1 		mov	r3, ip
 347 0228 FEFFFFEB 		bl	pidInit
 133:position_controller.c ****       my_this.pidVX.pid.dt);
 134:position_controller.c ****   pidInit(&my_this.pidVY.pid, my_this.pidVY.setpoint, my_this.pidVY.init.kp, my_this.pidVY.init.ki,
 349              	.LM13:
 350 022c 84309FE5 		ldr	r3, .L13
 351 0230 741193E5 		ldr	r1, [r3, #372]	@ float
 352 0234 7C309FE5 		ldr	r3, .L13
 353 0238 68E193E5 		ldr	lr, [r3, #360]	@ float
 354 023c 74309FE5 		ldr	r3, .L13
 355 0240 6CC193E5 		ldr	ip, [r3, #364]	@ float
 356 0244 6C309FE5 		ldr	r3, .L13
 357 0248 702193E5 		ldr	r2, [r3, #368]	@ float
 358 024c 64309FE5 		ldr	r3, .L13
 359 0250 643193E5 		ldr	r3, [r3, #356]	@ float
 360 0254 00208DE5 		str	r2, [sp, #0]	@ float
 361 0258 04308DE5 		str	r3, [sp, #4]	@ float
 362 025c 68009FE5 		ldr	r0, .L13+20
 363 0260 0E20A0E1 		mov	r2, lr
 364 0264 0C30A0E1 		mov	r3, ip
 365 0268 FEFFFFEB 		bl	pidInit
 135:position_controller.c ****       my_this.pidVY.pid.dt);
 136:position_controller.c ****   pidInit(&my_this.pidVZ.pid, my_this.pidVZ.setpoint, my_this.pidVZ.init.kp, my_this.pidVZ.init.ki,
 367              	.LM14:
 368 026c 44309FE5 		ldr	r3, .L13
 369 0270 441093E5 		ldr	r1, [r3, #68]	@ float
 370 0274 3C309FE5 		ldr	r3, .L13
 371 0278 38E093E5 		ldr	lr, [r3, #56]	@ float
 372 027c 34309FE5 		ldr	r3, .L13
 373 0280 3CC093E5 		ldr	ip, [r3, #60]	@ float
 374 0284 2C309FE5 		ldr	r3, .L13
 375 0288 402093E5 		ldr	r2, [r3, #64]	@ float
 376 028c 24309FE5 		ldr	r3, .L13
 377 0290 343093E5 		ldr	r3, [r3, #52]	@ float
 378 0294 00208DE5 		str	r2, [sp, #0]	@ float
 379 0298 04308DE5 		str	r3, [sp, #4]	@ float
 380 029c 14009FE5 		ldr	r0, .L13
 381 02a0 0E20A0E1 		mov	r2, lr
 382 02a4 0C30A0E1 		mov	r3, ip
 383 02a8 FEFFFFEB 		bl	pidInit
 137:position_controller.c ****       my_this.pidVZ.pid.dt);
 138:position_controller.c **** 
 139:position_controller.c **** }
 385              	.LM15:
 386 02ac 0CD04BE2 		sub	sp, fp, #12
 387 02b0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 388 02b4 1EFF2FE1 		bx	lr
 389              	.L14:
 390              		.align	2
 391              	.L13:
 392 02b8 00000000 		.word	my_this
 393 02bc E4000000 		.word	my_this+228
 394 02c0 7C010000 		.word	my_this+380
 395 02c4 4C000000 		.word	my_this+76
 396 02c8 98000000 		.word	my_this+152
 397 02cc 30010000 		.word	my_this+304
 399              	.Lscope1:
 400              		.align	2
 406              		.global	runPid
 408              	runPid:
 140:position_controller.c **** 
 141:position_controller.c **** float runPid(float input, struct pidAxis_s *axis,  float setpoint, float dt) {
 410              	.LM16:
 411              		@ Function supports interworking.
 412              		@ args = 0, pretend = 0, frame = 16
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414 02d0 0DC0A0E1 		mov	ip, sp
 415 02d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 416 02d8 04B04CE2 		sub	fp, ip, #4
 417 02dc 10D04DE2 		sub	sp, sp, #16
 418 02e0 10000BE5 		str	r0, [fp, #-16]	@ float
 419 02e4 14100BE5 		str	r1, [fp, #-20]
 420 02e8 18200BE5 		str	r2, [fp, #-24]	@ float
 421 02ec 1C300BE5 		str	r3, [fp, #-28]	@ float
 142:position_controller.c ****   axis->setpoint = setpoint;
 423              	.LM17:
 424 02f0 14201BE5 		ldr	r2, [fp, #-20]
 425 02f4 18301BE5 		ldr	r3, [fp, #-24]	@ float
 426 02f8 443082E5 		str	r3, [r2, #68]	@ float
 143:position_controller.c ****   pidSetDesired(&(axis->pid), axis->setpoint);
 428              	.LM18:
 429 02fc 14201BE5 		ldr	r2, [fp, #-20]
 430 0300 14301BE5 		ldr	r3, [fp, #-20]
 431 0304 443093E5 		ldr	r3, [r3, #68]	@ float
 432 0308 0200A0E1 		mov	r0, r2
 433 030c 0310A0E1 		mov	r1, r3
 434 0310 FEFFFFEB 		bl	pidSetDesired
 144:position_controller.c ****   return pidUpdate(&(axis->pid), input, 1);
 436              	.LM19:
 437 0314 14301BE5 		ldr	r3, [fp, #-20]
 438 0318 0300A0E1 		mov	r0, r3
 439 031c 10101BE5 		ldr	r1, [fp, #-16]	@ float
 440 0320 0120A0E3 		mov	r2, #1
 441 0324 FEFFFFEB 		bl	pidUpdate
 442 0328 0030A0E1 		mov	r3, r0
 145:position_controller.c **** }
 444              	.LM20:
 445 032c 0300A0E1 		mov	r0, r3
 446 0330 0CD04BE2 		sub	sp, fp, #12
 447 0334 00689DE8 		ldmfd	sp, {fp, sp, lr}
 448 0338 1EFF2FE1 		bx	lr
 450              	.Lscope2:
 451              		.bss
 452              		.align	2
 453              	acc_get_pos.1524:
 454 0008 00000000 		.space	4
 456              		.align	2
 457              	acc_get_vel.1523:
 458 000c 00000000 		.space	4
 460              		.align	2
 461              	result.1522:
 462 0010 00000000 		.space	4
 464              		.global	__floatsisf
 465              		.global	__divsf3
 466              		.text
 467              		.align	2
 472              		.global	data_fusion
 474              	data_fusion:
 146:position_controller.c **** float data_fusion(int flag,float vicon_z,int acc_z){
 476              	.LM21:
 477              		@ Function supports interworking.
 478              		@ args = 0, pretend = 0, frame = 16
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 033c 0DC0A0E1 		mov	ip, sp
 481 0340 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 482 0344 04B04CE2 		sub	fp, ip, #4
 483 0348 10D04DE2 		sub	sp, sp, #16
 484 034c 14000BE5 		str	r0, [fp, #-20]
 485 0350 18100BE5 		str	r1, [fp, #-24]	@ float
 486 0354 1C200BE5 		str	r2, [fp, #-28]
 147:position_controller.c **** 	static float result=0;
 148:position_controller.c **** 	static float acc_get_vel=0;
 149:position_controller.c **** 	static float acc_get_pos=0;
 150:position_controller.c **** 	float acc;
 151:position_controller.c **** 	acc=(acc_z-10000)/GRAVITY_ACC;
 488              	.LM22:
 489 0358 1C301BE5 		ldr	r3, [fp, #-28]
 490 035c 273C43E2 		sub	r3, r3, #9984
 491 0360 103043E2 		sub	r3, r3, #16
 492 0364 0300A0E1 		mov	r0, r3
 493 0368 FEFFFFEB 		bl	__floatsisf
 494 036c 0030A0E1 		mov	r3, r0
 495 0370 0300A0E1 		mov	r0, r3
 496 0374 FC109FE5 		ldr	r1, .L23	@ float
 497 0378 FEFFFFEB 		bl	__divsf3
 498 037c 0030A0E1 		mov	r3, r0
 499 0380 10300BE5 		str	r3, [fp, #-16]	@ float
 152:position_controller.c **** 	if(flag==1){
 501              	.LM23:
 502 0384 14301BE5 		ldr	r3, [fp, #-20]
 503 0388 010053E3 		cmp	r3, #1
 504 038c 0900001A 		bne	.L18
 153:position_controller.c **** 		result=vicon_z;
 506              	.LM24:
 507 0390 E4209FE5 		ldr	r2, .L23+4
 508 0394 18301BE5 		ldr	r3, [fp, #-24]	@ float
 509 0398 003082E5 		str	r3, [r2, #0]	@ float
 154:position_controller.c **** 		acc_get_vel=0;
 511              	.LM25:
 512 039c DC209FE5 		ldr	r2, .L23+8
 513 03a0 DC309FE5 		ldr	r3, .L23+12	@ float
 514 03a4 003082E5 		str	r3, [r2, #0]	@ float
 155:position_controller.c **** 		acc_get_pos=0;
 516              	.LM26:
 517 03a8 D8209FE5 		ldr	r2, .L23+16
 518 03ac D0309FE5 		ldr	r3, .L23+12	@ float
 519 03b0 003082E5 		str	r3, [r2, #0]	@ float
 520 03b4 290000EA 		b	.L20
 521              	.L18:
 156:position_controller.c **** 	}else if(flag==0){
 523              	.LM27:
 524 03b8 14301BE5 		ldr	r3, [fp, #-20]
 525 03bc 000053E3 		cmp	r3, #0
 526 03c0 2600001A 		bne	.L20
 157:position_controller.c **** 		acc_get_vel+=acc_z*DT;
 528              	.LM28:
 529 03c4 1C001BE5 		ldr	r0, [fp, #-28]
 530 03c8 FEFFFFEB 		bl	__floatsisf
 531 03cc 0030A0E1 		mov	r3, r0
 532 03d0 0300A0E1 		mov	r0, r3
 533 03d4 B0109FE5 		ldr	r1, .L23+20	@ float
 534 03d8 FEFFFFEB 		bl	__mulsf3
 535 03dc 0030A0E1 		mov	r3, r0
 536 03e0 0320A0E1 		mov	r2, r3
 537 03e4 94309FE5 		ldr	r3, .L23+8
 538 03e8 003093E5 		ldr	r3, [r3, #0]	@ float
 539 03ec 0200A0E1 		mov	r0, r2
 540 03f0 0310A0E1 		mov	r1, r3
 541 03f4 FEFFFFEB 		bl	__addsf3
 542 03f8 0030A0E1 		mov	r3, r0
 543 03fc 0320A0E1 		mov	r2, r3
 544 0400 78309FE5 		ldr	r3, .L23+8
 545 0404 002083E5 		str	r2, [r3, #0]	@ float
 158:position_controller.c **** 		acc_get_pos+=acc_get_vel;
 547              	.LM29:
 548 0408 78309FE5 		ldr	r3, .L23+16
 549 040c 002093E5 		ldr	r2, [r3, #0]	@ float
 550 0410 68309FE5 		ldr	r3, .L23+8
 551 0414 003093E5 		ldr	r3, [r3, #0]	@ float
 552 0418 0200A0E1 		mov	r0, r2
 553 041c 0310A0E1 		mov	r1, r3
 554 0420 FEFFFFEB 		bl	__addsf3
 555 0424 0030A0E1 		mov	r3, r0
 556 0428 0320A0E1 		mov	r2, r3
 557 042c 54309FE5 		ldr	r3, .L23+16
 558 0430 002083E5 		str	r2, [r3, #0]	@ float
 159:position_controller.c **** 		result+=acc_get_pos;
 560              	.LM30:
 561 0434 40309FE5 		ldr	r3, .L23+4
 562 0438 002093E5 		ldr	r2, [r3, #0]	@ float
 563 043c 44309FE5 		ldr	r3, .L23+16
 564 0440 003093E5 		ldr	r3, [r3, #0]	@ float
 565 0444 0200A0E1 		mov	r0, r2
 566 0448 0310A0E1 		mov	r1, r3
 567 044c FEFFFFEB 		bl	__addsf3
 568 0450 0030A0E1 		mov	r3, r0
 569 0454 0320A0E1 		mov	r2, r3
 570 0458 1C309FE5 		ldr	r3, .L23+4
 571 045c 002083E5 		str	r2, [r3, #0]	@ float
 572              	.L20:
 160:position_controller.c **** 	}
 161:position_controller.c **** 	return result;
 574              	.LM31:
 575 0460 14309FE5 		ldr	r3, .L23+4
 576 0464 003093E5 		ldr	r3, [r3, #0]	@ float
 162:position_controller.c **** }
 578              	.LM32:
 579 0468 0300A0E1 		mov	r0, r3
 580 046c 0CD04BE2 		sub	sp, fp, #12
 581 0470 00689DE8 		ldmfd	sp, {fp, sp, lr}
 582 0474 1EFF2FE1 		bx	lr
 583              	.L24:
 584              		.align	2
 585              	.L23:
 586 0478 58391C41 		.word	1092368728
 587 047c 10000000 		.word	result.1522
 588 0480 0C000000 		.word	acc_get_vel.1523
 589 0484 00000000 		.word	0
 590 0488 08000000 		.word	acc_get_pos.1524
 591 048c 0AD7233C 		.word	1008981770
 599              	.Lscope3:
 600              		.global	__gtsf2
 601              		.global	__ltsf2
 602              		.align	2
 608              		.global	positionController
 610              	positionController:
 163:position_controller.c **** void positionController(float* thrust,float* pitch,float* roll,
 164:position_controller.c ****                                                              const state_t *state)
 165:position_controller.c **** {
 612              	.LM33:
 613              		@ Function supports interworking.
 614              		@ args = 0, pretend = 0, frame = 40
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616 0490 0DC0A0E1 		mov	ip, sp
 617 0494 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 618 0498 04B04CE2 		sub	fp, ip, #4
 619 049c 28D04DE2 		sub	sp, sp, #40
 620 04a0 24000BE5 		str	r0, [fp, #-36]
 621 04a4 28100BE5 		str	r1, [fp, #-40]
 622 04a8 2C200BE5 		str	r2, [fp, #-44]
 623 04ac 30300BE5 		str	r3, [fp, #-48]
 166:position_controller.c **** 	float thrustRaw;
 167:position_controller.c **** 	my_this.pidX.pid.outputLimit = xyVelMax  * velMaxOverhead;
 625              	.LM34:
 626 04b0 24349FE5 		ldr	r3, .L35
 627 04b4 002093E5 		ldr	r2, [r3, #0]	@ float
 628 04b8 20349FE5 		ldr	r3, .L35+4
 629 04bc 003093E5 		ldr	r3, [r3, #0]	@ float
 630 04c0 0200A0E1 		mov	r0, r2
 631 04c4 0310A0E1 		mov	r1, r3
 632 04c8 FEFFFFEB 		bl	__mulsf3
 633 04cc 0030A0E1 		mov	r3, r0
 634 04d0 0320A0E1 		mov	r2, r3
 635 04d4 08349FE5 		ldr	r3, .L35+8
 636 04d8 142183E5 		str	r2, [r3, #276]	@ float
 168:position_controller.c **** 	my_this.pidY.pid.outputLimit =  xyVelMax  * velMaxOverhead;
 638              	.LM35:
 639 04dc F8339FE5 		ldr	r3, .L35
 640 04e0 002093E5 		ldr	r2, [r3, #0]	@ float
 641 04e4 F4339FE5 		ldr	r3, .L35+4
 642 04e8 003093E5 		ldr	r3, [r3, #0]	@ float
 643 04ec 0200A0E1 		mov	r0, r2
 644 04f0 0310A0E1 		mov	r1, r3
 645 04f4 FEFFFFEB 		bl	__mulsf3
 646 04f8 0030A0E1 		mov	r3, r0
 647 04fc 0320A0E1 		mov	r2, r3
 648 0500 DC339FE5 		ldr	r3, .L35+8
 649 0504 AC2183E5 		str	r2, [r3, #428]	@ float
 169:position_controller.c ****     my_this.pidZ.pid.outputLimit = max(zVelMax, 200.0f)  * velMaxOverhead;
 651              	.LM36:
 652 0508 D8339FE5 		ldr	r3, .L35+12
 653 050c 003093E5 		ldr	r3, [r3, #0]	@ float
 654 0510 0300A0E1 		mov	r0, r3
 655 0514 D0139FE5 		ldr	r1, .L35+16	@ float
 656 0518 FEFFFFEB 		bl	__gtsf2
 657 051c 0030A0E1 		mov	r3, r0
 658 0520 000053E3 		cmp	r3, #0
 659 0524 000000CA 		bgt	.L28
 660 0528 030000EA 		b	.L26
 661              	.L28:
 662 052c B4339FE5 		ldr	r3, .L35+12
 663 0530 003093E5 		ldr	r3, [r3, #0]	@ float
 664 0534 38300BE5 		str	r3, [fp, #-56]	@ float
 665 0538 010000EA 		b	.L29
 666              	.L26:
 667 053c A8239FE5 		ldr	r2, .L35+16	@ float
 668 0540 38200BE5 		str	r2, [fp, #-56]	@ float
 669              	.L29:
 670 0544 94339FE5 		ldr	r3, .L35+4
 671 0548 003093E5 		ldr	r3, [r3, #0]	@ float
 672 054c 38001BE5 		ldr	r0, [fp, #-56]	@ float
 673 0550 0310A0E1 		mov	r1, r3
 674 0554 FEFFFFEB 		bl	__mulsf3
 675 0558 0030A0E1 		mov	r3, r0
 676 055c 0320A0E1 		mov	r2, r3
 677 0560 7C339FE5 		ldr	r3, .L35+8
 678 0564 7C2083E5 		str	r2, [r3, #124]	@ float
 170:position_controller.c **** 
 171:position_controller.c **** //    float cosyaw = cosf(state->attitude.yaw * DEG_TO_RAD);
 172:position_controller.c **** //    float sinyaw = sinf(state->attitude.yaw * DEG_TO_RAD);
 173:position_controller.c **** //    float bodyvx = my_setpoint.velocity.x;
 174:position_controller.c **** //    float bodyvy = my_setpoint.velocity.y;
 175:position_controller.c **** 
 176:position_controller.c ****     my_setpoint.velocity.x = runPid(state->position.x, &my_this.pidX, my_setpoint.position.x, DT);
 680              	.LM37:
 681 0568 30301BE5 		ldr	r3, [fp, #-48]
 682 056c 002093E5 		ldr	r2, [r3, #0]	@ float
 683 0570 78339FE5 		ldr	r3, .L35+20
 684 0574 003093E5 		ldr	r3, [r3, #0]	@ float
 685 0578 0200A0E1 		mov	r0, r2
 686 057c 70139FE5 		ldr	r1, .L35+24
 687 0580 0320A0E1 		mov	r2, r3
 688 0584 6C339FE5 		ldr	r3, .L35+28	@ float
 689 0588 FEFFFFEB 		bl	runPid
 690 058c 0020A0E1 		mov	r2, r0
 691 0590 58339FE5 		ldr	r3, .L35+20
 692 0594 0C2083E5 		str	r2, [r3, #12]	@ float
 177:position_controller.c ****     my_setpoint.velocity.y = runPid(state->position.y, &my_this.pidY, my_setpoint.position.y, DT);
 694              	.LM38:
 695 0598 30301BE5 		ldr	r3, [fp, #-48]
 696 059c 042093E5 		ldr	r2, [r3, #4]	@ float
 697 05a0 48339FE5 		ldr	r3, .L35+20
 698 05a4 043093E5 		ldr	r3, [r3, #4]	@ float
 699 05a8 0200A0E1 		mov	r0, r2
 700 05ac 48139FE5 		ldr	r1, .L35+32
 701 05b0 0320A0E1 		mov	r2, r3
 702 05b4 3C339FE5 		ldr	r3, .L35+28	@ float
 703 05b8 FEFFFFEB 		bl	runPid
 704 05bc 0020A0E1 		mov	r2, r0
 705 05c0 28339FE5 		ldr	r3, .L35+20
 706 05c4 102083E5 		str	r2, [r3, #16]	@ float
 178:position_controller.c ****     my_setpoint.velocity.z = runPid(state->position.z, &my_this.pidZ, my_setpoint.position.z, DT);
 708              	.LM39:
 709 05c8 30301BE5 		ldr	r3, [fp, #-48]
 710 05cc 082093E5 		ldr	r2, [r3, #8]	@ float
 711 05d0 18339FE5 		ldr	r3, .L35+20
 712 05d4 083093E5 		ldr	r3, [r3, #8]	@ float
 713 05d8 0200A0E1 		mov	r0, r2
 714 05dc 1C139FE5 		ldr	r1, .L35+36
 715 05e0 0320A0E1 		mov	r2, r3
 716 05e4 0C339FE5 		ldr	r3, .L35+28	@ float
 717 05e8 FEFFFFEB 		bl	runPid
 718 05ec 0020A0E1 		mov	r2, r0
 719 05f0 F8329FE5 		ldr	r3, .L35+20
 720 05f4 142083E5 		str	r2, [r3, #20]	@ float
 179:position_controller.c **** 
 180:position_controller.c ****     my_this.pidVX.pid.outputLimit = rpLimit * rpLimitOverhead;
 722              	.LM40:
 723 05f8 04339FE5 		ldr	r3, .L35+40
 724 05fc 002093E5 		ldr	r2, [r3, #0]	@ float
 725 0600 00339FE5 		ldr	r3, .L35+44
 726 0604 003093E5 		ldr	r3, [r3, #0]	@ float
 727 0608 0200A0E1 		mov	r0, r2
 728 060c 0310A0E1 		mov	r1, r3
 729 0610 FEFFFFEB 		bl	__mulsf3
 730 0614 0030A0E1 		mov	r3, r0
 731 0618 0320A0E1 		mov	r2, r3
 732 061c C0329FE5 		ldr	r3, .L35+8
 733 0620 C82083E5 		str	r2, [r3, #200]	@ float
 181:position_controller.c ****     my_this.pidVY.pid.outputLimit = rpLimit * rpLimitOverhead;
 735              	.LM41:
 736 0624 D8329FE5 		ldr	r3, .L35+40
 737 0628 002093E5 		ldr	r2, [r3, #0]	@ float
 738 062c D4329FE5 		ldr	r3, .L35+44
 739 0630 003093E5 		ldr	r3, [r3, #0]	@ float
 740 0634 0200A0E1 		mov	r0, r2
 741 0638 0310A0E1 		mov	r1, r3
 742 063c FEFFFFEB 		bl	__mulsf3
 743 0640 0030A0E1 		mov	r3, r0
 744 0644 0320A0E1 		mov	r2, r3
 745 0648 94329FE5 		ldr	r3, .L35+8
 746 064c 602183E5 		str	r2, [r3, #352]	@ float
 182:position_controller.c ****     my_this.pidVZ.pid.outputLimit =250.0f;
 748              	.LM42:
 749 0650 8C229FE5 		ldr	r2, .L35+8
 750 0654 B0329FE5 		ldr	r3, .L35+48	@ float
 751 0658 303082E5 		str	r3, [r2, #48]	@ float
 183:position_controller.c **** 
 184:position_controller.c ****     float rollRaw  = runPid(state->velocity.x, &my_this.pidVX, my_setpoint.velocity.x, DT);
 753              	.LM43:
 754 065c 30301BE5 		ldr	r3, [fp, #-48]
 755 0660 0C2093E5 		ldr	r2, [r3, #12]	@ float
 756 0664 84329FE5 		ldr	r3, .L35+20
 757 0668 0C3093E5 		ldr	r3, [r3, #12]	@ float
 758 066c 0200A0E1 		mov	r0, r2
 759 0670 98129FE5 		ldr	r1, .L35+52
 760 0674 0320A0E1 		mov	r2, r3
 761 0678 78329FE5 		ldr	r3, .L35+28	@ float
 762 067c FEFFFFEB 		bl	runPid
 763 0680 0030A0E1 		mov	r3, r0
 764 0684 1C300BE5 		str	r3, [fp, #-28]	@ float
 185:position_controller.c ****       float pitchRaw = runPid(state->velocity.y, &my_this.pidVY, my_setpoint.velocity.y, DT);
 766              	.LM44:
 767 0688 30301BE5 		ldr	r3, [fp, #-48]
 768 068c 102093E5 		ldr	r2, [r3, #16]	@ float
 769 0690 58329FE5 		ldr	r3, .L35+20
 770 0694 103093E5 		ldr	r3, [r3, #16]	@ float
 771 0698 0200A0E1 		mov	r0, r2
 772 069c 70129FE5 		ldr	r1, .L35+56
 773 06a0 0320A0E1 		mov	r2, r3
 774 06a4 4C329FE5 		ldr	r3, .L35+28	@ float
 775 06a8 FEFFFFEB 		bl	runPid
 776 06ac 0030A0E1 		mov	r3, r0
 777 06b0 18300BE5 		str	r3, [fp, #-24]	@ float
 186:position_controller.c **** 
 187:position_controller.c ****       //float yawRad = state->attitude.yaw ;
 188:position_controller.c ****       float yawRad = 0 ;
 779              	.LM45:
 780 06b4 5C329FE5 		ldr	r3, .L35+60	@ float
 781 06b8 14300BE5 		str	r3, [fp, #-20]	@ float
 189:position_controller.c ****       *pitch = -(rollRaw  * cosf(yawRad)) - (pitchRaw * sinf(yawRad));
 783              	.LM46:
 784 06bc 14001BE5 		ldr	r0, [fp, #-20]	@ float
 785 06c0 FEFFFFEB 		bl	cosf
 786 06c4 0030A0E1 		mov	r3, r0
 787 06c8 0300A0E1 		mov	r0, r3
 788 06cc 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 789 06d0 FEFFFFEB 		bl	__mulsf3
 790 06d4 0030A0E1 		mov	r3, r0
 791 06d8 024123E2 		eor	r4, r3, #-2147483648
 792 06dc 14001BE5 		ldr	r0, [fp, #-20]	@ float
 793 06e0 FEFFFFEB 		bl	sinf
 794 06e4 0030A0E1 		mov	r3, r0
 795 06e8 0300A0E1 		mov	r0, r3
 796 06ec 18101BE5 		ldr	r1, [fp, #-24]	@ float
 797 06f0 FEFFFFEB 		bl	__mulsf3
 798 06f4 0030A0E1 		mov	r3, r0
 799 06f8 0400A0E1 		mov	r0, r4
 800 06fc 0310A0E1 		mov	r1, r3
 801 0700 FEFFFFEB 		bl	__subsf3
 802 0704 0030A0E1 		mov	r3, r0
 803 0708 0320A0E1 		mov	r2, r3
 804 070c 28301BE5 		ldr	r3, [fp, #-40]
 805 0710 002083E5 		str	r2, [r3, #0]	@ float
 190:position_controller.c ****       *roll  = -(pitchRaw * cosf(yawRad)) + (rollRaw  * sinf(yawRad));
 807              	.LM47:
 808 0714 14001BE5 		ldr	r0, [fp, #-20]	@ float
 809 0718 FEFFFFEB 		bl	sinf
 810 071c 0030A0E1 		mov	r3, r0
 811 0720 0300A0E1 		mov	r0, r3
 812 0724 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 813 0728 FEFFFFEB 		bl	__mulsf3
 814 072c 0030A0E1 		mov	r3, r0
 815 0730 0340A0E1 		mov	r4, r3
 816 0734 14001BE5 		ldr	r0, [fp, #-20]	@ float
 817 0738 FEFFFFEB 		bl	cosf
 818 073c 0030A0E1 		mov	r3, r0
 819 0740 0300A0E1 		mov	r0, r3
 820 0744 18101BE5 		ldr	r1, [fp, #-24]	@ float
 821 0748 FEFFFFEB 		bl	__mulsf3
 822 074c 0030A0E1 		mov	r3, r0
 823 0750 0400A0E1 		mov	r0, r4
 824 0754 0310A0E1 		mov	r1, r3
 825 0758 FEFFFFEB 		bl	__subsf3
 826 075c 0030A0E1 		mov	r3, r0
 827 0760 0320A0E1 		mov	r2, r3
 828 0764 2C301BE5 		ldr	r3, [fp, #-44]
 829 0768 002083E5 		str	r2, [r3, #0]	@ float
 191:position_controller.c **** 
 192:position_controller.c ****       *roll  = constrain(*roll,  -rpLimit, rpLimit);
 831              	.LM48:
 832 076c 2C301BE5 		ldr	r3, [fp, #-44]
 833 0770 001093E5 		ldr	r1, [r3, #0]	@ float
 834 0774 88319FE5 		ldr	r3, .L35+40
 835 0778 003093E5 		ldr	r3, [r3, #0]	@ float
 836 077c 022123E2 		eor	r2, r3, #-2147483648
 837 0780 7C319FE5 		ldr	r3, .L35+40
 838 0784 003093E5 		ldr	r3, [r3, #0]	@ float
 839 0788 0100A0E1 		mov	r0, r1
 840 078c 0210A0E1 		mov	r1, r2
 841 0790 0320A0E1 		mov	r2, r3
 842 0794 FEFFFFEB 		bl	constrain
 843 0798 0020A0E1 		mov	r2, r0
 844 079c 2C301BE5 		ldr	r3, [fp, #-44]
 845 07a0 002083E5 		str	r2, [r3, #0]	@ float
 193:position_controller.c ****       *pitch = constrain(*pitch, -rpLimit, rpLimit);
 847              	.LM49:
 848 07a4 28301BE5 		ldr	r3, [fp, #-40]
 849 07a8 001093E5 		ldr	r1, [r3, #0]	@ float
 850 07ac 50319FE5 		ldr	r3, .L35+40
 851 07b0 003093E5 		ldr	r3, [r3, #0]	@ float
 852 07b4 022123E2 		eor	r2, r3, #-2147483648
 853 07b8 44319FE5 		ldr	r3, .L35+40
 854 07bc 003093E5 		ldr	r3, [r3, #0]	@ float
 855 07c0 0100A0E1 		mov	r0, r1
 856 07c4 0210A0E1 		mov	r1, r2
 857 07c8 0320A0E1 		mov	r2, r3
 858 07cc FEFFFFEB 		bl	constrain
 859 07d0 0020A0E1 		mov	r2, r0
 860 07d4 28301BE5 		ldr	r3, [fp, #-40]
 861 07d8 002083E5 		str	r2, [r3, #0]	@ float
 194:position_controller.c **** 
 195:position_controller.c ****     // Thrust
 196:position_controller.c ****     thrustRaw = runPid(state->velocity.z, &my_this.pidVZ, my_setpoint.velocity.z, DT);
 863              	.LM50:
 864 07dc 30301BE5 		ldr	r3, [fp, #-48]
 865 07e0 142093E5 		ldr	r2, [r3, #20]	@ float
 866 07e4 04319FE5 		ldr	r3, .L35+20
 867 07e8 143093E5 		ldr	r3, [r3, #20]	@ float
 868 07ec 0200A0E1 		mov	r0, r2
 869 07f0 EC109FE5 		ldr	r1, .L35+8
 870 07f4 0320A0E1 		mov	r2, r3
 871 07f8 F8309FE5 		ldr	r3, .L35+28	@ float
 872 07fc FEFFFFEB 		bl	runPid
 873 0800 0030A0E1 		mov	r3, r0
 874 0804 20300BE5 		str	r3, [fp, #-32]	@ float
 197:position_controller.c ****     // Scale the thrust and add feed forward term
 198:position_controller.c ****     *thrust = thrustRaw + my_this.thrustBase;
 876              	.LM51:
 877 0808 D4209FE5 		ldr	r2, .L35+8
 878 080c 723FA0E3 		mov	r3, #456
 879 0810 B33092E1 		ldrh	r3, [r2, r3]
 880 0814 0300A0E1 		mov	r0, r3
 881 0818 FEFFFFEB 		bl	__floatsisf
 882 081c 0030A0E1 		mov	r3, r0
 883 0820 0300A0E1 		mov	r0, r3
 884 0824 20101BE5 		ldr	r1, [fp, #-32]	@ float
 885 0828 FEFFFFEB 		bl	__addsf3
 886 082c 0030A0E1 		mov	r3, r0
 887 0830 0320A0E1 		mov	r2, r3
 888 0834 24301BE5 		ldr	r3, [fp, #-36]
 889 0838 002083E5 		str	r2, [r3, #0]	@ float
 199:position_controller.c ****     // Check for minimum thrust
 200:position_controller.c ****     if (*thrust < my_this.thrustMin) {
 891              	.LM52:
 892 083c 24301BE5 		ldr	r3, [fp, #-36]
 893 0840 004093E5 		ldr	r4, [r3, #0]	@ float
 894 0844 98209FE5 		ldr	r2, .L35+8
 895 0848 723FA0E3 		mov	r3, #456
 896 084c 023083E2 		add	r3, r3, #2
 897 0850 B33092E1 		ldrh	r3, [r2, r3]
 898 0854 0300A0E1 		mov	r0, r3
 899 0858 FEFFFFEB 		bl	__floatsisf
 900 085c 0030A0E1 		mov	r3, r0
 901 0860 0400A0E1 		mov	r0, r4
 902 0864 0310A0E1 		mov	r1, r3
 903 0868 FEFFFFEB 		bl	__ltsf2
 904 086c 0030A0E1 		mov	r3, r0
 905 0870 000053E3 		cmp	r3, #0
 906 0874 000000BA 		blt	.L32
 907 0878 140000EA 		b	.L34
 908              	.L32:
 201:position_controller.c ****       *thrust = my_this.thrustMin;
 910              	.LM53:
 911 087c 60209FE5 		ldr	r2, .L35+8
 912 0880 723FA0E3 		mov	r3, #456
 913 0884 023083E2 		add	r3, r3, #2
 914 0888 B34092E1 		ldrh	r4, [r2, r3]
 915 088c 0438A0E1 		mov	r3, r4, asl #16
 916 0890 4338A0E1 		mov	r3, r3, asr #16
 917 0894 0300A0E1 		mov	r0, r3
 918 0898 FEFFFFEB 		bl	__floatsisf
 919 089c 34000BE5 		str	r0, [fp, #-52]	@ float
 920 08a0 0438A0E1 		mov	r3, r4, asl #16
 921 08a4 4338A0E1 		mov	r3, r3, asr #16
 922 08a8 000053E3 		cmp	r3, #0
 923 08ac 040000AA 		bge	.L33
 924 08b0 34001BE5 		ldr	r0, [fp, #-52]	@ float
 925 08b4 60109FE5 		ldr	r1, .L35+64	@ float
 926 08b8 FEFFFFEB 		bl	__addsf3
 927 08bc 0030A0E1 		mov	r3, r0
 928 08c0 34300BE5 		str	r3, [fp, #-52]	@ float
 929              	.L33:
 930 08c4 24301BE5 		ldr	r3, [fp, #-36]
 931 08c8 34201BE5 		ldr	r2, [fp, #-52]	@ float
 932 08cc 002083E5 		str	r2, [r3, #0]	@ float
 933              	.L34:
 202:position_controller.c ****     }
 203:position_controller.c **** }
 935              	.LM54:
 936 08d0 10D04BE2 		sub	sp, fp, #16
 937 08d4 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 938 08d8 1EFF2FE1 		bx	lr
 939              	.L36:
 940              		.align	2
 941              	.L35:
 942 08dc 00000000 		.word	xyVelMax
 943 08e0 00000000 		.word	velMaxOverhead
 944 08e4 00000000 		.word	my_this
 945 08e8 00000000 		.word	zVelMax
 946 08ec 00004843 		.word	1128792064
 947 08f0 00000000 		.word	my_setpoint
 948 08f4 E4000000 		.word	my_this+228
 949 08f8 0AD7233C 		.word	1008981770
 950 08fc 7C010000 		.word	my_this+380
 951 0900 4C000000 		.word	my_this+76
 952 0904 00000000 		.word	rpLimit
 953 0908 00000000 		.word	rpLimitOverhead
 954 090c 00007A43 		.word	1132068864
 955 0910 98000000 		.word	my_this+152
 956 0914 30010000 		.word	my_this+304
 957 0918 00000000 		.word	0
 958 091c 00008047 		.word	1199570944
 966              	.Lscope4:
 967              		.align	2
 969              		.global	positionControllerResetAllPID
 971              	positionControllerResetAllPID:
 204:position_controller.c **** 
 205:position_controller.c **** void positionControllerResetAllPID()
 206:position_controller.c **** {
 973              	.LM55:
 974              		@ Function supports interworking.
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 1, uses_anonymous_args = 0
 977 0920 0DC0A0E1 		mov	ip, sp
 978 0924 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 979 0928 04B04CE2 		sub	fp, ip, #4
 207:position_controller.c ****   pidReset(&my_this.pidZ.pid);
 981              	.LM56:
 982 092c 14009FE5 		ldr	r0, .L39
 983 0930 FEFFFFEB 		bl	pidReset
 208:position_controller.c ****   pidReset(&my_this.pidVZ.pid);
 985              	.LM57:
 986 0934 10009FE5 		ldr	r0, .L39+4
 987 0938 FEFFFFEB 		bl	pidReset
 209:position_controller.c **** }
 989              	.LM58:
 990 093c 0CD04BE2 		sub	sp, fp, #12
 991 0940 00689DE8 		ldmfd	sp, {fp, sp, lr}
 992 0944 1EFF2FE1 		bx	lr
 993              	.L40:
 994              		.align	2
 995              	.L39:
 996 0948 4C000000 		.word	my_this+76
 997 094c 00000000 		.word	my_this
 999              	.Lscope5:
 1008              	.Letext0:
 1009              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 position_controller.c
     /tmp/ccB4ZgKC.s:55     .data:00000000 rpLimit
     /tmp/ccB4ZgKC.s:52     .data:00000000 $d
     /tmp/ccB4ZgKC.s:61     .data:00000004 rpLimitOverhead
     /tmp/ccB4ZgKC.s:67     .data:00000008 xyVelMax
     /tmp/ccB4ZgKC.s:73     .data:0000000c zVelMax
     /tmp/ccB4ZgKC.s:79     .data:00000010 velMaxOverhead
     /tmp/ccB4ZgKC.s:86     .rodata:00000000 thrustScale
     /tmp/ccB4ZgKC.s:83     .rodata:00000000 $d
     /tmp/ccB4ZgKC.s:93     .data:00000014 my_this
     /tmp/ccB4ZgKC.s:135    .bss:00000000 $d
     /tmp/ccB4ZgKC.s:136    .bss:00000000 estimateMode.1455
     /tmp/ccB4ZgKC.s:140    .bss:00000004 prev_estimatedZ.1454
     /tmp/ccB4ZgKC.s:148    .text:00000000 $a
     /tmp/ccB4ZgKC.s:157    .text:00000000 positionEstimate
     /tmp/ccB4ZgKC.s:253    .text:00000114 $d
     /tmp/ccB4ZgKC.s:262    .text:0000011c $a
     /tmp/ccB4ZgKC.s:266    .text:0000011c positionControllerInit
     /tmp/ccB4ZgKC.s:392    .text:000002b8 $d
     /tmp/ccB4ZgKC.s:400    .text:000002d0 $a
     /tmp/ccB4ZgKC.s:408    .text:000002d0 runPid
     /tmp/ccB4ZgKC.s:453    .bss:00000008 acc_get_pos.1524
     /tmp/ccB4ZgKC.s:457    .bss:0000000c acc_get_vel.1523
     /tmp/ccB4ZgKC.s:461    .bss:00000010 result.1522
     /tmp/ccB4ZgKC.s:474    .text:0000033c data_fusion
     /tmp/ccB4ZgKC.s:586    .text:00000478 $d
     /tmp/ccB4ZgKC.s:602    .text:00000490 $a
     /tmp/ccB4ZgKC.s:610    .text:00000490 positionController
     /tmp/ccB4ZgKC.s:942    .text:000008dc $d
     /tmp/ccB4ZgKC.s:967    .text:00000920 $a
     /tmp/ccB4ZgKC.s:971    .text:00000920 positionControllerResetAllPID
     /tmp/ccB4ZgKC.s:996    .text:00000948 $d

UNDEFINED SYMBOLS
__mulsf3
__subsf3
__addsf3
__eqsf2
pidInit
pidSetDesired
pidUpdate
__floatsisf
__divsf3
__gtsf2
__ltsf2
cosf
sinf
constrain
my_setpoint
pidReset
