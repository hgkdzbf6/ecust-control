   1              		.file	"MyProtocol.c"
   3              		.text
   4              	.Ltext0:
  83              		.align	2
  90              		.global	my_send
  92              	my_send:
   1:MyProtocol.c  **** /*
   2:MyProtocol.c  ****  * MyProtocol.cpp
   3:MyProtocol.c  ****  *
   4:MyProtocol.c  ****  *  Created on: 2017年6月29日
   5:MyProtocol.c  ****  *      Author: zbf
   6:MyProtocol.c  ****  */
   7:MyProtocol.c  **** 
   8:MyProtocol.c  **** #include "MyProtocol.h"
   9:MyProtocol.c  **** 
  10:MyProtocol.c  **** 
  11:MyProtocol.c  **** void my_send(int fd
  12:MyProtocol.c  **** 		,PackageDefine pd
  13:MyProtocol.c  **** 		,unsigned char pl
  14:MyProtocol.c  **** 		,void* data
  15:MyProtocol.c  **** 		,unsigned char check){
  94              	.LM0:
  95              		@ Function supports interworking.
  96              		@ args = 4, pretend = 0, frame = 28
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98 0000 0DC0A0E1 		mov	ip, sp
  99 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 100 0008 04B04CE2 		sub	fp, ip, #4
 101 000c 1CD04DE2 		sub	sp, sp, #28
 102 0010 18000BE5 		str	r0, [fp, #-24]
 103 0014 1C100BE5 		str	r1, [fp, #-28]
 104 0018 24300BE5 		str	r3, [fp, #-36]
 105 001c 04109BE5 		ldr	r1, [fp, #4]
 106 0020 0230A0E1 		mov	r3, r2
 107 0024 20304BE5 		strb	r3, [fp, #-32]
 108 0028 0130A0E1 		mov	r3, r1
 109 002c 28304BE5 		strb	r3, [fp, #-40]
  16:MyProtocol.c  **** 	int i=0;
 111              	.LM1:
 112 0030 0030A0E3 		mov	r3, #0
 113 0034 14300BE5 		str	r3, [fp, #-20]
  17:MyProtocol.c  **** 	unsigned char t;
  18:MyProtocol.c  **** 	unsigned char crc;
  19:MyProtocol.c  **** 	//send header
  20:MyProtocol.c  **** 	send_single(fd,254);
 115              	.LM2:
 116 0038 18001BE5 		ldr	r0, [fp, #-24]
 117 003c FE10A0E3 		mov	r1, #254
 118 0040 FEFFFFEB 		bl	send_single
  21:MyProtocol.c  **** 	//send package define
  22:MyProtocol.c  **** 	send_single(fd,(unsigned char)pd);
 120              	.LM3:
 121 0044 1C301BE5 		ldr	r3, [fp, #-28]
 122 0048 FF3003E2 		and	r3, r3, #255
 123 004c 18001BE5 		ldr	r0, [fp, #-24]
 124 0050 0310A0E1 		mov	r1, r3
 125 0054 FEFFFFEB 		bl	send_single
  23:MyProtocol.c  **** 	//send package length
  24:MyProtocol.c  **** 	send_single(fd,pl);
 127              	.LM4:
 128 0058 20305BE5 		ldrb	r3, [fp, #-32]	@ zero_extendqisi2
 129 005c 18001BE5 		ldr	r0, [fp, #-24]
 130 0060 0310A0E1 		mov	r1, r3
 131 0064 FEFFFFEB 		bl	send_single
  25:MyProtocol.c  **** 	if(check==0){
 133              	.LM5:
 134 0068 28305BE5 		ldrb	r3, [fp, #-40]	@ zero_extendqisi2
 135 006c 000053E3 		cmp	r3, #0
 136 0070 1300001A 		bne	.L2
  26:MyProtocol.c  **** 		for(i=0;i<pl;i++){
 138              	.LM6:
 139 0074 0030A0E3 		mov	r3, #0
 140 0078 14300BE5 		str	r3, [fp, #-20]
 141 007c 0B0000EA 		b	.L4
 142              	.L5:
  27:MyProtocol.c  **** 			t=*((unsigned char*)data+i);
 144              	.LM7:
 145 0080 24201BE5 		ldr	r2, [fp, #-36]
 146 0084 14301BE5 		ldr	r3, [fp, #-20]
 147 0088 033082E0 		add	r3, r2, r3
 148 008c 0030D3E5 		ldrb	r3, [r3, #0]
 149 0090 0E304BE5 		strb	r3, [fp, #-14]
  28:MyProtocol.c  **** 			send_single(fd,t);
 151              	.LM8:
 152 0094 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 153 0098 18001BE5 		ldr	r0, [fp, #-24]
 154 009c 0310A0E1 		mov	r1, r3
 155 00a0 FEFFFFEB 		bl	send_single
  26:MyProtocol.c  **** 		for(i=0;i<pl;i++){
 157              	.LM9:
 158 00a4 14301BE5 		ldr	r3, [fp, #-20]
 159 00a8 013083E2 		add	r3, r3, #1
 160 00ac 14300BE5 		str	r3, [fp, #-20]
 161              	.L4:
 162 00b0 20205BE5 		ldrb	r2, [fp, #-32]	@ zero_extendqisi2
 163 00b4 14301BE5 		ldr	r3, [fp, #-20]
 164 00b8 030052E1 		cmp	r2, r3
 165 00bc EFFFFFCA 		bgt	.L5
 166 00c0 1D0000EA 		b	.L7
 167              	.L2:
  29:MyProtocol.c  **** 		}
  30:MyProtocol.c  **** 	}else{
  31:MyProtocol.c  **** 		crc=254+pd+pl;
 169              	.LM10:
 170 00c4 1C301BE5 		ldr	r3, [fp, #-28]
 171 00c8 FF2003E2 		and	r2, r3, #255
 172 00cc 20305BE5 		ldrb	r3, [fp, #-32]
 173 00d0 033082E0 		add	r3, r2, r3
 174 00d4 FF3003E2 		and	r3, r3, #255
 175 00d8 023043E2 		sub	r3, r3, #2
 176 00dc 0D304BE5 		strb	r3, [fp, #-13]
  32:MyProtocol.c  **** 		for(i=0;i<pl;i++){
 178              	.LM11:
 179 00e0 0030A0E3 		mov	r3, #0
 180 00e4 14300BE5 		str	r3, [fp, #-20]
 181 00e8 0F0000EA 		b	.L8
 182              	.L9:
  33:MyProtocol.c  **** 			t=*((unsigned char*)data+i);
 184              	.LM12:
 185 00ec 24201BE5 		ldr	r2, [fp, #-36]
 186 00f0 14301BE5 		ldr	r3, [fp, #-20]
 187 00f4 033082E0 		add	r3, r2, r3
 188 00f8 0030D3E5 		ldrb	r3, [r3, #0]
 189 00fc 0E304BE5 		strb	r3, [fp, #-14]
  34:MyProtocol.c  **** 			send_single(fd,t);
 191              	.LM13:
 192 0100 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 193 0104 18001BE5 		ldr	r0, [fp, #-24]
 194 0108 0310A0E1 		mov	r1, r3
 195 010c FEFFFFEB 		bl	send_single
  35:MyProtocol.c  **** 			crc+=t;
 197              	.LM14:
 198 0110 0D205BE5 		ldrb	r2, [fp, #-13]
 199 0114 0E305BE5 		ldrb	r3, [fp, #-14]
 200 0118 033082E0 		add	r3, r2, r3
 201 011c 0D304BE5 		strb	r3, [fp, #-13]
  32:MyProtocol.c  **** 		for(i=0;i<pl;i++){
 203              	.LM15:
 204 0120 14301BE5 		ldr	r3, [fp, #-20]
 205 0124 013083E2 		add	r3, r3, #1
 206 0128 14300BE5 		str	r3, [fp, #-20]
 207              	.L8:
 208 012c 20205BE5 		ldrb	r2, [fp, #-32]	@ zero_extendqisi2
 209 0130 14301BE5 		ldr	r3, [fp, #-20]
 210 0134 030052E1 		cmp	r2, r3
 211 0138 EBFFFFCA 		bgt	.L9
 212              	.L7:
  36:MyProtocol.c  **** 		}
  37:MyProtocol.c  **** 	}
  38:MyProtocol.c  **** 	if(check==0){
 214              	.LM16:
 215 013c 28305BE5 		ldrb	r3, [fp, #-40]	@ zero_extendqisi2
 216 0140 000053E3 		cmp	r3, #0
 217 0144 0300001A 		bne	.L10
  39:MyProtocol.c  **** 		send_single(fd,0);
 219              	.LM17:
 220 0148 18001BE5 		ldr	r0, [fp, #-24]
 221 014c 0010A0E3 		mov	r1, #0
 222 0150 FEFFFFEB 		bl	send_single
 223 0154 030000EA 		b	.L13
 224              	.L10:
  40:MyProtocol.c  **** 	}else{
  41:MyProtocol.c  **** 		send_single(fd,crc);
 226              	.LM18:
 227 0158 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 228 015c 18001BE5 		ldr	r0, [fp, #-24]
 229 0160 0310A0E1 		mov	r1, r3
 230 0164 FEFFFFEB 		bl	send_single
 231              	.L13:
  42:MyProtocol.c  **** 	}
  43:MyProtocol.c  **** }
 233              	.LM19:
 234 0168 0CD04BE2 		sub	sp, fp, #12
 235 016c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 236 0170 1EFF2FE1 		bx	lr
 244              	.Lscope0:
 245              		.align	2
 249              		.global	send_single
 251              	send_single:
  44:MyProtocol.c  **** 
  45:MyProtocol.c  **** void send_single(int fd,unsigned char c){
 253              	.LM20:
 254              		@ Function supports interworking.
 255              		@ args = 0, pretend = 0, frame = 8
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0174 0DC0A0E1 		mov	ip, sp
 258 0178 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 259 017c 04B04CE2 		sub	fp, ip, #4
 260 0180 08D04DE2 		sub	sp, sp, #8
 261 0184 10000BE5 		str	r0, [fp, #-16]
 262 0188 0130A0E1 		mov	r3, r1
 263 018c 14304BE5 		strb	r3, [fp, #-20]
  46:MyProtocol.c  **** 	UARTWriteChar(c);//read_callback(fd,&c,1);
 265              	.LM21:
 266 0190 14305BE5 		ldrb	r3, [fp, #-20]	@ zero_extendqisi2
 267 0194 0300A0E1 		mov	r0, r3
 268 0198 FEFFFFEB 		bl	UARTWriteChar
  47:MyProtocol.c  **** }
 270              	.LM22:
 271 019c 0CD04BE2 		sub	sp, fp, #12
 272 01a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 273 01a4 1EFF2FE1 		bx	lr
 275              	.Lscope1:
 276              		.align	2
 280              		.global	receive_single
 282              	receive_single:
  48:MyProtocol.c  **** 
  49:MyProtocol.c  **** int receive_single(int fd,unsigned char* result){
 284              	.LM23:
 285              		@ Function supports interworking.
 286              		@ args = 0, pretend = 0, frame = 8
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 01a8 0DC0A0E1 		mov	ip, sp
 289 01ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 290 01b0 04B04CE2 		sub	fp, ip, #4
 291 01b4 08D04DE2 		sub	sp, sp, #8
 292 01b8 10000BE5 		str	r0, [fp, #-16]
 293 01bc 14100BE5 		str	r1, [fp, #-20]
  50:MyProtocol.c  **** 	*result=(unsigned char)fd;
 295              	.LM24:
 296 01c0 10301BE5 		ldr	r3, [fp, #-16]
 297 01c4 FF3003E2 		and	r3, r3, #255
 298 01c8 14201BE5 		ldr	r2, [fp, #-20]
 299 01cc 0030C2E5 		strb	r3, [r2, #0]
  51:MyProtocol.c  **** 	return 1;
 301              	.LM25:
 302 01d0 0130A0E3 		mov	r3, #1
  52:MyProtocol.c  **** }
 304              	.LM26:
 305 01d4 0300A0E1 		mov	r0, r3
 306 01d8 0CD04BE2 		sub	sp, fp, #12
 307 01dc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 308 01e0 1EFF2FE1 		bx	lr
 310              	.Lscope2:
 311              		.bss
 312              	crc.1774:
 313 0000 00       		.space	1
 315              	i.1773:
 316 0001 00       		.space	1
 318              	len.1772:
 319 0002 00       		.space	1
 321              	my_index.1771:
 322 0003 00       		.space	1
 324              	t.1770:
 325 0004 00       		.space	1
 327 0005 000000   		.align	2
 328              	flag.1769:
 329 0008 00000000 		.space	4
 331              		.align	2
 332              	status.1768:
 333 000c 00000000 		.space	4
 335              		.text
 336              		.align	2
 343              		.global	my_receive
 345              	my_receive:
  53:MyProtocol.c  **** 
  54:MyProtocol.c  **** //return 0: package is not completed
  55:MyProtocol.c  **** //return 1:package is available
  56:MyProtocol.c  **** ReceiveState my_receive(
  57:MyProtocol.c  **** 		int fd,
  58:MyProtocol.c  **** 		void* buffer,
  59:MyProtocol.c  **** 		void* data,
  60:MyProtocol.c  **** 		int* id,
  61:MyProtocol.c  **** 		unsigned char check){
 347              	.LM27:
 348              		@ Function supports interworking.
 349              		@ args = 4, pretend = 0, frame = 24
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 01e4 0DC0A0E1 		mov	ip, sp
 352 01e8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 353 01ec 04B04CE2 		sub	fp, ip, #4
 354 01f0 18D04DE2 		sub	sp, sp, #24
 355 01f4 10000BE5 		str	r0, [fp, #-16]
 356 01f8 14100BE5 		str	r1, [fp, #-20]
 357 01fc 18200BE5 		str	r2, [fp, #-24]
 358 0200 1C300BE5 		str	r3, [fp, #-28]
 359 0204 04309BE5 		ldr	r3, [fp, #4]
 360 0208 20304BE5 		strb	r3, [fp, #-32]
  62:MyProtocol.c  **** 	//character store temporally
  63:MyProtocol.c  **** 	static int status;
  64:MyProtocol.c  **** 	static ParseStatus flag=PARSE_NOT_START;
  65:MyProtocol.c  **** 	static unsigned char t;
  66:MyProtocol.c  **** 	//get package index
  67:MyProtocol.c  **** 	static unsigned char my_index;
  68:MyProtocol.c  **** 	//get package length
  69:MyProtocol.c  **** 	static unsigned char len;
  70:MyProtocol.c  **** 	static unsigned char i=0;
  71:MyProtocol.c  **** 	static unsigned char crc;
  72:MyProtocol.c  **** 	status=receive_single(fd,&t);
 362              	.LM28:
 363 020c 10001BE5 		ldr	r0, [fp, #-16]
 364 0210 2C139FE5 		ldr	r1, .L41
 365 0214 FEFFFFEB 		bl	receive_single
 366 0218 0020A0E1 		mov	r2, r0
 367 021c 24339FE5 		ldr	r3, .L41+4
 368 0220 002083E5 		str	r2, [r3, #0]
  73:MyProtocol.c  **** 	if(status!=0){
 370              	.LM29:
 371 0224 1C339FE5 		ldr	r3, .L41+4
 372 0228 003093E5 		ldr	r3, [r3, #0]
 373 022c 000053E3 		cmp	r3, #0
 374 0230 B900000A 		beq	.L19
  74:MyProtocol.c  **** 		//some data received
  75:MyProtocol.c  **** 		if(t==254&&flag==PARSE_NOT_START){
 376              	.LM30:
 377 0234 08339FE5 		ldr	r3, .L41
 378 0238 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 379 023c FE0053E3 		cmp	r3, #254
 380 0240 0A00001A 		bne	.L21
 381 0244 00339FE5 		ldr	r3, .L41+8
 382 0248 003093E5 		ldr	r3, [r3, #0]
 383 024c 000053E3 		cmp	r3, #0
 384 0250 0600001A 		bne	.L21
  76:MyProtocol.c  **** 			crc=254;
 386              	.LM31:
 387 0254 F4229FE5 		ldr	r2, .L41+12
 388 0258 0130E0E3 		mvn	r3, #1
 389 025c 0030C2E5 		strb	r3, [r2, #0]
  77:MyProtocol.c  **** 			flag=PARSE_READ_ID;
 391              	.LM32:
 392 0260 E4229FE5 		ldr	r2, .L41+8
 393 0264 0130A0E3 		mov	r3, #1
 394 0268 003082E5 		str	r3, [r2, #0]
  75:MyProtocol.c  **** 		if(t==254&&flag==PARSE_NOT_START){
 396              	.LM33:
 397 026c 5F0000EA 		b	.L24
 398              	.L21:
  78:MyProtocol.c  **** 		}else if(flag==PARSE_READ_ID){
 400              	.LM34:
 401 0270 D4329FE5 		ldr	r3, .L41+8
 402 0274 003093E5 		ldr	r3, [r3, #0]
 403 0278 010053E3 		cmp	r3, #1
 404 027c 0F00001A 		bne	.L25
  79:MyProtocol.c  **** 			my_index=t;
 406              	.LM35:
 407 0280 BC329FE5 		ldr	r3, .L41
 408 0284 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 409 0288 C4229FE5 		ldr	r2, .L41+16
 410 028c 0030C2E5 		strb	r3, [r2, #0]
  80:MyProtocol.c  **** 			crc+=t;
 412              	.LM36:
 413 0290 B8329FE5 		ldr	r3, .L41+12
 414 0294 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 415 0298 A4329FE5 		ldr	r3, .L41
 416 029c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 417 02a0 033082E0 		add	r3, r2, r3
 418 02a4 FF3003E2 		and	r3, r3, #255
 419 02a8 A0229FE5 		ldr	r2, .L41+12
 420 02ac 0030C2E5 		strb	r3, [r2, #0]
  81:MyProtocol.c  **** 			flag=PARSE_READ_LEN;
 422              	.LM37:
 423 02b0 94229FE5 		ldr	r2, .L41+8
 424 02b4 0230A0E3 		mov	r3, #2
 425 02b8 003082E5 		str	r3, [r2, #0]
 426 02bc 4B0000EA 		b	.L24
 427              	.L25:
  82:MyProtocol.c  **** 		}else if(flag==PARSE_READ_LEN){
 429              	.LM38:
 430 02c0 84329FE5 		ldr	r3, .L41+8
 431 02c4 003093E5 		ldr	r3, [r3, #0]
 432 02c8 020053E3 		cmp	r3, #2
 433 02cc 1200001A 		bne	.L27
  83:MyProtocol.c  **** 			len=t;
 435              	.LM39:
 436 02d0 6C329FE5 		ldr	r3, .L41
 437 02d4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 438 02d8 78229FE5 		ldr	r2, .L41+20
 439 02dc 0030C2E5 		strb	r3, [r2, #0]
  84:MyProtocol.c  **** 			i=0;
 441              	.LM40:
 442 02e0 74229FE5 		ldr	r2, .L41+24
 443 02e4 0030A0E3 		mov	r3, #0
 444 02e8 0030C2E5 		strb	r3, [r2, #0]
  85:MyProtocol.c  **** 			crc+=t;
 446              	.LM41:
 447 02ec 5C329FE5 		ldr	r3, .L41+12
 448 02f0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 449 02f4 48329FE5 		ldr	r3, .L41
 450 02f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 451 02fc 033082E0 		add	r3, r2, r3
 452 0300 FF3003E2 		and	r3, r3, #255
 453 0304 44229FE5 		ldr	r2, .L41+12
 454 0308 0030C2E5 		strb	r3, [r2, #0]
  86:MyProtocol.c  **** 			flag=PARSE_READ_DATA;
 456              	.LM42:
 457 030c 38229FE5 		ldr	r2, .L41+8
 458 0310 0330A0E3 		mov	r3, #3
 459 0314 003082E5 		str	r3, [r2, #0]
 460 0318 340000EA 		b	.L24
 461              	.L27:
  87:MyProtocol.c  **** 		}else if(flag==PARSE_READ_DATA){
 463              	.LM43:
 464 031c 28329FE5 		ldr	r3, .L41+8
 465 0320 003093E5 		ldr	r3, [r3, #0]
 466 0324 030053E3 		cmp	r3, #3
 467 0328 1F00001A 		bne	.L29
  88:MyProtocol.c  **** 			memset(((unsigned char*)buffer+i),t,1);
 469              	.LM44:
 470 032c 28329FE5 		ldr	r3, .L41+24
 471 0330 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 472 0334 0320A0E1 		mov	r2, r3
 473 0338 14301BE5 		ldr	r3, [fp, #-20]
 474 033c 032082E0 		add	r2, r2, r3
 475 0340 FC319FE5 		ldr	r3, .L41
 476 0344 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 477 0348 0030C2E5 		strb	r3, [r2, #0]
  89:MyProtocol.c  **** 			i++;
 479              	.LM45:
 480 034c 08329FE5 		ldr	r3, .L41+24
 481 0350 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 482 0354 013083E2 		add	r3, r3, #1
 483 0358 FF3003E2 		and	r3, r3, #255
 484 035c F8219FE5 		ldr	r2, .L41+24
 485 0360 0030C2E5 		strb	r3, [r2, #0]
  90:MyProtocol.c  **** 			crc+=t;
 487              	.LM46:
 488 0364 E4319FE5 		ldr	r3, .L41+12
 489 0368 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 490 036c D0319FE5 		ldr	r3, .L41
 491 0370 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 492 0374 033082E0 		add	r3, r2, r3
 493 0378 FF3003E2 		and	r3, r3, #255
 494 037c CC219FE5 		ldr	r2, .L41+12
 495 0380 0030C2E5 		strb	r3, [r2, #0]
  91:MyProtocol.c  **** 			if(i==len){
 497              	.LM47:
 498 0384 D0319FE5 		ldr	r3, .L41+24
 499 0388 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 500 038c C4319FE5 		ldr	r3, .L41+20
 501 0390 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 502 0394 030052E1 		cmp	r2, r3
 503 0398 1400001A 		bne	.L24
  92:MyProtocol.c  **** 				flag=PARSE_CHECK;
 505              	.LM48:
 506 039c A8219FE5 		ldr	r2, .L41+8
 507 03a0 0430A0E3 		mov	r3, #4
 508 03a4 003082E5 		str	r3, [r2, #0]
 509 03a8 100000EA 		b	.L24
 510              	.L29:
  93:MyProtocol.c  **** 			}
  94:MyProtocol.c  **** 		}else if(flag==PARSE_CHECK){
 512              	.LM49:
 513 03ac 98319FE5 		ldr	r3, .L41+8
 514 03b0 003093E5 		ldr	r3, [r3, #0]
 515 03b4 040053E3 		cmp	r3, #4
 516 03b8 0C00001A 		bne	.L24
  95:MyProtocol.c  **** 			//need to check?
  96:MyProtocol.c  **** 			//if check==0, t=0, so crc=0 ,and it also can be tested
  97:MyProtocol.c  **** 			if(t==crc){
 518              	.LM50:
 519 03bc 80319FE5 		ldr	r3, .L41
 520 03c0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 521 03c4 84319FE5 		ldr	r3, .L41+12
 522 03c8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 523 03cc 030052E1 		cmp	r2, r3
 524 03d0 0300001A 		bne	.L34
  98:MyProtocol.c  **** 				flag=PARSE_SUCCEED;
 526              	.LM51:
 527 03d4 70219FE5 		ldr	r2, .L41+8
 528 03d8 0530A0E3 		mov	r3, #5
 529 03dc 003082E5 		str	r3, [r2, #0]
 530 03e0 020000EA 		b	.L24
 531              	.L34:
  99:MyProtocol.c  **** 			}else{
 100:MyProtocol.c  **** 				//printf("%x    %x\n",crc,t);
 101:MyProtocol.c  **** 				flag=PARSE_FAIL;
 533              	.LM52:
 534 03e4 60219FE5 		ldr	r2, .L41+8
 535 03e8 0630A0E3 		mov	r3, #6
 536 03ec 003082E5 		str	r3, [r2, #0]
 537              	.L24:
 102:MyProtocol.c  **** 			}
 103:MyProtocol.c  **** 		}
 104:MyProtocol.c  **** 		if(flag==PARSE_SUCCEED){
 539              	.LM53:
 540 03f0 54319FE5 		ldr	r3, .L41+8
 541 03f4 003093E5 		ldr	r3, [r3, #0]
 542 03f8 050053E3 		cmp	r3, #5
 543 03fc 2600001A 		bne	.L36
 105:MyProtocol.c  **** 			//need to check?
 106:MyProtocol.c  **** 			memcpy(data,buffer,len);
 545              	.LM54:
 546 0400 50319FE5 		ldr	r3, .L41+20
 547 0404 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 548 0408 0310A0E1 		mov	r1, r3
 549 040c 18301BE5 		ldr	r3, [fp, #-24]
 550 0410 14201BE5 		ldr	r2, [fp, #-20]
 551 0414 01C0A0E1 		mov	ip, r1
 552 0418 0300A0E1 		mov	r0, r3
 553 041c 0210A0E1 		mov	r1, r2
 554 0420 0C20A0E1 		mov	r2, ip
 555 0424 FEFFFFEB 		bl	memcpy
 107:MyProtocol.c  **** 			*id=my_index;
 557              	.LM55:
 558 0428 24319FE5 		ldr	r3, .L41+16
 559 042c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 560 0430 0320A0E1 		mov	r2, r3
 561 0434 1C301BE5 		ldr	r3, [fp, #-28]
 562 0438 002083E5 		str	r2, [r3, #0]
 108:MyProtocol.c  **** 			status=0;flag=PARSE_NOT_START;t=0;
 564              	.LM56:
 565 043c 04219FE5 		ldr	r2, .L41+4
 566 0440 0030A0E3 		mov	r3, #0
 567 0444 003082E5 		str	r3, [r2, #0]
 568 0448 FC209FE5 		ldr	r2, .L41+8
 569 044c 0030A0E3 		mov	r3, #0
 570 0450 003082E5 		str	r3, [r2, #0]
 571 0454 E8209FE5 		ldr	r2, .L41
 572 0458 0030A0E3 		mov	r3, #0
 573 045c 0030C2E5 		strb	r3, [r2, #0]
 109:MyProtocol.c  **** 			my_index=0;len=0;i=0;crc=0;
 575              	.LM57:
 576 0460 EC209FE5 		ldr	r2, .L41+16
 577 0464 0030A0E3 		mov	r3, #0
 578 0468 0030C2E5 		strb	r3, [r2, #0]
 579 046c E4209FE5 		ldr	r2, .L41+20
 580 0470 0030A0E3 		mov	r3, #0
 581 0474 0030C2E5 		strb	r3, [r2, #0]
 582 0478 DC209FE5 		ldr	r2, .L41+24
 583 047c 0030A0E3 		mov	r3, #0
 584 0480 0030C2E5 		strb	r3, [r2, #0]
 585 0484 C4209FE5 		ldr	r2, .L41+12
 586 0488 0030A0E3 		mov	r3, #0
 587 048c 0030C2E5 		strb	r3, [r2, #0]
 110:MyProtocol.c  **** 			return RECEIVE_STATE_SUCCESS;
 589              	.LM58:
 590 0490 0230A0E3 		mov	r3, #2
 591 0494 24300BE5 		str	r3, [fp, #-36]
 592 0498 240000EA 		b	.L38
 593              	.L36:
 111:MyProtocol.c  **** 		}else if(flag==PARSE_FAIL){
 595              	.LM59:
 596 049c A8309FE5 		ldr	r3, .L41+8
 597 04a0 003093E5 		ldr	r3, [r3, #0]
 598 04a4 060053E3 		cmp	r3, #6
 599 04a8 1B00001A 		bne	.L19
 112:MyProtocol.c  **** 			//need to check?
 113:MyProtocol.c  **** 			//memcpy(data,buffer,len);
 114:MyProtocol.c  **** 			memset(data,0,len);
 601              	.LM60:
 602 04ac A4309FE5 		ldr	r3, .L41+20
 603 04b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 604 04b4 0320A0E1 		mov	r2, r3
 605 04b8 18301BE5 		ldr	r3, [fp, #-24]
 606 04bc 0300A0E1 		mov	r0, r3
 607 04c0 0010A0E3 		mov	r1, #0
 608 04c4 FEFFFFEB 		bl	memset
 115:MyProtocol.c  **** 			status=0;flag=PARSE_NOT_START;t=0;
 610              	.LM61:
 611 04c8 78209FE5 		ldr	r2, .L41+4
 612 04cc 0030A0E3 		mov	r3, #0
 613 04d0 003082E5 		str	r3, [r2, #0]
 614 04d4 70209FE5 		ldr	r2, .L41+8
 615 04d8 0030A0E3 		mov	r3, #0
 616 04dc 003082E5 		str	r3, [r2, #0]
 617 04e0 5C209FE5 		ldr	r2, .L41
 618 04e4 0030A0E3 		mov	r3, #0
 619 04e8 0030C2E5 		strb	r3, [r2, #0]
 116:MyProtocol.c  **** 			my_index=0;len=0;i=0;crc=0;
 621              	.LM62:
 622 04ec 60209FE5 		ldr	r2, .L41+16
 623 04f0 0030A0E3 		mov	r3, #0
 624 04f4 0030C2E5 		strb	r3, [r2, #0]
 625 04f8 58209FE5 		ldr	r2, .L41+20
 626 04fc 0030A0E3 		mov	r3, #0
 627 0500 0030C2E5 		strb	r3, [r2, #0]
 628 0504 50209FE5 		ldr	r2, .L41+24
 629 0508 0030A0E3 		mov	r3, #0
 630 050c 0030C2E5 		strb	r3, [r2, #0]
 631 0510 38209FE5 		ldr	r2, .L41+12
 632 0514 0030A0E3 		mov	r3, #0
 633 0518 0030C2E5 		strb	r3, [r2, #0]
 634              	.L19:
 117:MyProtocol.c  **** 		}
 118:MyProtocol.c  **** 		//printf("%d  %d  %d  %d\n",crc,len,i,t);
 119:MyProtocol.c  **** 	}
 120:MyProtocol.c  **** 	*id=-1;
 636              	.LM63:
 637 051c 1C201BE5 		ldr	r2, [fp, #-28]
 638 0520 0030E0E3 		mvn	r3, #0
 639 0524 003082E5 		str	r3, [r2, #0]
 121:MyProtocol.c  **** 	return RECEIVE_STATE_NOT_COMPLETED;
 641              	.LM64:
 642 0528 0030A0E3 		mov	r3, #0
 643 052c 24300BE5 		str	r3, [fp, #-36]
 644              	.L38:
 645 0530 24301BE5 		ldr	r3, [fp, #-36]
 122:MyProtocol.c  **** }
 647              	.LM65:
 648 0534 0300A0E1 		mov	r0, r3
 649 0538 0CD04BE2 		sub	sp, fp, #12
 650 053c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 651 0540 1EFF2FE1 		bx	lr
 652              	.L42:
 653              		.align	2
 654              	.L41:
 655 0544 04000000 		.word	t.1770
 656 0548 0C000000 		.word	status.1768
 657 054c 08000000 		.word	flag.1769
 658 0550 00000000 		.word	crc.1774
 659 0554 03000000 		.word	my_index.1771
 660 0558 02000000 		.word	len.1772
 661 055c 01000000 		.word	i.1773
 673              	.Lscope3:
 674              		.align	2
 677              		.global	getPackageLength
 679              	getPackageLength:
 123:MyProtocol.c  **** unsigned char getPackageLength(PackageDefine pd){
 681              	.LM66:
 682              		@ Function supports interworking.
 683              		@ args = 0, pretend = 0, frame = 8
 684              		@ frame_needed = 1, uses_anonymous_args = 0
 685 0560 0DC0A0E1 		mov	ip, sp
 686 0564 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 687 0568 04B04CE2 		sub	fp, ip, #4
 688 056c 08D04DE2 		sub	sp, sp, #8
 689 0570 10000BE5 		str	r0, [fp, #-16]
 124:MyProtocol.c  **** 	switch(pd){
 691              	.LM67:
 692 0574 10301BE5 		ldr	r3, [fp, #-16]
 693 0578 013043E2 		sub	r3, r3, #1
 694 057c 070053E3 		cmp	r3, #7
 695 0580 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 696 0584 1F0000EA 		b	.L44
 697              		.align	2
 698              	.L53:
 699 0588 A8050000 		.word	.L45
 700 058c B4050000 		.word	.L46
 701 0590 C0050000 		.word	.L47
 702 0594 CC050000 		.word	.L48
 703 0598 D8050000 		.word	.L49
 704 059c E4050000 		.word	.L50
 705 05a0 F0050000 		.word	.L51
 706 05a4 FC050000 		.word	.L52
 707              	.L45:
 125:MyProtocol.c  **** 	case PACKAGE_DEFINE_STATUS:
 126:MyProtocol.c  **** 		return SYSTEM_STATE_LENGTH;
 709              	.LM68:
 710 05a8 0C30A0E3 		mov	r3, #12
 711 05ac 14300BE5 		str	r3, [fp, #-20]
 712 05b0 160000EA 		b	.L54
 713              	.L46:
 127:MyProtocol.c  **** 	case PACKAGE_DEFINE_VICON:
 128:MyProtocol.c  **** 		return VICON_DATA_LENGTH;
 715              	.LM69:
 716 05b4 2830A0E3 		mov	r3, #40
 717 05b8 14300BE5 		str	r3, [fp, #-20]
 718 05bc 130000EA 		b	.L54
 719              	.L47:
 129:MyProtocol.c  **** 	case PACKAGE_DEFINE_SENSOR:
 130:MyProtocol.c  **** 		return SENSOR_DATA_LENGTH;
 721              	.LM70:
 722 05c0 0C30A0E3 		mov	r3, #12
 723 05c4 14300BE5 		str	r3, [fp, #-20]
 724 05c8 100000EA 		b	.L54
 725              	.L48:
 131:MyProtocol.c  **** 	case PACKAGE_DEFINE_FUSION:
 132:MyProtocol.c  **** 		return FUSION_DATA_LENGTH;
 727              	.LM71:
 728 05cc 0830A0E3 		mov	r3, #8
 729 05d0 14300BE5 		str	r3, [fp, #-20]
 730 05d4 0D0000EA 		b	.L54
 731              	.L49:
 133:MyProtocol.c  **** 	case PACKAGE_DEFINE_DEBUG:
 134:MyProtocol.c  **** 		return DEBUG_DATA_LENGTH;
 733              	.LM72:
 734 05d8 4030A0E3 		mov	r3, #64
 735 05dc 14300BE5 		str	r3, [fp, #-20]
 736 05e0 0A0000EA 		b	.L54
 737              	.L50:
 135:MyProtocol.c  **** 	case PACKAGE_DEFINE_PARAM:
 136:MyProtocol.c  **** 		return PARAM_DEBUG_LENGTH;
 739              	.LM73:
 740 05e4 2430A0E3 		mov	r3, #36
 741 05e8 14300BE5 		str	r3, [fp, #-20]
 742 05ec 070000EA 		b	.L54
 743              	.L51:
 137:MyProtocol.c  **** 	case PACKAGE_DEFINE_CMD:
 138:MyProtocol.c  **** 		return CMD_DATA_LENGTH;
 745              	.LM74:
 746 05f0 0430A0E3 		mov	r3, #4
 747 05f4 14300BE5 		str	r3, [fp, #-20]
 748 05f8 040000EA 		b	.L54
 749              	.L52:
 139:MyProtocol.c  **** 	case PACKAGE_DEFINE_POSITION_WAY_POINT:
 140:MyProtocol.c  **** 			return POSITION_WAY_POINT_LENGTH;
 751              	.LM75:
 752 05fc 0C30A0E3 		mov	r3, #12
 753 0600 14300BE5 		str	r3, [fp, #-20]
 754 0604 010000EA 		b	.L54
 755              	.L44:
 141:MyProtocol.c  **** 	default:
 142:MyProtocol.c  **** 		return -1;
 757              	.LM76:
 758 0608 FF30A0E3 		mov	r3, #255
 759 060c 14300BE5 		str	r3, [fp, #-20]
 760              	.L54:
 761 0610 14301BE5 		ldr	r3, [fp, #-20]
 143:MyProtocol.c  **** 	}
 144:MyProtocol.c  **** }
 763              	.LM77:
 764 0614 0300A0E1 		mov	r0, r3
 765 0618 0CD04BE2 		sub	sp, fp, #12
 766 061c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 767 0620 1EFF2FE1 		bx	lr
 769              	.Lscope4:
 771              	.Letext0:
 772              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 MyProtocol.c
     /tmp/ccibsXyi.s:83     .text:00000000 $a
     /tmp/ccibsXyi.s:92     .text:00000000 my_send
     /tmp/ccibsXyi.s:251    .text:00000174 send_single
     /tmp/ccibsXyi.s:282    .text:000001a8 receive_single
     /tmp/ccibsXyi.s:312    .bss:00000000 crc.1774
     /tmp/ccibsXyi.s:313    .bss:00000000 $d
     /tmp/ccibsXyi.s:315    .bss:00000001 i.1773
     /tmp/ccibsXyi.s:318    .bss:00000002 len.1772
     /tmp/ccibsXyi.s:321    .bss:00000003 my_index.1771
     /tmp/ccibsXyi.s:324    .bss:00000004 t.1770
     /tmp/ccibsXyi.s:328    .bss:00000008 flag.1769
     /tmp/ccibsXyi.s:332    .bss:0000000c status.1768
     /tmp/ccibsXyi.s:345    .text:000001e4 my_receive
     /tmp/ccibsXyi.s:655    .text:00000544 $d
     /tmp/ccibsXyi.s:674    .text:00000560 $a
     /tmp/ccibsXyi.s:679    .text:00000560 getPackageLength
     /tmp/ccibsXyi.s:699    .text:00000588 $d
     /tmp/ccibsXyi.s:710    .text:000005a8 $a

UNDEFINED SYMBOLS
UARTWriteChar
memcpy
memset
